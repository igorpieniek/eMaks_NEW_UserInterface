
User_interface_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a9c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006c88  08006c88  00016c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000128  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001b8  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000010  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000080  20000000  08007184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000388  20000080  08007204  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000500  20000408  08007204  00020408  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018afd  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004367  00000000  00000000  00038ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e88  00000000  00000000  0003cf10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001118  00000000  00000000  0003dd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008b95  00000000  00000000  0003eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000059ac  00000000  00000000  00047a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d3f1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e34  00000000  00000000  0004d470  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00007d47  00000000  00000000  000512a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000080 	.word	0x20000080
 8000204:	00000000 	.word	0x00000000
 8000208:	08006c6c 	.word	0x08006c6c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000084 	.word	0x20000084
 8000224:	08006c6c 	.word	0x08006c6c

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <__aeabi_drsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000240:	e002      	b.n	8000248 <__adddf3>
 8000242:	bf00      	nop

08000244 <__aeabi_dsub>:
 8000244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000248 <__adddf3>:
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000252:	ea94 0f05 	teq	r4, r5
 8000256:	bf08      	it	eq
 8000258:	ea90 0f02 	teqeq	r0, r2
 800025c:	bf1f      	itttt	ne
 800025e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000262:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026e:	f000 80e2 	beq.w	8000436 <__adddf3+0x1ee>
 8000272:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027a:	bfb8      	it	lt
 800027c:	426d      	neglt	r5, r5
 800027e:	dd0c      	ble.n	800029a <__adddf3+0x52>
 8000280:	442c      	add	r4, r5
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	ea82 0000 	eor.w	r0, r2, r0
 800028e:	ea83 0101 	eor.w	r1, r3, r1
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	2d36      	cmp	r5, #54	; 0x36
 800029c:	bf88      	it	hi
 800029e:	bd30      	pophi	{r4, r5, pc}
 80002a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x70>
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x84>
 80002c6:	4252      	negs	r2, r2
 80002c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002cc:	ea94 0f05 	teq	r4, r5
 80002d0:	f000 80a7 	beq.w	8000422 <__adddf3+0x1da>
 80002d4:	f1a4 0401 	sub.w	r4, r4, #1
 80002d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002dc:	db0d      	blt.n	80002fa <__adddf3+0xb2>
 80002de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e2:	fa22 f205 	lsr.w	r2, r2, r5
 80002e6:	1880      	adds	r0, r0, r2
 80002e8:	f141 0100 	adc.w	r1, r1, #0
 80002ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f0:	1880      	adds	r0, r0, r2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	4159      	adcs	r1, r3
 80002f8:	e00e      	b.n	8000318 <__adddf3+0xd0>
 80002fa:	f1a5 0520 	sub.w	r5, r5, #32
 80002fe:	f10e 0e20 	add.w	lr, lr, #32
 8000302:	2a01      	cmp	r2, #1
 8000304:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000308:	bf28      	it	cs
 800030a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	18c0      	adds	r0, r0, r3
 8000314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800031c:	d507      	bpl.n	800032e <__adddf3+0xe6>
 800031e:	f04f 0e00 	mov.w	lr, #0
 8000322:	f1dc 0c00 	rsbs	ip, ip, #0
 8000326:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032a:	eb6e 0101 	sbc.w	r1, lr, r1
 800032e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000332:	d31b      	bcc.n	800036c <__adddf3+0x124>
 8000334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000338:	d30c      	bcc.n	8000354 <__adddf3+0x10c>
 800033a:	0849      	lsrs	r1, r1, #1
 800033c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000340:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000344:	f104 0401 	add.w	r4, r4, #1
 8000348:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800034c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000350:	f080 809a 	bcs.w	8000488 <__adddf3+0x240>
 8000354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000358:	bf08      	it	eq
 800035a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035e:	f150 0000 	adcs.w	r0, r0, #0
 8000362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000366:	ea41 0105 	orr.w	r1, r1, r5
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000370:	4140      	adcs	r0, r0
 8000372:	eb41 0101 	adc.w	r1, r1, r1
 8000376:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037a:	f1a4 0401 	sub.w	r4, r4, #1
 800037e:	d1e9      	bne.n	8000354 <__adddf3+0x10c>
 8000380:	f091 0f00 	teq	r1, #0
 8000384:	bf04      	itt	eq
 8000386:	4601      	moveq	r1, r0
 8000388:	2000      	moveq	r0, #0
 800038a:	fab1 f381 	clz	r3, r1
 800038e:	bf08      	it	eq
 8000390:	3320      	addeq	r3, #32
 8000392:	f1a3 030b 	sub.w	r3, r3, #11
 8000396:	f1b3 0220 	subs.w	r2, r3, #32
 800039a:	da0c      	bge.n	80003b6 <__adddf3+0x16e>
 800039c:	320c      	adds	r2, #12
 800039e:	dd08      	ble.n	80003b2 <__adddf3+0x16a>
 80003a0:	f102 0c14 	add.w	ip, r2, #20
 80003a4:	f1c2 020c 	rsb	r2, r2, #12
 80003a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ac:	fa21 f102 	lsr.w	r1, r1, r2
 80003b0:	e00c      	b.n	80003cc <__adddf3+0x184>
 80003b2:	f102 0214 	add.w	r2, r2, #20
 80003b6:	bfd8      	it	le
 80003b8:	f1c2 0c20 	rsble	ip, r2, #32
 80003bc:	fa01 f102 	lsl.w	r1, r1, r2
 80003c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c4:	bfdc      	itt	le
 80003c6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ca:	4090      	lslle	r0, r2
 80003cc:	1ae4      	subs	r4, r4, r3
 80003ce:	bfa2      	ittt	ge
 80003d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d4:	4329      	orrge	r1, r5
 80003d6:	bd30      	popge	{r4, r5, pc}
 80003d8:	ea6f 0404 	mvn.w	r4, r4
 80003dc:	3c1f      	subs	r4, #31
 80003de:	da1c      	bge.n	800041a <__adddf3+0x1d2>
 80003e0:	340c      	adds	r4, #12
 80003e2:	dc0e      	bgt.n	8000402 <__adddf3+0x1ba>
 80003e4:	f104 0414 	add.w	r4, r4, #20
 80003e8:	f1c4 0220 	rsb	r2, r4, #32
 80003ec:	fa20 f004 	lsr.w	r0, r0, r4
 80003f0:	fa01 f302 	lsl.w	r3, r1, r2
 80003f4:	ea40 0003 	orr.w	r0, r0, r3
 80003f8:	fa21 f304 	lsr.w	r3, r1, r4
 80003fc:	ea45 0103 	orr.w	r1, r5, r3
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	f1c4 040c 	rsb	r4, r4, #12
 8000406:	f1c4 0220 	rsb	r2, r4, #32
 800040a:	fa20 f002 	lsr.w	r0, r0, r2
 800040e:	fa01 f304 	lsl.w	r3, r1, r4
 8000412:	ea40 0003 	orr.w	r0, r0, r3
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	fa21 f004 	lsr.w	r0, r1, r4
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f094 0f00 	teq	r4, #0
 8000426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042a:	bf06      	itte	eq
 800042c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000430:	3401      	addeq	r4, #1
 8000432:	3d01      	subne	r5, #1
 8000434:	e74e      	b.n	80002d4 <__adddf3+0x8c>
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf18      	it	ne
 800043c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000440:	d029      	beq.n	8000496 <__adddf3+0x24e>
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	d005      	beq.n	800045a <__adddf3+0x212>
 800044e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000452:	bf04      	itt	eq
 8000454:	4619      	moveq	r1, r3
 8000456:	4610      	moveq	r0, r2
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea91 0f03 	teq	r1, r3
 800045e:	bf1e      	ittt	ne
 8000460:	2100      	movne	r1, #0
 8000462:	2000      	movne	r0, #0
 8000464:	bd30      	popne	{r4, r5, pc}
 8000466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046a:	d105      	bne.n	8000478 <__adddf3+0x230>
 800046c:	0040      	lsls	r0, r0, #1
 800046e:	4149      	adcs	r1, r1
 8000470:	bf28      	it	cs
 8000472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000476:	bd30      	pop	{r4, r5, pc}
 8000478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800047c:	bf3c      	itt	cc
 800047e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000482:	bd30      	popcc	{r4, r5, pc}
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf1a      	itte	ne
 800049c:	4619      	movne	r1, r3
 800049e:	4610      	movne	r0, r2
 80004a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a4:	bf1c      	itt	ne
 80004a6:	460b      	movne	r3, r1
 80004a8:	4602      	movne	r2, r0
 80004aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ae:	bf06      	itte	eq
 80004b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b4:	ea91 0f03 	teqeq	r1, r3
 80004b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	bf00      	nop

080004c0 <__aeabi_ui2d>:
 80004c0:	f090 0f00 	teq	r0, #0
 80004c4:	bf04      	itt	eq
 80004c6:	2100      	moveq	r1, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d4:	f04f 0500 	mov.w	r5, #0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e750      	b.n	8000380 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_i2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f8:	bf48      	it	mi
 80004fa:	4240      	negmi	r0, r0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e73e      	b.n	8000380 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_f2d>:
 8000504:	0042      	lsls	r2, r0, #1
 8000506:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050a:	ea4f 0131 	mov.w	r1, r1, rrx
 800050e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000512:	bf1f      	itttt	ne
 8000514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800051c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000520:	4770      	bxne	lr
 8000522:	f092 0f00 	teq	r2, #0
 8000526:	bf14      	ite	ne
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e720      	b.n	8000380 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aedc 	beq.w	800032e <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6c1      	b.n	800032e <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpun>:
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__aeabi_dcmpun+0x10>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d10a      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x20>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0001 	mov.w	r0, #1
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_frsub>:
 8000b4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b50:	e002      	b.n	8000b58 <__addsf3>
 8000b52:	bf00      	nop

08000b54 <__aeabi_fsub>:
 8000b54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b58 <__addsf3>:
 8000b58:	0042      	lsls	r2, r0, #1
 8000b5a:	bf1f      	itttt	ne
 8000b5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b60:	ea92 0f03 	teqne	r2, r3
 8000b64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6c:	d06a      	beq.n	8000c44 <__addsf3+0xec>
 8000b6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b76:	bfc1      	itttt	gt
 8000b78:	18d2      	addgt	r2, r2, r3
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	4048      	eorgt	r0, r1
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	bfb8      	it	lt
 8000b82:	425b      	neglt	r3, r3
 8000b84:	2b19      	cmp	r3, #25
 8000b86:	bf88      	it	hi
 8000b88:	4770      	bxhi	lr
 8000b8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4249      	negne	r1, r1
 8000baa:	ea92 0f03 	teq	r2, r3
 8000bae:	d03f      	beq.n	8000c30 <__addsf3+0xd8>
 8000bb0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb8:	eb10 000c 	adds.w	r0, r0, ip
 8000bbc:	f1c3 0320 	rsb	r3, r3, #32
 8000bc0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__addsf3+0x78>
 8000bca:	4249      	negs	r1, r1
 8000bcc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd4:	d313      	bcc.n	8000bfe <__addsf3+0xa6>
 8000bd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bda:	d306      	bcc.n	8000bea <__addsf3+0x92>
 8000bdc:	0840      	lsrs	r0, r0, #1
 8000bde:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be2:	f102 0201 	add.w	r2, r2, #1
 8000be6:	2afe      	cmp	r2, #254	; 0xfe
 8000be8:	d251      	bcs.n	8000c8e <__addsf3+0x136>
 8000bea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf2:	bf08      	it	eq
 8000bf4:	f020 0001 	biceq.w	r0, r0, #1
 8000bf8:	ea40 0003 	orr.w	r0, r0, r3
 8000bfc:	4770      	bx	lr
 8000bfe:	0049      	lsls	r1, r1, #1
 8000c00:	eb40 0000 	adc.w	r0, r0, r0
 8000c04:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	d1ed      	bne.n	8000bea <__addsf3+0x92>
 8000c0e:	fab0 fc80 	clz	ip, r0
 8000c12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c16:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1e:	bfaa      	itet	ge
 8000c20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c24:	4252      	neglt	r2, r2
 8000c26:	4318      	orrge	r0, r3
 8000c28:	bfbc      	itt	lt
 8000c2a:	40d0      	lsrlt	r0, r2
 8000c2c:	4318      	orrlt	r0, r3
 8000c2e:	4770      	bx	lr
 8000c30:	f092 0f00 	teq	r2, #0
 8000c34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c38:	bf06      	itte	eq
 8000c3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3e:	3201      	addeq	r2, #1
 8000c40:	3b01      	subne	r3, #1
 8000c42:	e7b5      	b.n	8000bb0 <__addsf3+0x58>
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d021      	beq.n	8000c98 <__addsf3+0x140>
 8000c54:	ea92 0f03 	teq	r2, r3
 8000c58:	d004      	beq.n	8000c64 <__addsf3+0x10c>
 8000c5a:	f092 0f00 	teq	r2, #0
 8000c5e:	bf08      	it	eq
 8000c60:	4608      	moveq	r0, r1
 8000c62:	4770      	bx	lr
 8000c64:	ea90 0f01 	teq	r0, r1
 8000c68:	bf1c      	itt	ne
 8000c6a:	2000      	movne	r0, #0
 8000c6c:	4770      	bxne	lr
 8000c6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c72:	d104      	bne.n	8000c7e <__addsf3+0x126>
 8000c74:	0040      	lsls	r0, r0, #1
 8000c76:	bf28      	it	cs
 8000c78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c82:	bf3c      	itt	cc
 8000c84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bxcc	lr
 8000c8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c96:	4770      	bx	lr
 8000c98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c9c:	bf16      	itet	ne
 8000c9e:	4608      	movne	r0, r1
 8000ca0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca4:	4601      	movne	r1, r0
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	bf06      	itte	eq
 8000caa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cae:	ea90 0f01 	teqeq	r0, r1
 8000cb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_ui2f>:
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e004      	b.n	8000cc8 <__aeabi_i2f+0x8>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_i2f>:
 8000cc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	bf48      	it	mi
 8000cc6:	4240      	negmi	r0, r0
 8000cc8:	ea5f 0c00 	movs.w	ip, r0
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	f04f 0000 	mov.w	r0, #0
 8000cda:	e01c      	b.n	8000d16 <__aeabi_l2f+0x2a>

08000cdc <__aeabi_ul2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e00a      	b.n	8000d00 <__aeabi_l2f+0x14>
 8000cea:	bf00      	nop

08000cec <__aeabi_l2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf8:	d502      	bpl.n	8000d00 <__aeabi_l2f+0x14>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	ea5f 0c01 	movs.w	ip, r1
 8000d04:	bf02      	ittt	eq
 8000d06:	4684      	moveq	ip, r0
 8000d08:	4601      	moveq	r1, r0
 8000d0a:	2000      	moveq	r0, #0
 8000d0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d10:	bf08      	it	eq
 8000d12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1a:	fabc f28c 	clz	r2, ip
 8000d1e:	3a08      	subs	r2, #8
 8000d20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d24:	db10      	blt.n	8000d48 <__aeabi_l2f+0x5c>
 8000d26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d38:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f102 0220 	add.w	r2, r2, #32
 8000d4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d58:	fa21 f202 	lsr.w	r2, r1, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_fmul>:
 8000d68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d70:	bf1e      	ittt	ne
 8000d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d76:	ea92 0f0c 	teqne	r2, ip
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d06f      	beq.n	8000e60 <__aeabi_fmul+0xf8>
 8000d80:	441a      	add	r2, r3
 8000d82:	ea80 0c01 	eor.w	ip, r0, r1
 8000d86:	0240      	lsls	r0, r0, #9
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8e:	d01e      	beq.n	8000dce <__aeabi_fmul+0x66>
 8000d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000da0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000da8:	bf3e      	ittt	cc
 8000daa:	0049      	lslcc	r1, r1, #1
 8000dac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db0:	005b      	lslcc	r3, r3, #1
 8000db2:	ea40 0001 	orr.w	r0, r0, r1
 8000db6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dba:	2afd      	cmp	r2, #253	; 0xfd
 8000dbc:	d81d      	bhi.n	8000dfa <__aeabi_fmul+0x92>
 8000dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc6:	bf08      	it	eq
 8000dc8:	f020 0001 	biceq.w	r0, r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd6:	bf08      	it	eq
 8000dd8:	0249      	lsleq	r1, r1, #9
 8000dda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de2:	3a7f      	subs	r2, #127	; 0x7f
 8000de4:	bfc2      	ittt	gt
 8000de6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dee:	4770      	bxgt	lr
 8000df0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	dc5d      	bgt.n	8000eb8 <__aeabi_fmul+0x150>
 8000dfc:	f112 0f19 	cmn.w	r2, #25
 8000e00:	bfdc      	itt	le
 8000e02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e06:	4770      	bxle	lr
 8000e08:	f1c2 0200 	rsb	r2, r2, #0
 8000e0c:	0041      	lsls	r1, r0, #1
 8000e0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e12:	f1c2 0220 	rsb	r2, r2, #32
 8000e16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1e:	f140 0000 	adc.w	r0, r0, #0
 8000e22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e26:	bf08      	it	eq
 8000e28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2c:	4770      	bx	lr
 8000e2e:	f092 0f00 	teq	r2, #0
 8000e32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0040      	lsleq	r0, r0, #1
 8000e3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3e:	3a01      	subeq	r2, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fmul+0xce>
 8000e42:	ea40 000c 	orr.w	r0, r0, ip
 8000e46:	f093 0f00 	teq	r3, #0
 8000e4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0049      	lsleq	r1, r1, #1
 8000e52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e56:	3b01      	subeq	r3, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xe6>
 8000e5a:	ea41 010c 	orr.w	r1, r1, ip
 8000e5e:	e78f      	b.n	8000d80 <__aeabi_fmul+0x18>
 8000e60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	bf18      	it	ne
 8000e6a:	ea93 0f0c 	teqne	r3, ip
 8000e6e:	d00a      	beq.n	8000e86 <__aeabi_fmul+0x11e>
 8000e70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e74:	bf18      	it	ne
 8000e76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	d1d8      	bne.n	8000e2e <__aeabi_fmul+0xc6>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	bf17      	itett	ne
 8000e8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e90:	4608      	moveq	r0, r1
 8000e92:	f091 0f00 	teqne	r1, #0
 8000e96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9a:	d014      	beq.n	8000ec6 <__aeabi_fmul+0x15e>
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d101      	bne.n	8000ea6 <__aeabi_fmul+0x13e>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	d10f      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000ea6:	ea93 0f0c 	teq	r3, ip
 8000eaa:	d103      	bne.n	8000eb4 <__aeabi_fmul+0x14c>
 8000eac:	024b      	lsls	r3, r1, #9
 8000eae:	bf18      	it	ne
 8000eb0:	4608      	movne	r0, r1
 8000eb2:	d108      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000eb4:	ea80 0001 	eor.w	r0, r0, r1
 8000eb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ebc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec4:	4770      	bx	lr
 8000ec6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_fdiv>:
 8000ed0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed8:	bf1e      	ittt	ne
 8000eda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ede:	ea92 0f0c 	teqne	r2, ip
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d069      	beq.n	8000fbc <__aeabi_fdiv+0xec>
 8000ee8:	eba2 0203 	sub.w	r2, r2, r3
 8000eec:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef0:	0249      	lsls	r1, r1, #9
 8000ef2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef6:	d037      	beq.n	8000f68 <__aeabi_fdiv+0x98>
 8000ef8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000efc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	bf38      	it	cc
 8000f0c:	005b      	lslcc	r3, r3, #1
 8000f0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f16:	428b      	cmp	r3, r1
 8000f18:	bf24      	itt	cs
 8000f1a:	1a5b      	subcs	r3, r3, r1
 8000f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f32:	bf24      	itt	cs
 8000f34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	bf18      	it	ne
 8000f4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f52:	d1e0      	bne.n	8000f16 <__aeabi_fdiv+0x46>
 8000f54:	2afd      	cmp	r2, #253	; 0xfd
 8000f56:	f63f af50 	bhi.w	8000dfa <__aeabi_fmul+0x92>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f60:	bf08      	it	eq
 8000f62:	f020 0001 	biceq.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f70:	327f      	adds	r2, #127	; 0x7f
 8000f72:	bfc2      	ittt	gt
 8000f74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f7c:	4770      	bxgt	lr
 8000f7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	3a01      	subs	r2, #1
 8000f88:	e737      	b.n	8000dfa <__aeabi_fmul+0x92>
 8000f8a:	f092 0f00 	teq	r2, #0
 8000f8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0040      	lsleq	r0, r0, #1
 8000f96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9a:	3a01      	subeq	r2, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fdiv+0xc2>
 8000f9e:	ea40 000c 	orr.w	r0, r0, ip
 8000fa2:	f093 0f00 	teq	r3, #0
 8000fa6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0049      	lsleq	r1, r1, #1
 8000fae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb2:	3b01      	subeq	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xda>
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	e795      	b.n	8000ee8 <__aeabi_fdiv+0x18>
 8000fbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc0:	ea92 0f0c 	teq	r2, ip
 8000fc4:	d108      	bne.n	8000fd8 <__aeabi_fdiv+0x108>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	f47f af7d 	bne.w	8000ec6 <__aeabi_fmul+0x15e>
 8000fcc:	ea93 0f0c 	teq	r3, ip
 8000fd0:	f47f af70 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e776      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	d104      	bne.n	8000fe8 <__aeabi_fdiv+0x118>
 8000fde:	024b      	lsls	r3, r1, #9
 8000fe0:	f43f af4c 	beq.w	8000e7c <__aeabi_fmul+0x114>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e76e      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fe8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fec:	bf18      	it	ne
 8000fee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff2:	d1ca      	bne.n	8000f8a <__aeabi_fdiv+0xba>
 8000ff4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ff8:	f47f af5c 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000ffc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001000:	f47f af3c 	bne.w	8000e7c <__aeabi_fmul+0x114>
 8001004:	e75f      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8001006:	bf00      	nop

08001008 <__gesf2>:
 8001008:	f04f 3cff 	mov.w	ip, #4294967295
 800100c:	e006      	b.n	800101c <__cmpsf2+0x4>
 800100e:	bf00      	nop

08001010 <__lesf2>:
 8001010:	f04f 0c01 	mov.w	ip, #1
 8001014:	e002      	b.n	800101c <__cmpsf2+0x4>
 8001016:	bf00      	nop

08001018 <__cmpsf2>:
 8001018:	f04f 0c01 	mov.w	ip, #1
 800101c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	bf18      	it	ne
 800102e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001032:	d011      	beq.n	8001058 <__cmpsf2+0x40>
 8001034:	b001      	add	sp, #4
 8001036:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103a:	bf18      	it	ne
 800103c:	ea90 0f01 	teqne	r0, r1
 8001040:	bf58      	it	pl
 8001042:	ebb2 0003 	subspl.w	r0, r2, r3
 8001046:	bf88      	it	hi
 8001048:	17c8      	asrhi	r0, r1, #31
 800104a:	bf38      	it	cc
 800104c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001050:	bf18      	it	ne
 8001052:	f040 0001 	orrne.w	r0, r0, #1
 8001056:	4770      	bx	lr
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__cmpsf2+0x4c>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d105      	bne.n	8001070 <__cmpsf2+0x58>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d1e4      	bne.n	8001034 <__cmpsf2+0x1c>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d0e1      	beq.n	8001034 <__cmpsf2+0x1c>
 8001070:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__aeabi_cfrcmple>:
 8001078:	4684      	mov	ip, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4661      	mov	r1, ip
 800107e:	e7ff      	b.n	8001080 <__aeabi_cfcmpeq>

08001080 <__aeabi_cfcmpeq>:
 8001080:	b50f      	push	{r0, r1, r2, r3, lr}
 8001082:	f7ff ffc9 	bl	8001018 <__cmpsf2>
 8001086:	2800      	cmp	r0, #0
 8001088:	bf48      	it	mi
 800108a:	f110 0f00 	cmnmi.w	r0, #0
 800108e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001090 <__aeabi_fcmpeq>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff fff4 	bl	8001080 <__aeabi_cfcmpeq>
 8001098:	bf0c      	ite	eq
 800109a:	2001      	moveq	r0, #1
 800109c:	2000      	movne	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmplt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffea 	bl	8001080 <__aeabi_cfcmpeq>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmple>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffe0 	bl	8001080 <__aeabi_cfcmpeq>
 80010c0:	bf94      	ite	ls
 80010c2:	2001      	movls	r0, #1
 80010c4:	2000      	movhi	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmpge>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffd2 	bl	8001078 <__aeabi_cfrcmple>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpgt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffc8 	bl	8001078 <__aeabi_cfrcmple>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <selfrel_offset31>:
 80010f4:	6803      	ldr	r3, [r0, #0]
 80010f6:	005a      	lsls	r2, r3, #1
 80010f8:	bf4c      	ite	mi
 80010fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80010fe:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8001102:	4418      	add	r0, r3
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <search_EIT_table>:
 8001108:	b361      	cbz	r1, 8001164 <search_EIT_table+0x5c>
 800110a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110e:	f101 3aff 	add.w	sl, r1, #4294967295
 8001112:	4690      	mov	r8, r2
 8001114:	4606      	mov	r6, r0
 8001116:	46d1      	mov	r9, sl
 8001118:	2700      	movs	r7, #0
 800111a:	eb07 0409 	add.w	r4, r7, r9
 800111e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001122:	1064      	asrs	r4, r4, #1
 8001124:	00e5      	lsls	r5, r4, #3
 8001126:	1971      	adds	r1, r6, r5
 8001128:	4608      	mov	r0, r1
 800112a:	f7ff ffe3 	bl	80010f4 <selfrel_offset31>
 800112e:	45a2      	cmp	sl, r4
 8001130:	4683      	mov	fp, r0
 8001132:	f105 0008 	add.w	r0, r5, #8
 8001136:	4430      	add	r0, r6
 8001138:	d009      	beq.n	800114e <search_EIT_table+0x46>
 800113a:	f7ff ffdb 	bl	80010f4 <selfrel_offset31>
 800113e:	45c3      	cmp	fp, r8
 8001140:	f100 30ff 	add.w	r0, r0, #4294967295
 8001144:	d805      	bhi.n	8001152 <search_EIT_table+0x4a>
 8001146:	4540      	cmp	r0, r8
 8001148:	d209      	bcs.n	800115e <search_EIT_table+0x56>
 800114a:	1c67      	adds	r7, r4, #1
 800114c:	e7e5      	b.n	800111a <search_EIT_table+0x12>
 800114e:	45c3      	cmp	fp, r8
 8001150:	d905      	bls.n	800115e <search_EIT_table+0x56>
 8001152:	42a7      	cmp	r7, r4
 8001154:	d002      	beq.n	800115c <search_EIT_table+0x54>
 8001156:	f104 39ff 	add.w	r9, r4, #4294967295
 800115a:	e7de      	b.n	800111a <search_EIT_table+0x12>
 800115c:	2100      	movs	r1, #0
 800115e:	4608      	mov	r0, r1
 8001160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001164:	4608      	mov	r0, r1
 8001166:	4770      	bx	lr

08001168 <__gnu_unwind_get_pr_addr>:
 8001168:	2801      	cmp	r0, #1
 800116a:	d007      	beq.n	800117c <__gnu_unwind_get_pr_addr+0x14>
 800116c:	2802      	cmp	r0, #2
 800116e:	d007      	beq.n	8001180 <__gnu_unwind_get_pr_addr+0x18>
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__gnu_unwind_get_pr_addr+0x1c>)
 8001172:	2800      	cmp	r0, #0
 8001174:	bf0c      	ite	eq
 8001176:	4618      	moveq	r0, r3
 8001178:	2000      	movne	r0, #0
 800117a:	4770      	bx	lr
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <__gnu_unwind_get_pr_addr+0x20>)
 800117e:	4770      	bx	lr
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <__gnu_unwind_get_pr_addr+0x24>)
 8001182:	4770      	bx	lr
 8001184:	08001879 	.word	0x08001879
 8001188:	0800187d 	.word	0x0800187d
 800118c:	08001881 	.word	0x08001881

08001190 <get_eit_entry>:
 8001190:	b530      	push	{r4, r5, lr}
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <get_eit_entry+0x98>)
 8001194:	b083      	sub	sp, #12
 8001196:	4604      	mov	r4, r0
 8001198:	1e8d      	subs	r5, r1, #2
 800119a:	b373      	cbz	r3, 80011fa <get_eit_entry+0x6a>
 800119c:	a901      	add	r1, sp, #4
 800119e:	4628      	mov	r0, r5
 80011a0:	f3af 8000 	nop.w
 80011a4:	b318      	cbz	r0, 80011ee <get_eit_entry+0x5e>
 80011a6:	9901      	ldr	r1, [sp, #4]
 80011a8:	462a      	mov	r2, r5
 80011aa:	f7ff ffad 	bl	8001108 <search_EIT_table>
 80011ae:	4601      	mov	r1, r0
 80011b0:	b1e8      	cbz	r0, 80011ee <get_eit_entry+0x5e>
 80011b2:	f7ff ff9f 	bl	80010f4 <selfrel_offset31>
 80011b6:	684b      	ldr	r3, [r1, #4]
 80011b8:	64a0      	str	r0, [r4, #72]	; 0x48
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d011      	beq.n	80011e2 <get_eit_entry+0x52>
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db22      	blt.n	8001208 <get_eit_entry+0x78>
 80011c2:	1d08      	adds	r0, r1, #4
 80011c4:	f7ff ff96 	bl	80010f4 <selfrel_offset31>
 80011c8:	2300      	movs	r3, #0
 80011ca:	64e0      	str	r0, [r4, #76]	; 0x4c
 80011cc:	6523      	str	r3, [r4, #80]	; 0x50
 80011ce:	6803      	ldr	r3, [r0, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db1e      	blt.n	8001212 <get_eit_entry+0x82>
 80011d4:	f7ff ff8e 	bl	80010f4 <selfrel_offset31>
 80011d8:	2300      	movs	r3, #0
 80011da:	6120      	str	r0, [r4, #16]
 80011dc:	4618      	mov	r0, r3
 80011de:	b003      	add	sp, #12
 80011e0:	bd30      	pop	{r4, r5, pc}
 80011e2:	2305      	movs	r3, #5
 80011e4:	2200      	movs	r2, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	6122      	str	r2, [r4, #16]
 80011ea:	b003      	add	sp, #12
 80011ec:	bd30      	pop	{r4, r5, pc}
 80011ee:	2309      	movs	r3, #9
 80011f0:	2200      	movs	r2, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	6122      	str	r2, [r4, #16]
 80011f6:	b003      	add	sp, #12
 80011f8:	bd30      	pop	{r4, r5, pc}
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <get_eit_entry+0x9c>)
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <get_eit_entry+0xa0>)
 80011fe:	4618      	mov	r0, r3
 8001200:	1ac9      	subs	r1, r1, r3
 8001202:	10c9      	asrs	r1, r1, #3
 8001204:	9101      	str	r1, [sp, #4]
 8001206:	e7cf      	b.n	80011a8 <get_eit_entry+0x18>
 8001208:	2301      	movs	r3, #1
 800120a:	1d08      	adds	r0, r1, #4
 800120c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800120e:	6523      	str	r3, [r4, #80]	; 0x50
 8001210:	e7dd      	b.n	80011ce <get_eit_entry+0x3e>
 8001212:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8001216:	f7ff ffa7 	bl	8001168 <__gnu_unwind_get_pr_addr>
 800121a:	2800      	cmp	r0, #0
 800121c:	6120      	str	r0, [r4, #16]
 800121e:	bf14      	ite	ne
 8001220:	2300      	movne	r3, #0
 8001222:	2309      	moveq	r3, #9
 8001224:	e7da      	b.n	80011dc <get_eit_entry+0x4c>
 8001226:	bf00      	nop
 8001228:	00000000 	.word	0x00000000
 800122c:	08006fb8 	.word	0x08006fb8
 8001230:	08007170 	.word	0x08007170

08001234 <restore_non_core_regs>:
 8001234:	6803      	ldr	r3, [r0, #0]
 8001236:	b510      	push	{r4, lr}
 8001238:	07da      	lsls	r2, r3, #31
 800123a:	4604      	mov	r4, r0
 800123c:	d406      	bmi.n	800124c <restore_non_core_regs+0x18>
 800123e:	079b      	lsls	r3, r3, #30
 8001240:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001244:	d509      	bpl.n	800125a <restore_non_core_regs+0x26>
 8001246:	f000 fc57 	bl	8001af8 <__gnu_Unwind_Restore_VFP_D>
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	0759      	lsls	r1, r3, #29
 800124e:	d509      	bpl.n	8001264 <restore_non_core_regs+0x30>
 8001250:	071a      	lsls	r2, r3, #28
 8001252:	d50e      	bpl.n	8001272 <restore_non_core_regs+0x3e>
 8001254:	06db      	lsls	r3, r3, #27
 8001256:	d513      	bpl.n	8001280 <restore_non_core_regs+0x4c>
 8001258:	bd10      	pop	{r4, pc}
 800125a:	f000 fc45 	bl	8001ae8 <__gnu_Unwind_Restore_VFP>
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	0759      	lsls	r1, r3, #29
 8001262:	d4f5      	bmi.n	8001250 <restore_non_core_regs+0x1c>
 8001264:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001268:	f000 fc4e 	bl	8001b08 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	071a      	lsls	r2, r3, #28
 8001270:	d4f0      	bmi.n	8001254 <restore_non_core_regs+0x20>
 8001272:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001276:	f000 fc4f 	bl	8001b18 <__gnu_Unwind_Restore_WMMXD>
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	06db      	lsls	r3, r3, #27
 800127e:	d4eb      	bmi.n	8001258 <restore_non_core_regs+0x24>
 8001280:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001288:	f000 bc8a 	b.w	8001ba0 <__gnu_Unwind_Restore_WMMXC>

0800128c <_Unwind_decode_typeinfo_ptr.isra.0>:
 800128c:	6803      	ldr	r3, [r0, #0]
 800128e:	b103      	cbz	r3, 8001292 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8001290:	4403      	add	r3, r0
 8001292:	4618      	mov	r0, r3
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <__gnu_unwind_24bit.isra.1>:
 8001298:	2009      	movs	r0, #9
 800129a:	4770      	bx	lr

0800129c <_Unwind_DebugHook>:
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <unwind_phase2>:
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	4604      	mov	r4, r0
 80012a4:	460d      	mov	r5, r1
 80012a6:	e008      	b.n	80012ba <unwind_phase2+0x1a>
 80012a8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80012aa:	6923      	ldr	r3, [r4, #16]
 80012ac:	6162      	str	r2, [r4, #20]
 80012ae:	4621      	mov	r1, r4
 80012b0:	462a      	mov	r2, r5
 80012b2:	2001      	movs	r0, #1
 80012b4:	4798      	blx	r3
 80012b6:	2808      	cmp	r0, #8
 80012b8:	d108      	bne.n	80012cc <unwind_phase2+0x2c>
 80012ba:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff ff67 	bl	8001190 <get_eit_entry>
 80012c2:	4606      	mov	r6, r0
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d0ef      	beq.n	80012a8 <unwind_phase2+0x8>
 80012c8:	f005 fbe3 	bl	8006a92 <abort>
 80012cc:	2807      	cmp	r0, #7
 80012ce:	d1fb      	bne.n	80012c8 <unwind_phase2+0x28>
 80012d0:	4630      	mov	r0, r6
 80012d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012d4:	f7ff ffe2 	bl	800129c <_Unwind_DebugHook>
 80012d8:	1d28      	adds	r0, r5, #4
 80012da:	f000 fbf9 	bl	8001ad0 <__restore_core_regs>
 80012de:	bf00      	nop

080012e0 <unwind_phase2_forced>:
 80012e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e4:	4605      	mov	r5, r0
 80012e6:	2700      	movs	r7, #0
 80012e8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80012ec:	ac03      	add	r4, sp, #12
 80012ee:	1d0e      	adds	r6, r1, #4
 80012f0:	4692      	mov	sl, r2
 80012f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001302:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8001306:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800130a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800130e:	ac02      	add	r4, sp, #8
 8001310:	4628      	mov	r0, r5
 8001312:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001314:	6027      	str	r7, [r4, #0]
 8001316:	f7ff ff3b 	bl	8001190 <get_eit_entry>
 800131a:	f1ba 0f00 	cmp.w	sl, #0
 800131e:	4607      	mov	r7, r0
 8001320:	bf14      	ite	ne
 8001322:	260a      	movne	r6, #10
 8001324:	2609      	moveq	r6, #9
 8001326:	b17f      	cbz	r7, 8001348 <unwind_phase2_forced+0x68>
 8001328:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800132a:	f046 0110 	orr.w	r1, r6, #16
 800132e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8001332:	462a      	mov	r2, r5
 8001334:	6463      	str	r3, [r4, #68]	; 0x44
 8001336:	2001      	movs	r0, #1
 8001338:	462b      	mov	r3, r5
 800133a:	47c0      	blx	r8
 800133c:	bb78      	cbnz	r0, 800139e <unwind_phase2_forced+0xbe>
 800133e:	4638      	mov	r0, r7
 8001340:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800134a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800134e:	616b      	str	r3, [r5, #20]
 8001350:	4621      	mov	r1, r4
 8001352:	a87a      	add	r0, sp, #488	; 0x1e8
 8001354:	f005 fc7e 	bl	8006c54 <memcpy>
 8001358:	692b      	ldr	r3, [r5, #16]
 800135a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800135c:	4629      	mov	r1, r5
 800135e:	4630      	mov	r0, r6
 8001360:	4798      	blx	r3
 8001362:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8001364:	4682      	mov	sl, r0
 8001366:	e88d 0210 	stmia.w	sp, {r4, r9}
 800136a:	4631      	mov	r1, r6
 800136c:	6463      	str	r3, [r4, #68]	; 0x44
 800136e:	462a      	mov	r2, r5
 8001370:	462b      	mov	r3, r5
 8001372:	2001      	movs	r0, #1
 8001374:	47c0      	blx	r8
 8001376:	b990      	cbnz	r0, 800139e <unwind_phase2_forced+0xbe>
 8001378:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800137c:	a97a      	add	r1, sp, #488	; 0x1e8
 800137e:	4620      	mov	r0, r4
 8001380:	f005 fc68 	bl	8006c54 <memcpy>
 8001384:	f1ba 0f08 	cmp.w	sl, #8
 8001388:	d106      	bne.n	8001398 <unwind_phase2_forced+0xb8>
 800138a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800138c:	4628      	mov	r0, r5
 800138e:	f7ff feff 	bl	8001190 <get_eit_entry>
 8001392:	2609      	movs	r6, #9
 8001394:	4607      	mov	r7, r0
 8001396:	e7c6      	b.n	8001326 <unwind_phase2_forced+0x46>
 8001398:	f1ba 0f07 	cmp.w	sl, #7
 800139c:	d005      	beq.n	80013aa <unwind_phase2_forced+0xca>
 800139e:	2709      	movs	r7, #9
 80013a0:	4638      	mov	r0, r7
 80013a2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80013a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013aa:	4638      	mov	r0, r7
 80013ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013ae:	f7ff ff75 	bl	800129c <_Unwind_DebugHook>
 80013b2:	a803      	add	r0, sp, #12
 80013b4:	f000 fb8c 	bl	8001ad0 <__restore_core_regs>

080013b8 <_Unwind_GetCFA>:
 80013b8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80013ba:	4770      	bx	lr

080013bc <__gnu_Unwind_RaiseException>:
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	f04f 3eff 	mov.w	lr, #4294967295
 80013c2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80013c4:	b0f9      	sub	sp, #484	; 0x1e4
 80013c6:	640b      	str	r3, [r1, #64]	; 0x40
 80013c8:	1d0e      	adds	r6, r1, #4
 80013ca:	ad01      	add	r5, sp, #4
 80013cc:	460f      	mov	r7, r1
 80013ce:	4604      	mov	r4, r0
 80013d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013e4:	f8cd e000 	str.w	lr, [sp]
 80013e8:	e006      	b.n	80013f8 <__gnu_Unwind_RaiseException+0x3c>
 80013ea:	6923      	ldr	r3, [r4, #16]
 80013ec:	466a      	mov	r2, sp
 80013ee:	4621      	mov	r1, r4
 80013f0:	4798      	blx	r3
 80013f2:	2808      	cmp	r0, #8
 80013f4:	4605      	mov	r5, r0
 80013f6:	d108      	bne.n	800140a <__gnu_Unwind_RaiseException+0x4e>
 80013f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff fec8 	bl	8001190 <get_eit_entry>
 8001400:	2800      	cmp	r0, #0
 8001402:	d0f2      	beq.n	80013ea <__gnu_Unwind_RaiseException+0x2e>
 8001404:	2009      	movs	r0, #9
 8001406:	b079      	add	sp, #484	; 0x1e4
 8001408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140a:	4668      	mov	r0, sp
 800140c:	f7ff ff12 	bl	8001234 <restore_non_core_regs>
 8001410:	2d06      	cmp	r5, #6
 8001412:	d1f7      	bne.n	8001404 <__gnu_Unwind_RaiseException+0x48>
 8001414:	4639      	mov	r1, r7
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff ff42 	bl	80012a0 <unwind_phase2>

0800141c <__gnu_Unwind_ForcedUnwind>:
 800141c:	b430      	push	{r4, r5}
 800141e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001420:	60c1      	str	r1, [r0, #12]
 8001422:	6182      	str	r2, [r0, #24]
 8001424:	4619      	mov	r1, r3
 8001426:	641d      	str	r5, [r3, #64]	; 0x40
 8001428:	2200      	movs	r2, #0
 800142a:	bc30      	pop	{r4, r5}
 800142c:	e758      	b.n	80012e0 <unwind_phase2_forced>
 800142e:	bf00      	nop

08001430 <__gnu_Unwind_Resume>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	6943      	ldr	r3, [r0, #20]
 8001434:	68c6      	ldr	r6, [r0, #12]
 8001436:	640b      	str	r3, [r1, #64]	; 0x40
 8001438:	b126      	cbz	r6, 8001444 <__gnu_Unwind_Resume+0x14>
 800143a:	2201      	movs	r2, #1
 800143c:	f7ff ff50 	bl	80012e0 <unwind_phase2_forced>
 8001440:	f005 fb27 	bl	8006a92 <abort>
 8001444:	6903      	ldr	r3, [r0, #16]
 8001446:	460a      	mov	r2, r1
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	4601      	mov	r1, r0
 800144e:	2002      	movs	r0, #2
 8001450:	4798      	blx	r3
 8001452:	2807      	cmp	r0, #7
 8001454:	d007      	beq.n	8001466 <__gnu_Unwind_Resume+0x36>
 8001456:	2808      	cmp	r0, #8
 8001458:	d103      	bne.n	8001462 <__gnu_Unwind_Resume+0x32>
 800145a:	4629      	mov	r1, r5
 800145c:	4620      	mov	r0, r4
 800145e:	f7ff ff1f 	bl	80012a0 <unwind_phase2>
 8001462:	f005 fb16 	bl	8006a92 <abort>
 8001466:	4630      	mov	r0, r6
 8001468:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800146a:	f7ff ff17 	bl	800129c <_Unwind_DebugHook>
 800146e:	1d28      	adds	r0, r5, #4
 8001470:	f000 fb2e 	bl	8001ad0 <__restore_core_regs>

08001474 <__gnu_Unwind_Resume_or_Rethrow>:
 8001474:	68c2      	ldr	r2, [r0, #12]
 8001476:	b12a      	cbz	r2, 8001484 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8001478:	b410      	push	{r4}
 800147a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 800147c:	2200      	movs	r2, #0
 800147e:	640c      	str	r4, [r1, #64]	; 0x40
 8001480:	bc10      	pop	{r4}
 8001482:	e72d      	b.n	80012e0 <unwind_phase2_forced>
 8001484:	e79a      	b.n	80013bc <__gnu_Unwind_RaiseException>
 8001486:	bf00      	nop

08001488 <_Unwind_Complete>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <_Unwind_DeleteException>:
 800148c:	6883      	ldr	r3, [r0, #8]
 800148e:	b113      	cbz	r3, 8001496 <_Unwind_DeleteException+0xa>
 8001490:	4601      	mov	r1, r0
 8001492:	2001      	movs	r0, #1
 8001494:	4718      	bx	r3
 8001496:	4770      	bx	lr

08001498 <_Unwind_VRS_Get>:
 8001498:	b500      	push	{lr}
 800149a:	2904      	cmp	r1, #4
 800149c:	d807      	bhi.n	80014ae <_Unwind_VRS_Get+0x16>
 800149e:	e8df f001 	tbb	[pc, r1]
 80014a2:	0903      	.short	0x0903
 80014a4:	0906      	.short	0x0906
 80014a6:	09          	.byte	0x09
 80014a7:	00          	.byte	0x00
 80014a8:	b90b      	cbnz	r3, 80014ae <_Unwind_VRS_Get+0x16>
 80014aa:	2a0f      	cmp	r2, #15
 80014ac:	d905      	bls.n	80014ba <_Unwind_VRS_Get+0x22>
 80014ae:	2002      	movs	r0, #2
 80014b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b4:	2001      	movs	r0, #1
 80014b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80014be:	6852      	ldr	r2, [r2, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	9b01      	ldr	r3, [sp, #4]
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ca:	bf00      	nop

080014cc <_Unwind_GetGR>:
 80014cc:	2300      	movs	r3, #0
 80014ce:	b510      	push	{r4, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	ac03      	add	r4, sp, #12
 80014d4:	460a      	mov	r2, r1
 80014d6:	9400      	str	r4, [sp, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff ffdd 	bl	8001498 <_Unwind_VRS_Get>
 80014de:	9803      	ldr	r0, [sp, #12]
 80014e0:	b004      	add	sp, #16
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <_Unwind_VRS_Set>:
 80014e4:	b500      	push	{lr}
 80014e6:	2904      	cmp	r1, #4
 80014e8:	d807      	bhi.n	80014fa <_Unwind_VRS_Set+0x16>
 80014ea:	e8df f001 	tbb	[pc, r1]
 80014ee:	0903      	.short	0x0903
 80014f0:	0906      	.short	0x0906
 80014f2:	09          	.byte	0x09
 80014f3:	00          	.byte	0x00
 80014f4:	b90b      	cbnz	r3, 80014fa <_Unwind_VRS_Set+0x16>
 80014f6:	2a0f      	cmp	r2, #15
 80014f8:	d905      	bls.n	8001506 <_Unwind_VRS_Set+0x22>
 80014fa:	2002      	movs	r0, #2
 80014fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001500:	2001      	movs	r0, #1
 8001502:	f85d fb04 	ldr.w	pc, [sp], #4
 8001506:	9901      	ldr	r1, [sp, #4]
 8001508:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800150c:	6809      	ldr	r1, [r1, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	6051      	str	r1, [r2, #4]
 8001512:	f85d fb04 	ldr.w	pc, [sp], #4
 8001516:	bf00      	nop

08001518 <_Unwind_SetGR>:
 8001518:	2300      	movs	r3, #0
 800151a:	b510      	push	{r4, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	ac04      	add	r4, sp, #16
 8001520:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001524:	9400      	str	r4, [sp, #0]
 8001526:	460a      	mov	r2, r1
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff ffdb 	bl	80014e4 <_Unwind_VRS_Set>
 800152e:	b004      	add	sp, #16
 8001530:	bd10      	pop	{r4, pc}
 8001532:	bf00      	nop

08001534 <__gnu_Unwind_Backtrace>:
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	f04f 3eff 	mov.w	lr, #4294967295
 800153a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800153c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	1d15      	adds	r5, r2, #4
 8001544:	ac17      	add	r4, sp, #92	; 0x5c
 8001546:	4607      	mov	r7, r0
 8001548:	460e      	mov	r6, r1
 800154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001556:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800155a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800155e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8001562:	e012      	b.n	800158a <__gnu_Unwind_Backtrace+0x56>
 8001564:	210c      	movs	r1, #12
 8001566:	a816      	add	r0, sp, #88	; 0x58
 8001568:	466a      	mov	r2, sp
 800156a:	f7ff ffd5 	bl	8001518 <_Unwind_SetGR>
 800156e:	4631      	mov	r1, r6
 8001570:	a816      	add	r0, sp, #88	; 0x58
 8001572:	47b8      	blx	r7
 8001574:	b978      	cbnz	r0, 8001596 <__gnu_Unwind_Backtrace+0x62>
 8001576:	9b04      	ldr	r3, [sp, #16]
 8001578:	aa16      	add	r2, sp, #88	; 0x58
 800157a:	4669      	mov	r1, sp
 800157c:	2008      	movs	r0, #8
 800157e:	4798      	blx	r3
 8001580:	2805      	cmp	r0, #5
 8001582:	4604      	mov	r4, r0
 8001584:	d008      	beq.n	8001598 <__gnu_Unwind_Backtrace+0x64>
 8001586:	2809      	cmp	r0, #9
 8001588:	d005      	beq.n	8001596 <__gnu_Unwind_Backtrace+0x62>
 800158a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800158c:	4668      	mov	r0, sp
 800158e:	f7ff fdff 	bl	8001190 <get_eit_entry>
 8001592:	2800      	cmp	r0, #0
 8001594:	d0e6      	beq.n	8001564 <__gnu_Unwind_Backtrace+0x30>
 8001596:	2409      	movs	r4, #9
 8001598:	a816      	add	r0, sp, #88	; 0x58
 800159a:	f7ff fe4b 	bl	8001234 <restore_non_core_regs>
 800159e:	4620      	mov	r0, r4
 80015a0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a6:	bf00      	nop

080015a8 <__gnu_unwind_pr_common>:
 80015a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ac:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80015ae:	4691      	mov	r9, r2
 80015b0:	6822      	ldr	r2, [r4, #0]
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	3404      	adds	r4, #4
 80015b6:	460d      	mov	r5, r1
 80015b8:	9207      	str	r2, [sp, #28]
 80015ba:	9408      	str	r4, [sp, #32]
 80015bc:	f000 0b03 	and.w	fp, r0, #3
 80015c0:	461e      	mov	r6, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d160      	bne.n	8001688 <__gnu_unwind_pr_common+0xe0>
 80015c6:	2303      	movs	r3, #3
 80015c8:	0212      	lsls	r2, r2, #8
 80015ca:	9207      	str	r2, [sp, #28]
 80015cc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80015d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80015d4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80015d6:	f1bb 0f02 	cmp.w	fp, #2
 80015da:	bf08      	it	eq
 80015dc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80015de:	f013 0301 	ands.w	r3, r3, #1
 80015e2:	d140      	bne.n	8001666 <__gnu_unwind_pr_common+0xbe>
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	f000 0308 	and.w	r3, r0, #8
 80015ea:	9303      	str	r3, [sp, #12]
 80015ec:	f8d4 8000 	ldr.w	r8, [r4]
 80015f0:	f1b8 0f00 	cmp.w	r8, #0
 80015f4:	d039      	beq.n	800166a <__gnu_unwind_pr_common+0xc2>
 80015f6:	2e02      	cmp	r6, #2
 80015f8:	d043      	beq.n	8001682 <__gnu_unwind_pr_common+0xda>
 80015fa:	f8b4 8000 	ldrh.w	r8, [r4]
 80015fe:	8867      	ldrh	r7, [r4, #2]
 8001600:	3404      	adds	r4, #4
 8001602:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001604:	f027 0a01 	bic.w	sl, r7, #1
 8001608:	210f      	movs	r1, #15
 800160a:	4648      	mov	r0, r9
 800160c:	449a      	add	sl, r3
 800160e:	f7ff ff5d 	bl	80014cc <_Unwind_GetGR>
 8001612:	4582      	cmp	sl, r0
 8001614:	d833      	bhi.n	800167e <__gnu_unwind_pr_common+0xd6>
 8001616:	f028 0301 	bic.w	r3, r8, #1
 800161a:	449a      	add	sl, r3
 800161c:	4550      	cmp	r0, sl
 800161e:	bf2c      	ite	cs
 8001620:	2000      	movcs	r0, #0
 8001622:	2001      	movcc	r0, #1
 8001624:	007f      	lsls	r7, r7, #1
 8001626:	f007 0702 	and.w	r7, r7, #2
 800162a:	f008 0801 	and.w	r8, r8, #1
 800162e:	ea47 0708 	orr.w	r7, r7, r8
 8001632:	2f01      	cmp	r7, #1
 8001634:	d03e      	beq.n	80016b4 <__gnu_unwind_pr_common+0x10c>
 8001636:	d335      	bcc.n	80016a4 <__gnu_unwind_pr_common+0xfc>
 8001638:	2f02      	cmp	r7, #2
 800163a:	d11c      	bne.n	8001676 <__gnu_unwind_pr_common+0xce>
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001642:	9202      	str	r2, [sp, #8]
 8001644:	f1bb 0f00 	cmp.w	fp, #0
 8001648:	d176      	bne.n	8001738 <__gnu_unwind_pr_common+0x190>
 800164a:	b128      	cbz	r0, 8001658 <__gnu_unwind_pr_common+0xb0>
 800164c:	9903      	ldr	r1, [sp, #12]
 800164e:	2900      	cmp	r1, #0
 8001650:	d07e      	beq.n	8001750 <__gnu_unwind_pr_common+0x1a8>
 8001652:	2a00      	cmp	r2, #0
 8001654:	f000 80a6 	beq.w	80017a4 <__gnu_unwind_pr_common+0x1fc>
 8001658:	2b00      	cmp	r3, #0
 800165a:	db77      	blt.n	800174c <__gnu_unwind_pr_common+0x1a4>
 800165c:	9b02      	ldr	r3, [sp, #8]
 800165e:	3301      	adds	r3, #1
 8001660:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001664:	e7c2      	b.n	80015ec <__gnu_unwind_pr_common+0x44>
 8001666:	2300      	movs	r3, #0
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	2e02      	cmp	r6, #2
 800166c:	dd3e      	ble.n	80016ec <__gnu_unwind_pr_common+0x144>
 800166e:	f7ff fe13 	bl	8001298 <__gnu_unwind_24bit.isra.1>
 8001672:	2800      	cmp	r0, #0
 8001674:	d040      	beq.n	80016f8 <__gnu_unwind_pr_common+0x150>
 8001676:	2009      	movs	r0, #9
 8001678:	b00b      	add	sp, #44	; 0x2c
 800167a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800167e:	2000      	movs	r0, #0
 8001680:	e7d0      	b.n	8001624 <__gnu_unwind_pr_common+0x7c>
 8001682:	6867      	ldr	r7, [r4, #4]
 8001684:	3408      	adds	r4, #8
 8001686:	e7bc      	b.n	8001602 <__gnu_unwind_pr_common+0x5a>
 8001688:	2b02      	cmp	r3, #2
 800168a:	dca3      	bgt.n	80015d4 <__gnu_unwind_pr_common+0x2c>
 800168c:	2102      	movs	r1, #2
 800168e:	0c13      	lsrs	r3, r2, #16
 8001690:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001694:	0412      	lsls	r2, r2, #16
 8001696:	b2db      	uxtb	r3, r3
 8001698:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800169c:	9207      	str	r2, [sp, #28]
 800169e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80016a2:	e797      	b.n	80015d4 <__gnu_unwind_pr_common+0x2c>
 80016a4:	f1bb 0f00 	cmp.w	fp, #0
 80016a8:	d002      	beq.n	80016b0 <__gnu_unwind_pr_common+0x108>
 80016aa:	2800      	cmp	r0, #0
 80016ac:	f040 80bd 	bne.w	800182a <__gnu_unwind_pr_common+0x282>
 80016b0:	3404      	adds	r4, #4
 80016b2:	e79b      	b.n	80015ec <__gnu_unwind_pr_common+0x44>
 80016b4:	f1bb 0f00 	cmp.w	fp, #0
 80016b8:	d125      	bne.n	8001706 <__gnu_unwind_pr_common+0x15e>
 80016ba:	b1a8      	cbz	r0, 80016e8 <__gnu_unwind_pr_common+0x140>
 80016bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016c0:	1c99      	adds	r1, r3, #2
 80016c2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80016c6:	d0d6      	beq.n	8001676 <__gnu_unwind_pr_common+0xce>
 80016c8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80016cc:	3301      	adds	r3, #1
 80016ce:	9106      	str	r1, [sp, #24]
 80016d0:	f000 80a3 	beq.w	800181a <__gnu_unwind_pr_common+0x272>
 80016d4:	1d20      	adds	r0, r4, #4
 80016d6:	f7ff fdd9 	bl	800128c <_Unwind_decode_typeinfo_ptr.isra.0>
 80016da:	ab06      	add	r3, sp, #24
 80016dc:	4601      	mov	r1, r0
 80016de:	4628      	mov	r0, r5
 80016e0:	f003 fce2 	bl	80050a8 <__cxa_type_match>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d177      	bne.n	80017d8 <__gnu_unwind_pr_common+0x230>
 80016e8:	3408      	adds	r4, #8
 80016ea:	e77f      	b.n	80015ec <__gnu_unwind_pr_common+0x44>
 80016ec:	a907      	add	r1, sp, #28
 80016ee:	4648      	mov	r0, r9
 80016f0:	f000 faf0 	bl	8001cd4 <__gnu_unwind_execute>
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d1be      	bne.n	8001676 <__gnu_unwind_pr_common+0xce>
 80016f8:	9b01      	ldr	r3, [sp, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d15c      	bne.n	80017b8 <__gnu_unwind_pr_common+0x210>
 80016fe:	2008      	movs	r0, #8
 8001700:	b00b      	add	sp, #44	; 0x2c
 8001702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001706:	210d      	movs	r1, #13
 8001708:	4648      	mov	r0, r9
 800170a:	6a2f      	ldr	r7, [r5, #32]
 800170c:	f7ff fede 	bl	80014cc <_Unwind_GetGR>
 8001710:	4287      	cmp	r7, r0
 8001712:	d1e9      	bne.n	80016e8 <__gnu_unwind_pr_common+0x140>
 8001714:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001716:	429c      	cmp	r4, r3
 8001718:	d1e6      	bne.n	80016e8 <__gnu_unwind_pr_common+0x140>
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fcea 	bl	80010f4 <selfrel_offset31>
 8001720:	210f      	movs	r1, #15
 8001722:	4602      	mov	r2, r0
 8001724:	4648      	mov	r0, r9
 8001726:	f7ff fef7 	bl	8001518 <_Unwind_SetGR>
 800172a:	4648      	mov	r0, r9
 800172c:	462a      	mov	r2, r5
 800172e:	2100      	movs	r1, #0
 8001730:	f7ff fef2 	bl	8001518 <_Unwind_SetGR>
 8001734:	2007      	movs	r0, #7
 8001736:	e79f      	b.n	8001678 <__gnu_unwind_pr_common+0xd0>
 8001738:	210d      	movs	r1, #13
 800173a:	4648      	mov	r0, r9
 800173c:	6a2f      	ldr	r7, [r5, #32]
 800173e:	f7ff fec5 	bl	80014cc <_Unwind_GetGR>
 8001742:	4287      	cmp	r7, r0
 8001744:	d058      	beq.n	80017f8 <__gnu_unwind_pr_common+0x250>
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	da87      	bge.n	800165c <__gnu_unwind_pr_common+0xb4>
 800174c:	3404      	adds	r4, #4
 800174e:	e785      	b.n	800165c <__gnu_unwind_pr_common+0xb4>
 8001750:	9b02      	ldr	r3, [sp, #8]
 8001752:	b33b      	cbz	r3, 80017a4 <__gnu_unwind_pr_common+0x1fc>
 8001754:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001758:	1d27      	adds	r7, r4, #4
 800175a:	f8cd b010 	str.w	fp, [sp, #16]
 800175e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001762:	46a3      	mov	fp, r4
 8001764:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001768:	461c      	mov	r4, r3
 800176a:	9605      	str	r6, [sp, #20]
 800176c:	e002      	b.n	8001774 <__gnu_unwind_pr_common+0x1cc>
 800176e:	45b2      	cmp	sl, r6
 8001770:	46b0      	mov	r8, r6
 8001772:	d016      	beq.n	80017a2 <__gnu_unwind_pr_common+0x1fa>
 8001774:	4638      	mov	r0, r7
 8001776:	9406      	str	r4, [sp, #24]
 8001778:	f7ff fd88 	bl	800128c <_Unwind_decode_typeinfo_ptr.isra.0>
 800177c:	ab06      	add	r3, sp, #24
 800177e:	4601      	mov	r1, r0
 8001780:	2200      	movs	r2, #0
 8001782:	4628      	mov	r0, r5
 8001784:	f003 fc90 	bl	80050a8 <__cxa_type_match>
 8001788:	f108 0601 	add.w	r6, r8, #1
 800178c:	3704      	adds	r7, #4
 800178e:	2800      	cmp	r0, #0
 8001790:	d0ed      	beq.n	800176e <__gnu_unwind_pr_common+0x1c6>
 8001792:	9b02      	ldr	r3, [sp, #8]
 8001794:	465c      	mov	r4, fp
 8001796:	4543      	cmp	r3, r8
 8001798:	f8dd b010 	ldr.w	fp, [sp, #16]
 800179c:	9e05      	ldr	r6, [sp, #20]
 800179e:	d1d2      	bne.n	8001746 <__gnu_unwind_pr_common+0x19e>
 80017a0:	e000      	b.n	80017a4 <__gnu_unwind_pr_common+0x1fc>
 80017a2:	465c      	mov	r4, fp
 80017a4:	4648      	mov	r0, r9
 80017a6:	210d      	movs	r1, #13
 80017a8:	f7ff fe90 	bl	80014cc <_Unwind_GetGR>
 80017ac:	9b06      	ldr	r3, [sp, #24]
 80017ae:	6228      	str	r0, [r5, #32]
 80017b0:	62ac      	str	r4, [r5, #40]	; 0x28
 80017b2:	626b      	str	r3, [r5, #36]	; 0x24
 80017b4:	2006      	movs	r0, #6
 80017b6:	e75f      	b.n	8001678 <__gnu_unwind_pr_common+0xd0>
 80017b8:	210f      	movs	r1, #15
 80017ba:	4648      	mov	r0, r9
 80017bc:	f7ff fe86 	bl	80014cc <_Unwind_GetGR>
 80017c0:	210e      	movs	r1, #14
 80017c2:	4602      	mov	r2, r0
 80017c4:	4648      	mov	r0, r9
 80017c6:	f7ff fea7 	bl	8001518 <_Unwind_SetGR>
 80017ca:	4648      	mov	r0, r9
 80017cc:	4a29      	ldr	r2, [pc, #164]	; (8001874 <__gnu_unwind_pr_common+0x2cc>)
 80017ce:	210f      	movs	r1, #15
 80017d0:	f7ff fea2 	bl	8001518 <_Unwind_SetGR>
 80017d4:	2007      	movs	r0, #7
 80017d6:	e74f      	b.n	8001678 <__gnu_unwind_pr_common+0xd0>
 80017d8:	4607      	mov	r7, r0
 80017da:	210d      	movs	r1, #13
 80017dc:	4648      	mov	r0, r9
 80017de:	f7ff fe75 	bl	80014cc <_Unwind_GetGR>
 80017e2:	2f02      	cmp	r7, #2
 80017e4:	6228      	str	r0, [r5, #32]
 80017e6:	d11d      	bne.n	8001824 <__gnu_unwind_pr_common+0x27c>
 80017e8:	462b      	mov	r3, r5
 80017ea:	9a06      	ldr	r2, [sp, #24]
 80017ec:	f843 2f2c 	str.w	r2, [r3, #44]!
 80017f0:	626b      	str	r3, [r5, #36]	; 0x24
 80017f2:	62ac      	str	r4, [r5, #40]	; 0x28
 80017f4:	2006      	movs	r0, #6
 80017f6:	e73f      	b.n	8001678 <__gnu_unwind_pr_common+0xd0>
 80017f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80017fa:	429c      	cmp	r4, r3
 80017fc:	d1a3      	bne.n	8001746 <__gnu_unwind_pr_common+0x19e>
 80017fe:	2204      	movs	r2, #4
 8001800:	2700      	movs	r7, #0
 8001802:	9902      	ldr	r1, [sp, #8]
 8001804:	18a3      	adds	r3, r4, r2
 8001806:	62a9      	str	r1, [r5, #40]	; 0x28
 8001808:	62ef      	str	r7, [r5, #44]	; 0x2c
 800180a:	632a      	str	r2, [r5, #48]	; 0x30
 800180c:	636b      	str	r3, [r5, #52]	; 0x34
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	42bb      	cmp	r3, r7
 8001812:	db1d      	blt.n	8001850 <__gnu_unwind_pr_common+0x2a8>
 8001814:	2301      	movs	r3, #1
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	e720      	b.n	800165c <__gnu_unwind_pr_common+0xb4>
 800181a:	4648      	mov	r0, r9
 800181c:	210d      	movs	r1, #13
 800181e:	f7ff fe55 	bl	80014cc <_Unwind_GetGR>
 8001822:	6228      	str	r0, [r5, #32]
 8001824:	9b06      	ldr	r3, [sp, #24]
 8001826:	626b      	str	r3, [r5, #36]	; 0x24
 8001828:	e7e3      	b.n	80017f2 <__gnu_unwind_pr_common+0x24a>
 800182a:	4620      	mov	r0, r4
 800182c:	f7ff fc62 	bl	80010f4 <selfrel_offset31>
 8001830:	3404      	adds	r4, #4
 8001832:	4606      	mov	r6, r0
 8001834:	63ac      	str	r4, [r5, #56]	; 0x38
 8001836:	4628      	mov	r0, r5
 8001838:	f003 fc94 	bl	8005164 <__cxa_begin_cleanup>
 800183c:	2800      	cmp	r0, #0
 800183e:	f43f af1a 	beq.w	8001676 <__gnu_unwind_pr_common+0xce>
 8001842:	4648      	mov	r0, r9
 8001844:	4632      	mov	r2, r6
 8001846:	210f      	movs	r1, #15
 8001848:	f7ff fe66 	bl	8001518 <_Unwind_SetGR>
 800184c:	2007      	movs	r0, #7
 800184e:	e713      	b.n	8001678 <__gnu_unwind_pr_common+0xd0>
 8001850:	4608      	mov	r0, r1
 8001852:	3001      	adds	r0, #1
 8001854:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001858:	f7ff fc4c 	bl	80010f4 <selfrel_offset31>
 800185c:	210f      	movs	r1, #15
 800185e:	4602      	mov	r2, r0
 8001860:	4648      	mov	r0, r9
 8001862:	f7ff fe59 	bl	8001518 <_Unwind_SetGR>
 8001866:	4648      	mov	r0, r9
 8001868:	462a      	mov	r2, r5
 800186a:	4639      	mov	r1, r7
 800186c:	f7ff fe54 	bl	8001518 <_Unwind_SetGR>
 8001870:	2007      	movs	r0, #7
 8001872:	e701      	b.n	8001678 <__gnu_unwind_pr_common+0xd0>
 8001874:	08005967 	.word	0x08005967

08001878 <__aeabi_unwind_cpp_pr0>:
 8001878:	2300      	movs	r3, #0
 800187a:	e695      	b.n	80015a8 <__gnu_unwind_pr_common>

0800187c <__aeabi_unwind_cpp_pr1>:
 800187c:	2301      	movs	r3, #1
 800187e:	e693      	b.n	80015a8 <__gnu_unwind_pr_common>

08001880 <__aeabi_unwind_cpp_pr2>:
 8001880:	2302      	movs	r3, #2
 8001882:	e691      	b.n	80015a8 <__gnu_unwind_pr_common>

08001884 <_Unwind_VRS_Pop>:
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	4604      	mov	r4, r0
 8001888:	b0c5      	sub	sp, #276	; 0x114
 800188a:	2904      	cmp	r1, #4
 800188c:	d80d      	bhi.n	80018aa <_Unwind_VRS_Pop+0x26>
 800188e:	e8df f001 	tbb	[pc, r1]
 8001892:	0355      	.short	0x0355
 8001894:	310c      	.short	0x310c
 8001896:	0f          	.byte	0x0f
 8001897:	00          	.byte	0x00
 8001898:	2b01      	cmp	r3, #1
 800189a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800189e:	b295      	uxth	r5, r2
 80018a0:	d164      	bne.n	800196c <_Unwind_VRS_Pop+0xe8>
 80018a2:	1972      	adds	r2, r6, r5
 80018a4:	2a10      	cmp	r2, #16
 80018a6:	f240 809d 	bls.w	80019e4 <_Unwind_VRS_Pop+0x160>
 80018aa:	2002      	movs	r0, #2
 80018ac:	b045      	add	sp, #276	; 0x114
 80018ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1fa      	bne.n	80018aa <_Unwind_VRS_Pop+0x26>
 80018b4:	2a10      	cmp	r2, #16
 80018b6:	d8f8      	bhi.n	80018aa <_Unwind_VRS_Pop+0x26>
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	06d8      	lsls	r0, r3, #27
 80018bc:	f100 80c8 	bmi.w	8001a50 <_Unwind_VRS_Pop+0x1cc>
 80018c0:	ae22      	add	r6, sp, #136	; 0x88
 80018c2:	4630      	mov	r0, r6
 80018c4:	9201      	str	r2, [sp, #4]
 80018c6:	2501      	movs	r5, #1
 80018c8:	f000 f974 	bl	8001bb4 <__gnu_Unwind_Save_WMMXC>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018d0:	9a01      	ldr	r2, [sp, #4]
 80018d2:	fa05 f103 	lsl.w	r1, r5, r3
 80018d6:	4211      	tst	r1, r2
 80018d8:	d003      	beq.n	80018e2 <_Unwind_VRS_Pop+0x5e>
 80018da:	6801      	ldr	r1, [r0, #0]
 80018dc:	3004      	adds	r0, #4
 80018de:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80018e2:	3301      	adds	r3, #1
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d1f4      	bne.n	80018d2 <_Unwind_VRS_Pop+0x4e>
 80018e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80018ea:	4630      	mov	r0, r6
 80018ec:	f000 f958 	bl	8001ba0 <__gnu_Unwind_Restore_WMMXC>
 80018f0:	2000      	movs	r0, #0
 80018f2:	e7db      	b.n	80018ac <_Unwind_VRS_Pop+0x28>
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d1d8      	bne.n	80018aa <_Unwind_VRS_Pop+0x26>
 80018f8:	0c15      	lsrs	r5, r2, #16
 80018fa:	b297      	uxth	r7, r2
 80018fc:	19eb      	adds	r3, r5, r7
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d8d3      	bhi.n	80018aa <_Unwind_VRS_Pop+0x26>
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	071e      	lsls	r6, r3, #28
 8001906:	f100 80b7 	bmi.w	8001a78 <_Unwind_VRS_Pop+0x1f4>
 800190a:	ae22      	add	r6, sp, #136	; 0x88
 800190c:	4630      	mov	r0, r6
 800190e:	f000 f925 	bl	8001b5c <__gnu_Unwind_Save_WMMXD>
 8001912:	00ed      	lsls	r5, r5, #3
 8001914:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001916:	b15f      	cbz	r7, 8001930 <_Unwind_VRS_Pop+0xac>
 8001918:	3d04      	subs	r5, #4
 800191a:	4603      	mov	r3, r0
 800191c:	1971      	adds	r1, r6, r5
 800191e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8001922:	f853 2b04 	ldr.w	r2, [r3], #4
 8001926:	4283      	cmp	r3, r0
 8001928:	f841 2f04 	str.w	r2, [r1, #4]!
 800192c:	d1f9      	bne.n	8001922 <_Unwind_VRS_Pop+0x9e>
 800192e:	4618      	mov	r0, r3
 8001930:	63a0      	str	r0, [r4, #56]	; 0x38
 8001932:	4630      	mov	r0, r6
 8001934:	f000 f8f0 	bl	8001b18 <__gnu_Unwind_Restore_WMMXD>
 8001938:	2000      	movs	r0, #0
 800193a:	e7b7      	b.n	80018ac <_Unwind_VRS_Pop+0x28>
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1b4      	bne.n	80018aa <_Unwind_VRS_Pop+0x26>
 8001940:	2701      	movs	r7, #1
 8001942:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001944:	b296      	uxth	r6, r2
 8001946:	1d20      	adds	r0, r4, #4
 8001948:	fa07 f103 	lsl.w	r1, r7, r3
 800194c:	4231      	tst	r1, r6
 800194e:	f103 0301 	add.w	r3, r3, #1
 8001952:	d002      	beq.n	800195a <_Unwind_VRS_Pop+0xd6>
 8001954:	6829      	ldr	r1, [r5, #0]
 8001956:	3504      	adds	r5, #4
 8001958:	6001      	str	r1, [r0, #0]
 800195a:	2b10      	cmp	r3, #16
 800195c:	f100 0004 	add.w	r0, r0, #4
 8001960:	d1f2      	bne.n	8001948 <_Unwind_VRS_Pop+0xc4>
 8001962:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8001966:	d13b      	bne.n	80019e0 <_Unwind_VRS_Pop+0x15c>
 8001968:	63a5      	str	r5, [r4, #56]	; 0x38
 800196a:	e79f      	b.n	80018ac <_Unwind_VRS_Pop+0x28>
 800196c:	2b05      	cmp	r3, #5
 800196e:	d19c      	bne.n	80018aa <_Unwind_VRS_Pop+0x26>
 8001970:	1977      	adds	r7, r6, r5
 8001972:	2f20      	cmp	r7, #32
 8001974:	d899      	bhi.n	80018aa <_Unwind_VRS_Pop+0x26>
 8001976:	2e0f      	cmp	r6, #15
 8001978:	d966      	bls.n	8001a48 <_Unwind_VRS_Pop+0x1c4>
 800197a:	462f      	mov	r7, r5
 800197c:	2d00      	cmp	r5, #0
 800197e:	d13a      	bne.n	80019f6 <_Unwind_VRS_Pop+0x172>
 8001980:	462a      	mov	r2, r5
 8001982:	2700      	movs	r7, #0
 8001984:	2a00      	cmp	r2, #0
 8001986:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001988:	dd72      	ble.n	8001a70 <_Unwind_VRS_Pop+0x1ec>
 800198a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800198e:	4601      	mov	r1, r0
 8001990:	a844      	add	r0, sp, #272	; 0x110
 8001992:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001996:	388c      	subs	r0, #140	; 0x8c
 8001998:	f851 5b04 	ldr.w	r5, [r1], #4
 800199c:	4291      	cmp	r1, r2
 800199e:	f840 5f04 	str.w	r5, [r0, #4]!
 80019a2:	d1f9      	bne.n	8001998 <_Unwind_VRS_Pop+0x114>
 80019a4:	4608      	mov	r0, r1
 80019a6:	b197      	cbz	r7, 80019ce <_Unwind_VRS_Pop+0x14a>
 80019a8:	2e10      	cmp	r6, #16
 80019aa:	4632      	mov	r2, r6
 80019ac:	bf38      	it	cc
 80019ae:	2210      	movcc	r2, #16
 80019b0:	a944      	add	r1, sp, #272	; 0x110
 80019b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80019b6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80019ba:	0079      	lsls	r1, r7, #1
 80019bc:	3a04      	subs	r2, #4
 80019be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80019c2:	f850 5b04 	ldr.w	r5, [r0], #4
 80019c6:	4288      	cmp	r0, r1
 80019c8:	f842 5f04 	str.w	r5, [r2, #4]!
 80019cc:	d1f9      	bne.n	80019c2 <_Unwind_VRS_Pop+0x13e>
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d048      	beq.n	8001a64 <_Unwind_VRS_Pop+0x1e0>
 80019d2:	2e0f      	cmp	r6, #15
 80019d4:	63a1      	str	r1, [r4, #56]	; 0x38
 80019d6:	d933      	bls.n	8001a40 <_Unwind_VRS_Pop+0x1bc>
 80019d8:	b117      	cbz	r7, 80019e0 <_Unwind_VRS_Pop+0x15c>
 80019da:	a802      	add	r0, sp, #8
 80019dc:	f000 f894 	bl	8001b08 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80019e0:	2000      	movs	r0, #0
 80019e2:	e763      	b.n	80018ac <_Unwind_VRS_Pop+0x28>
 80019e4:	2e0f      	cmp	r6, #15
 80019e6:	f63f af60 	bhi.w	80018aa <_Unwind_VRS_Pop+0x26>
 80019ea:	2700      	movs	r7, #0
 80019ec:	6822      	ldr	r2, [r4, #0]
 80019ee:	07d1      	lsls	r1, r2, #31
 80019f0:	d417      	bmi.n	8001a22 <_Unwind_VRS_Pop+0x19e>
 80019f2:	2f00      	cmp	r7, #0
 80019f4:	d060      	beq.n	8001ab8 <_Unwind_VRS_Pop+0x234>
 80019f6:	6822      	ldr	r2, [r4, #0]
 80019f8:	0751      	lsls	r1, r2, #29
 80019fa:	d445      	bmi.n	8001a88 <_Unwind_VRS_Pop+0x204>
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d04d      	beq.n	8001a9c <_Unwind_VRS_Pop+0x218>
 8001a00:	2e0f      	cmp	r6, #15
 8001a02:	d806      	bhi.n	8001a12 <_Unwind_VRS_Pop+0x18e>
 8001a04:	a822      	add	r0, sp, #136	; 0x88
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	f000 f87a 	bl	8001b00 <__gnu_Unwind_Save_VFP_D>
 8001a0c:	9b01      	ldr	r3, [sp, #4]
 8001a0e:	2f00      	cmp	r7, #0
 8001a10:	d0b6      	beq.n	8001980 <_Unwind_VRS_Pop+0xfc>
 8001a12:	a802      	add	r0, sp, #8
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	f000 f87b 	bl	8001b10 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	f1c6 0210 	rsb	r2, r6, #16
 8001a20:	e7b0      	b.n	8001984 <_Unwind_VRS_Pop+0x100>
 8001a22:	f022 0101 	bic.w	r1, r2, #1
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	6021      	str	r1, [r4, #0]
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	d03b      	beq.n	8001aa8 <_Unwind_VRS_Pop+0x224>
 8001a30:	f022 0203 	bic.w	r2, r2, #3
 8001a34:	f840 2b48 	str.w	r2, [r0], #72
 8001a38:	f000 f85a 	bl	8001af0 <__gnu_Unwind_Save_VFP>
 8001a3c:	9b01      	ldr	r3, [sp, #4]
 8001a3e:	e7d8      	b.n	80019f2 <_Unwind_VRS_Pop+0x16e>
 8001a40:	a822      	add	r0, sp, #136	; 0x88
 8001a42:	f000 f859 	bl	8001af8 <__gnu_Unwind_Restore_VFP_D>
 8001a46:	e7c7      	b.n	80019d8 <_Unwind_VRS_Pop+0x154>
 8001a48:	2f10      	cmp	r7, #16
 8001a4a:	d9ce      	bls.n	80019ea <_Unwind_VRS_Pop+0x166>
 8001a4c:	3f10      	subs	r7, #16
 8001a4e:	e7cd      	b.n	80019ec <_Unwind_VRS_Pop+0x168>
 8001a50:	f023 0310 	bic.w	r3, r3, #16
 8001a54:	6023      	str	r3, [r4, #0]
 8001a56:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	f000 f8aa 	bl	8001bb4 <__gnu_Unwind_Save_WMMXC>
 8001a60:	9a01      	ldr	r2, [sp, #4]
 8001a62:	e72d      	b.n	80018c0 <_Unwind_VRS_Pop+0x3c>
 8001a64:	3104      	adds	r1, #4
 8001a66:	63a1      	str	r1, [r4, #56]	; 0x38
 8001a68:	a822      	add	r0, sp, #136	; 0x88
 8001a6a:	f000 f83d 	bl	8001ae8 <__gnu_Unwind_Restore_VFP>
 8001a6e:	e7b7      	b.n	80019e0 <_Unwind_VRS_Pop+0x15c>
 8001a70:	2f00      	cmp	r7, #0
 8001a72:	d199      	bne.n	80019a8 <_Unwind_VRS_Pop+0x124>
 8001a74:	4601      	mov	r1, r0
 8001a76:	e7aa      	b.n	80019ce <_Unwind_VRS_Pop+0x14a>
 8001a78:	f023 0308 	bic.w	r3, r3, #8
 8001a7c:	6023      	str	r3, [r4, #0]
 8001a7e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001a82:	f000 f86b 	bl	8001b5c <__gnu_Unwind_Save_WMMXD>
 8001a86:	e740      	b.n	800190a <_Unwind_VRS_Pop+0x86>
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	f840 2bd0 	str.w	r2, [r0], #208
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	f000 f83c 	bl	8001b10 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001a98:	9b01      	ldr	r3, [sp, #4]
 8001a9a:	e7af      	b.n	80019fc <_Unwind_VRS_Pop+0x178>
 8001a9c:	a822      	add	r0, sp, #136	; 0x88
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	f000 f826 	bl	8001af0 <__gnu_Unwind_Save_VFP>
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	e7b9      	b.n	8001a1c <_Unwind_VRS_Pop+0x198>
 8001aa8:	f041 0102 	orr.w	r1, r1, #2
 8001aac:	f840 1b48 	str.w	r1, [r0], #72
 8001ab0:	f000 f826 	bl	8001b00 <__gnu_Unwind_Save_VFP_D>
 8001ab4:	9b01      	ldr	r3, [sp, #4]
 8001ab6:	e79c      	b.n	80019f2 <_Unwind_VRS_Pop+0x16e>
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d003      	beq.n	8001ac4 <_Unwind_VRS_Pop+0x240>
 8001abc:	2e0f      	cmp	r6, #15
 8001abe:	f63f af5f 	bhi.w	8001980 <_Unwind_VRS_Pop+0xfc>
 8001ac2:	e79f      	b.n	8001a04 <_Unwind_VRS_Pop+0x180>
 8001ac4:	a822      	add	r0, sp, #136	; 0x88
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	f000 f812 	bl	8001af0 <__gnu_Unwind_Save_VFP>
 8001acc:	9b01      	ldr	r3, [sp, #4]
 8001ace:	e757      	b.n	8001980 <_Unwind_VRS_Pop+0xfc>

08001ad0 <__restore_core_regs>:
 8001ad0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001ad4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001ad8:	469c      	mov	ip, r3
 8001ada:	46a6      	mov	lr, r4
 8001adc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001ae0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001ae4:	46e5      	mov	sp, ip
 8001ae6:	bd00      	pop	{pc}

08001ae8 <__gnu_Unwind_Restore_VFP>:
 8001ae8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop

08001af0 <__gnu_Unwind_Save_VFP>:
 8001af0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop

08001af8 <__gnu_Unwind_Restore_VFP_D>:
 8001af8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop

08001b00 <__gnu_Unwind_Save_VFP_D>:
 8001b00:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001b08:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001b10:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop

08001b18 <__gnu_Unwind_Restore_WMMXD>:
 8001b18:	ecf0 0102 	ldfe	f0, [r0], #8
 8001b1c:	ecf0 1102 	ldfe	f1, [r0], #8
 8001b20:	ecf0 2102 	ldfe	f2, [r0], #8
 8001b24:	ecf0 3102 	ldfe	f3, [r0], #8
 8001b28:	ecf0 4102 	ldfe	f4, [r0], #8
 8001b2c:	ecf0 5102 	ldfe	f5, [r0], #8
 8001b30:	ecf0 6102 	ldfe	f6, [r0], #8
 8001b34:	ecf0 7102 	ldfe	f7, [r0], #8
 8001b38:	ecf0 8102 	ldfp	f0, [r0], #8
 8001b3c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001b40:	ecf0 a102 	ldfp	f2, [r0], #8
 8001b44:	ecf0 b102 	ldfp	f3, [r0], #8
 8001b48:	ecf0 c102 	ldfp	f4, [r0], #8
 8001b4c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001b50:	ecf0 e102 	ldfp	f6, [r0], #8
 8001b54:	ecf0 f102 	ldfp	f7, [r0], #8
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <__gnu_Unwind_Save_WMMXD>:
 8001b5c:	ece0 0102 	stfe	f0, [r0], #8
 8001b60:	ece0 1102 	stfe	f1, [r0], #8
 8001b64:	ece0 2102 	stfe	f2, [r0], #8
 8001b68:	ece0 3102 	stfe	f3, [r0], #8
 8001b6c:	ece0 4102 	stfe	f4, [r0], #8
 8001b70:	ece0 5102 	stfe	f5, [r0], #8
 8001b74:	ece0 6102 	stfe	f6, [r0], #8
 8001b78:	ece0 7102 	stfe	f7, [r0], #8
 8001b7c:	ece0 8102 	stfp	f0, [r0], #8
 8001b80:	ece0 9102 	stfp	f1, [r0], #8
 8001b84:	ece0 a102 	stfp	f2, [r0], #8
 8001b88:	ece0 b102 	stfp	f3, [r0], #8
 8001b8c:	ece0 c102 	stfp	f4, [r0], #8
 8001b90:	ece0 d102 	stfp	f5, [r0], #8
 8001b94:	ece0 e102 	stfp	f6, [r0], #8
 8001b98:	ece0 f102 	stfp	f7, [r0], #8
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop

08001ba0 <__gnu_Unwind_Restore_WMMXC>:
 8001ba0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001ba4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001ba8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001bac:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <__gnu_Unwind_Save_WMMXC>:
 8001bb4:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001bb8:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001bbc:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001bc0:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop

08001bc8 <_Unwind_RaiseException>:
 8001bc8:	46ec      	mov	ip, sp
 8001bca:	b500      	push	{lr}
 8001bcc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001bd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001bdc:	a901      	add	r1, sp, #4
 8001bde:	f7ff fbed 	bl	80013bc <__gnu_Unwind_RaiseException>
 8001be2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001be6:	b012      	add	sp, #72	; 0x48
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <_Unwind_Resume>:
 8001bec:	46ec      	mov	ip, sp
 8001bee:	b500      	push	{lr}
 8001bf0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001bf4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c00:	a901      	add	r1, sp, #4
 8001c02:	f7ff fc15 	bl	8001430 <__gnu_Unwind_Resume>
 8001c06:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c0a:	b012      	add	sp, #72	; 0x48
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <_Unwind_Resume_or_Rethrow>:
 8001c10:	46ec      	mov	ip, sp
 8001c12:	b500      	push	{lr}
 8001c14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c24:	a901      	add	r1, sp, #4
 8001c26:	f7ff fc25 	bl	8001474 <__gnu_Unwind_Resume_or_Rethrow>
 8001c2a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c2e:	b012      	add	sp, #72	; 0x48
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop

08001c34 <_Unwind_ForcedUnwind>:
 8001c34:	46ec      	mov	ip, sp
 8001c36:	b500      	push	{lr}
 8001c38:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c48:	ab01      	add	r3, sp, #4
 8001c4a:	f7ff fbe7 	bl	800141c <__gnu_Unwind_ForcedUnwind>
 8001c4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c52:	b012      	add	sp, #72	; 0x48
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop

08001c58 <_Unwind_Backtrace>:
 8001c58:	46ec      	mov	ip, sp
 8001c5a:	b500      	push	{lr}
 8001c5c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c6c:	aa01      	add	r2, sp, #4
 8001c6e:	f7ff fc61 	bl	8001534 <__gnu_Unwind_Backtrace>
 8001c72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c76:	b012      	add	sp, #72	; 0x48
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <next_unwind_byte>:
 8001c7c:	7a02      	ldrb	r2, [r0, #8]
 8001c7e:	b91a      	cbnz	r2, 8001c88 <next_unwind_byte+0xc>
 8001c80:	7a43      	ldrb	r3, [r0, #9]
 8001c82:	b943      	cbnz	r3, 8001c96 <next_unwind_byte+0x1a>
 8001c84:	20b0      	movs	r0, #176	; 0xb0
 8001c86:	4770      	bx	lr
 8001c88:	6803      	ldr	r3, [r0, #0]
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	7202      	strb	r2, [r0, #8]
 8001c8e:	021a      	lsls	r2, r3, #8
 8001c90:	6002      	str	r2, [r0, #0]
 8001c92:	0e18      	lsrs	r0, r3, #24
 8001c94:	4770      	bx	lr
 8001c96:	2103      	movs	r1, #3
 8001c98:	6842      	ldr	r2, [r0, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b410      	push	{r4}
 8001c9e:	7243      	strb	r3, [r0, #9]
 8001ca0:	6813      	ldr	r3, [r2, #0]
 8001ca2:	1d14      	adds	r4, r2, #4
 8001ca4:	7201      	strb	r1, [r0, #8]
 8001ca6:	021a      	lsls	r2, r3, #8
 8001ca8:	6044      	str	r4, [r0, #4]
 8001caa:	6002      	str	r2, [r0, #0]
 8001cac:	bc10      	pop	{r4}
 8001cae:	0e18      	lsrs	r0, r3, #24
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <_Unwind_GetGR.constprop.0>:
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	b500      	push	{lr}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	aa03      	add	r2, sp, #12
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	f7ff fbe9 	bl	8001498 <_Unwind_VRS_Get>
 8001cc6:	9803      	ldr	r0, [sp, #12]
 8001cc8:	b005      	add	sp, #20
 8001cca:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cce:	bf00      	nop

08001cd0 <unwind_UCB_from_context>:
 8001cd0:	e7f0      	b.n	8001cb4 <_Unwind_GetGR.constprop.0>
 8001cd2:	bf00      	nop

08001cd4 <__gnu_unwind_execute>:
 8001cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cd8:	4606      	mov	r6, r0
 8001cda:	460f      	mov	r7, r1
 8001cdc:	f04f 0800 	mov.w	r8, #0
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	f7ff ffca 	bl	8001c7c <next_unwind_byte>
 8001ce8:	28b0      	cmp	r0, #176	; 0xb0
 8001cea:	4604      	mov	r4, r0
 8001cec:	d023      	beq.n	8001d36 <__gnu_unwind_execute+0x62>
 8001cee:	0605      	lsls	r5, r0, #24
 8001cf0:	d427      	bmi.n	8001d42 <__gnu_unwind_execute+0x6e>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f10d 090c 	add.w	r9, sp, #12
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	0085      	lsls	r5, r0, #2
 8001cfc:	220d      	movs	r2, #13
 8001cfe:	f8cd 9000 	str.w	r9, [sp]
 8001d02:	4630      	mov	r0, r6
 8001d04:	f7ff fbc8 	bl	8001498 <_Unwind_VRS_Get>
 8001d08:	b2ed      	uxtb	r5, r5
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	0660      	lsls	r0, r4, #25
 8001d0e:	f105 0504 	add.w	r5, r5, #4
 8001d12:	bf4c      	ite	mi
 8001d14:	1b5d      	submi	r5, r3, r5
 8001d16:	18ed      	addpl	r5, r5, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	220d      	movs	r2, #13
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f8cd 9000 	str.w	r9, [sp]
 8001d22:	4630      	mov	r0, r6
 8001d24:	9503      	str	r5, [sp, #12]
 8001d26:	f7ff fbdd 	bl	80014e4 <_Unwind_VRS_Set>
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	f7ff ffa6 	bl	8001c7c <next_unwind_byte>
 8001d30:	28b0      	cmp	r0, #176	; 0xb0
 8001d32:	4604      	mov	r4, r0
 8001d34:	d1db      	bne.n	8001cee <__gnu_unwind_execute+0x1a>
 8001d36:	f1b8 0f00 	cmp.w	r8, #0
 8001d3a:	f000 8094 	beq.w	8001e66 <__gnu_unwind_execute+0x192>
 8001d3e:	2000      	movs	r0, #0
 8001d40:	e01c      	b.n	8001d7c <__gnu_unwind_execute+0xa8>
 8001d42:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001d46:	2b80      	cmp	r3, #128	; 0x80
 8001d48:	d05c      	beq.n	8001e04 <__gnu_unwind_execute+0x130>
 8001d4a:	2b90      	cmp	r3, #144	; 0x90
 8001d4c:	d019      	beq.n	8001d82 <__gnu_unwind_execute+0xae>
 8001d4e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d50:	d02c      	beq.n	8001dac <__gnu_unwind_execute+0xd8>
 8001d52:	2bb0      	cmp	r3, #176	; 0xb0
 8001d54:	d03e      	beq.n	8001dd4 <__gnu_unwind_execute+0x100>
 8001d56:	2bc0      	cmp	r3, #192	; 0xc0
 8001d58:	d06b      	beq.n	8001e32 <__gnu_unwind_execute+0x15e>
 8001d5a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001d5e:	2bd0      	cmp	r3, #208	; 0xd0
 8001d60:	d10b      	bne.n	8001d7a <__gnu_unwind_execute+0xa6>
 8001d62:	f000 0207 	and.w	r2, r0, #7
 8001d66:	3201      	adds	r2, #1
 8001d68:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4630      	mov	r0, r6
 8001d72:	f7ff fd87 	bl	8001884 <_Unwind_VRS_Pop>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d0b3      	beq.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001d7a:	2009      	movs	r0, #9
 8001d7c:	b005      	add	sp, #20
 8001d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d82:	f000 030d 	and.w	r3, r0, #13
 8001d86:	2b0d      	cmp	r3, #13
 8001d88:	d0f7      	beq.n	8001d7a <__gnu_unwind_execute+0xa6>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	ad03      	add	r5, sp, #12
 8001d8e:	f000 020f 	and.w	r2, r0, #15
 8001d92:	4619      	mov	r1, r3
 8001d94:	9500      	str	r5, [sp, #0]
 8001d96:	4630      	mov	r0, r6
 8001d98:	f7ff fb7e 	bl	8001498 <_Unwind_VRS_Get>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9500      	str	r5, [sp, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	220d      	movs	r2, #13
 8001da4:	4630      	mov	r0, r6
 8001da6:	f7ff fb9d 	bl	80014e4 <_Unwind_VRS_Set>
 8001daa:	e79a      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001dac:	43c3      	mvns	r3, r0
 8001dae:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	411a      	asrs	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	0701      	lsls	r1, r0, #28
 8001dbc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001dc0:	bf48      	it	mi
 8001dc2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4630      	mov	r0, r6
 8001dca:	f7ff fd5b 	bl	8001884 <_Unwind_VRS_Pop>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d1d3      	bne.n	8001d7a <__gnu_unwind_execute+0xa6>
 8001dd2:	e786      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001dd4:	28b1      	cmp	r0, #177	; 0xb1
 8001dd6:	d057      	beq.n	8001e88 <__gnu_unwind_execute+0x1b4>
 8001dd8:	28b2      	cmp	r0, #178	; 0xb2
 8001dda:	d068      	beq.n	8001eae <__gnu_unwind_execute+0x1da>
 8001ddc:	28b3      	cmp	r0, #179	; 0xb3
 8001dde:	f000 8095 	beq.w	8001f0c <__gnu_unwind_execute+0x238>
 8001de2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001de6:	2bb4      	cmp	r3, #180	; 0xb4
 8001de8:	d0c7      	beq.n	8001d7a <__gnu_unwind_execute+0xa6>
 8001dea:	2301      	movs	r3, #1
 8001dec:	f000 0207 	and.w	r2, r0, #7
 8001df0:	441a      	add	r2, r3
 8001df2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001df6:	4619      	mov	r1, r3
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f7ff fd43 	bl	8001884 <_Unwind_VRS_Pop>
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d1bb      	bne.n	8001d7a <__gnu_unwind_execute+0xa6>
 8001e02:	e76e      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001e04:	4638      	mov	r0, r7
 8001e06:	f7ff ff39 	bl	8001c7c <next_unwind_byte>
 8001e0a:	0224      	lsls	r4, r4, #8
 8001e0c:	4304      	orrs	r4, r0
 8001e0e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001e12:	d0b2      	beq.n	8001d7a <__gnu_unwind_execute+0xa6>
 8001e14:	2300      	movs	r3, #0
 8001e16:	0124      	lsls	r4, r4, #4
 8001e18:	b2a2      	uxth	r2, r4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f7ff fd31 	bl	8001884 <_Unwind_VRS_Pop>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d1a9      	bne.n	8001d7a <__gnu_unwind_execute+0xa6>
 8001e26:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001e2a:	bf18      	it	ne
 8001e2c:	f04f 0801 	movne.w	r8, #1
 8001e30:	e757      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001e32:	28c6      	cmp	r0, #198	; 0xc6
 8001e34:	d07d      	beq.n	8001f32 <__gnu_unwind_execute+0x25e>
 8001e36:	28c7      	cmp	r0, #199	; 0xc7
 8001e38:	f000 8086 	beq.w	8001f48 <__gnu_unwind_execute+0x274>
 8001e3c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001e40:	2bc0      	cmp	r3, #192	; 0xc0
 8001e42:	f000 8094 	beq.w	8001f6e <__gnu_unwind_execute+0x29a>
 8001e46:	28c8      	cmp	r0, #200	; 0xc8
 8001e48:	f000 809f 	beq.w	8001f8a <__gnu_unwind_execute+0x2b6>
 8001e4c:	28c9      	cmp	r0, #201	; 0xc9
 8001e4e:	d194      	bne.n	8001d7a <__gnu_unwind_execute+0xa6>
 8001e50:	4638      	mov	r0, r7
 8001e52:	f7ff ff13 	bl	8001c7c <next_unwind_byte>
 8001e56:	0302      	lsls	r2, r0, #12
 8001e58:	f000 000f 	and.w	r0, r0, #15
 8001e5c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001e60:	3001      	adds	r0, #1
 8001e62:	4302      	orrs	r2, r0
 8001e64:	e782      	b.n	8001d6c <__gnu_unwind_execute+0x98>
 8001e66:	ac03      	add	r4, sp, #12
 8001e68:	4643      	mov	r3, r8
 8001e6a:	220e      	movs	r2, #14
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	9400      	str	r4, [sp, #0]
 8001e70:	4630      	mov	r0, r6
 8001e72:	f7ff fb11 	bl	8001498 <_Unwind_VRS_Get>
 8001e76:	9400      	str	r4, [sp, #0]
 8001e78:	4630      	mov	r0, r6
 8001e7a:	4643      	mov	r3, r8
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	4641      	mov	r1, r8
 8001e80:	f7ff fb30 	bl	80014e4 <_Unwind_VRS_Set>
 8001e84:	4640      	mov	r0, r8
 8001e86:	e779      	b.n	8001d7c <__gnu_unwind_execute+0xa8>
 8001e88:	4638      	mov	r0, r7
 8001e8a:	f7ff fef7 	bl	8001c7c <next_unwind_byte>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	f43f af73 	beq.w	8001d7a <__gnu_unwind_execute+0xa6>
 8001e94:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001e98:	f47f af6f 	bne.w	8001d7a <__gnu_unwind_execute+0xa6>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f7ff fcef 	bl	8001884 <_Unwind_VRS_Pop>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	f47f af67 	bne.w	8001d7a <__gnu_unwind_execute+0xa6>
 8001eac:	e719      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f10d 090c 	add.w	r9, sp, #12
 8001eb4:	220d      	movs	r2, #13
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f8cd 9000 	str.w	r9, [sp]
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f7ff faeb 	bl	8001498 <_Unwind_VRS_Get>
 8001ec2:	4638      	mov	r0, r7
 8001ec4:	f7ff feda 	bl	8001c7c <next_unwind_byte>
 8001ec8:	0602      	lsls	r2, r0, #24
 8001eca:	f04f 0402 	mov.w	r4, #2
 8001ece:	d50c      	bpl.n	8001eea <__gnu_unwind_execute+0x216>
 8001ed0:	9b03      	ldr	r3, [sp, #12]
 8001ed2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001ed6:	40a0      	lsls	r0, r4
 8001ed8:	4403      	add	r3, r0
 8001eda:	4638      	mov	r0, r7
 8001edc:	9303      	str	r3, [sp, #12]
 8001ede:	f7ff fecd 	bl	8001c7c <next_unwind_byte>
 8001ee2:	0603      	lsls	r3, r0, #24
 8001ee4:	f104 0407 	add.w	r4, r4, #7
 8001ee8:	d4f2      	bmi.n	8001ed0 <__gnu_unwind_execute+0x1fc>
 8001eea:	2300      	movs	r3, #0
 8001eec:	9903      	ldr	r1, [sp, #12]
 8001eee:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001ef2:	40a2      	lsls	r2, r4
 8001ef4:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001ef8:	188c      	adds	r4, r1, r2
 8001efa:	f8cd 9000 	str.w	r9, [sp]
 8001efe:	4619      	mov	r1, r3
 8001f00:	220d      	movs	r2, #13
 8001f02:	4630      	mov	r0, r6
 8001f04:	9403      	str	r4, [sp, #12]
 8001f06:	f7ff faed 	bl	80014e4 <_Unwind_VRS_Set>
 8001f0a:	e6ea      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001f0c:	4638      	mov	r0, r7
 8001f0e:	f7ff feb5 	bl	8001c7c <next_unwind_byte>
 8001f12:	2301      	movs	r3, #1
 8001f14:	0301      	lsls	r1, r0, #12
 8001f16:	f000 000f 	and.w	r0, r0, #15
 8001f1a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001f1e:	18c2      	adds	r2, r0, r3
 8001f20:	430a      	orrs	r2, r1
 8001f22:	4630      	mov	r0, r6
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7ff fcad 	bl	8001884 <_Unwind_VRS_Pop>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	f47f af25 	bne.w	8001d7a <__gnu_unwind_execute+0xa6>
 8001f30:	e6d7      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001f32:	4638      	mov	r0, r7
 8001f34:	f7ff fea2 	bl	8001c7c <next_unwind_byte>
 8001f38:	0301      	lsls	r1, r0, #12
 8001f3a:	f000 000f 	and.w	r0, r0, #15
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001f44:	1c42      	adds	r2, r0, #1
 8001f46:	e7eb      	b.n	8001f20 <__gnu_unwind_execute+0x24c>
 8001f48:	4638      	mov	r0, r7
 8001f4a:	f7ff fe97 	bl	8001c7c <next_unwind_byte>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	f43f af13 	beq.w	8001d7a <__gnu_unwind_execute+0xa6>
 8001f54:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001f58:	f47f af0f 	bne.w	8001d7a <__gnu_unwind_execute+0xa6>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	2104      	movs	r1, #4
 8001f60:	4630      	mov	r0, r6
 8001f62:	f7ff fc8f 	bl	8001884 <_Unwind_VRS_Pop>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	f47f af07 	bne.w	8001d7a <__gnu_unwind_execute+0xa6>
 8001f6c:	e6b9      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f000 020f 	and.w	r2, r0, #15
 8001f74:	3201      	adds	r2, #1
 8001f76:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	f7ff fc81 	bl	8001884 <_Unwind_VRS_Pop>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	f47f aef9 	bne.w	8001d7a <__gnu_unwind_execute+0xa6>
 8001f88:	e6ab      	b.n	8001ce2 <__gnu_unwind_execute+0xe>
 8001f8a:	4638      	mov	r0, r7
 8001f8c:	f7ff fe76 	bl	8001c7c <next_unwind_byte>
 8001f90:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001f94:	f000 030f 	and.w	r3, r0, #15
 8001f98:	3210      	adds	r2, #16
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001fa0:	e6e4      	b.n	8001d6c <__gnu_unwind_execute+0x98>
 8001fa2:	bf00      	nop

08001fa4 <__gnu_unwind_frame>:
 8001fa4:	b530      	push	{r4, r5, lr}
 8001fa6:	2403      	movs	r4, #3
 8001fa8:	460d      	mov	r5, r1
 8001faa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001fac:	b085      	sub	sp, #20
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	f88d 400c 	strb.w	r4, [sp, #12]
 8001fb4:	79dc      	ldrb	r4, [r3, #7]
 8001fb6:	0212      	lsls	r2, r2, #8
 8001fb8:	3308      	adds	r3, #8
 8001fba:	a901      	add	r1, sp, #4
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	9201      	str	r2, [sp, #4]
 8001fc0:	f88d 400d 	strb.w	r4, [sp, #13]
 8001fc4:	9302      	str	r3, [sp, #8]
 8001fc6:	f7ff fe85 	bl	8001cd4 <__gnu_unwind_execute>
 8001fca:	b005      	add	sp, #20
 8001fcc:	bd30      	pop	{r4, r5, pc}
 8001fce:	bf00      	nop

08001fd0 <_Unwind_GetRegionStart>:
 8001fd0:	b508      	push	{r3, lr}
 8001fd2:	f7ff fe7d 	bl	8001cd0 <unwind_UCB_from_context>
 8001fd6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001fd8:	bd08      	pop	{r3, pc}
 8001fda:	bf00      	nop

08001fdc <_Unwind_GetLanguageSpecificData>:
 8001fdc:	b508      	push	{r3, lr}
 8001fde:	f7ff fe77 	bl	8001cd0 <unwind_UCB_from_context>
 8001fe2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001fe4:	79c3      	ldrb	r3, [r0, #7]
 8001fe6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001fea:	3008      	adds	r0, #8
 8001fec:	bd08      	pop	{r3, pc}
 8001fee:	bf00      	nop

08001ff0 <_Unwind_GetTextRelBase>:
 8001ff0:	b508      	push	{r3, lr}
 8001ff2:	f004 fd4e 	bl	8006a92 <abort>
 8001ff6:	bf00      	nop

08001ff8 <_Unwind_GetDataRelBase>:
 8001ff8:	b508      	push	{r3, lr}
 8001ffa:	f7ff fff9 	bl	8001ff0 <_Unwind_GetTextRelBase>
 8001ffe:	bf00      	nop

08002000 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <_ZN3JoyC1Ev>:

#include <Joy.h>



Joy::Joy(): v_max(0), v_min(0), v_neutral(0),
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
		    bit_resolution(0), v_ref(0),
		    neutral_error(0){}
 8002020:	4a10      	ldr	r2, [pc, #64]	; (8002064 <_ZN3JoyC1Ev+0x4c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	08006c90 	.word	0x08006c90

08002068 <_ZN3JoyD1Ev>:

Joy::~Joy() {
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <_ZN3JoyD1Ev+0x1c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	08006c90 	.word	0x08006c90

08002088 <_ZN3JoyD0Ev>:
Joy::~Joy() {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
}
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe9 	bl	8002068 <_ZN3JoyD1Ev>
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f002 ffdb 	bl	8005052 <_ZdlPv>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_ZN3Joy4initEfffhff>:

void Joy::init(float max, float min, float neutral, uint8_t res, float ref, float n_err){
 80020a6:	b590      	push	{r4, r7, lr}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
	v_max = max;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	61da      	str	r2, [r3, #28]
	v_min = min;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	621a      	str	r2, [r3, #32]
	v_neutral = neutral;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
	bit_resolution = res;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	v_ref = ref;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
	neutral_error = n_err;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
	v_max_normalized = v_max - v_neutral;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f7fe fd34 	bl	8000b54 <__aeabi_fsub>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]
	v_min_normalized = v_min - v_neutral;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f7fe fd28 	bl	8000b54 <__aeabi_fsub>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	60da      	str	r2, [r3, #12]
	max_number_levels = pow(2, bit_resolution);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002112:	4619      	mov	r1, r3
 8002114:	2002      	movs	r0, #2
 8002116:	f000 f8ee 	bl	80022f6 <_ZSt3powIihEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800211a:	4603      	mov	r3, r0
 800211c:	460c      	mov	r4, r1
 800211e:	4618      	mov	r0, r3
 8002120:	4621      	mov	r1, r4
 8002122:	f7fe fcf3 	bl	8000b0c <__aeabi_d2uiz>
 8002126:	4602      	mov	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	631a      	str	r2, [r3, #48]	; 0x30

}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bd90      	pop	{r4, r7, pc}

08002134 <_ZN3Joy14calculate_dataEm>:
void Joy::calculate_data(uint32_t raw){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
	convert_adc_value(raw);
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f807 	bl	8002154 <_ZN3Joy17convert_adc_valueEm>
	calculate_joy_data();
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f82c 	bl	80021a4 <_ZN3Joy18calculate_joy_dataEv>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN3Joy17convert_adc_valueEm>:

void Joy::convert_adc_value(uint32_t raw){
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	raw_data = raw;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	605a      	str	r2, [r3, #4]
	converted_data = ( (float)raw_data * v_ref ) / (float)max_number_levels;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fda5 	bl	8000cb8 <__aeabi_ui2f>
 800216e:	4602      	mov	r2, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f7fe fdf6 	bl	8000d68 <__aeabi_fmul>
 800217c:	4603      	mov	r3, r0
 800217e:	461c      	mov	r4, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fd97 	bl	8000cb8 <__aeabi_ui2f>
 800218a:	4603      	mov	r3, r0
 800218c:	4619      	mov	r1, r3
 800218e:	4620      	mov	r0, r4
 8002190:	f7fe fe9e 	bl	8000ed0 <__aeabi_fdiv>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	611a      	str	r2, [r3, #16]

}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}

080021a4 <_ZN3Joy18calculate_joy_dataEv>:
void Joy::calculate_joy_data(void){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	if(is_joy_near_neautral()){
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f873 	bl	8002298 <_ZN3Joy20is_joy_near_neautralEv>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <_ZN3Joy18calculate_joy_dataEv+0x2e>
		percentage_value = 0.0f;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
		sign = POSITIVE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	761a      	strb	r2, [r3, #24]
		return;
 80021d0:	e05d      	b.n	800228e <_ZN3Joy18calculate_joy_dataEv+0xea>
	}
	if (converted_data > v_max){
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f7fe ff7f 	bl	80010e0 <__aeabi_fcmpgt>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <_ZN3Joy18calculate_joy_dataEv+0x52>
		percentage_value = 100.0f;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a2a      	ldr	r2, [pc, #168]	; (8002294 <_ZN3Joy18calculate_joy_dataEv+0xf0>)
 80021ec:	615a      	str	r2, [r3, #20]
		sign = POSITIVE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	761a      	strb	r2, [r3, #24]
		return;
 80021f4:	e04b      	b.n	800228e <_ZN3Joy18calculate_joy_dataEv+0xea>
	}

	if(converted_data >= v_neutral){
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4610      	mov	r0, r2
 8002202:	f7fe ff63 	bl	80010cc <__aeabi_fcmpge>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <_ZN3Joy18calculate_joy_dataEv+0xaa>
		percentage_value = 100 * fabs((converted_data - v_neutral) / v_max_normalized );
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7fe fc9c 	bl	8000b54 <__aeabi_fsub>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f7fe fe52 	bl	8000ed0 <__aeabi_fdiv>
 800222c:	4603      	mov	r3, r0
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fee6 	bl	8002000 <_ZSt4fabsf>
 8002234:	4603      	mov	r3, r0
 8002236:	4917      	ldr	r1, [pc, #92]	; (8002294 <_ZN3Joy18calculate_joy_dataEv+0xf0>)
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fd95 	bl	8000d68 <__aeabi_fmul>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	615a      	str	r2, [r3, #20]
		sign = POSITIVE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	761a      	strb	r2, [r3, #24]
 800224c:	e01f      	b.n	800228e <_ZN3Joy18calculate_joy_dataEv+0xea>
	}else{
		percentage_value = 100 * fabs((converted_data - v_neutral) / v_min_normalized );
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f7fe fc7b 	bl	8000b54 <__aeabi_fsub>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f7fe fe31 	bl	8000ed0 <__aeabi_fdiv>
 800226e:	4603      	mov	r3, r0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fec5 	bl	8002000 <_ZSt4fabsf>
 8002276:	4603      	mov	r3, r0
 8002278:	4906      	ldr	r1, [pc, #24]	; (8002294 <_ZN3Joy18calculate_joy_dataEv+0xf0>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fd74 	bl	8000d68 <__aeabi_fmul>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	615a      	str	r2, [r3, #20]
		sign = NEGATIVE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	761a      	strb	r2, [r3, #24]
	}


}
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	42c80000 	.word	0x42c80000

08002298 <_ZN3Joy20is_joy_near_neautralEv>:
uint8_t Joy::is_joy_near_neautral(){
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	return (converted_data > (v_neutral - neutral_error) &&
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691c      	ldr	r4, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f7fe fc50 	bl	8000b54 <__aeabi_fsub>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4619      	mov	r1, r3
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7fe ff11 	bl	80010e0 <__aeabi_fcmpgt>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <_ZN3Joy20is_joy_near_neautralEv+0x54>
		   converted_data < (v_neutral + neutral_error));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691c      	ldr	r4, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fe fc40 	bl	8000b58 <__addsf3>
 80022d8:	4603      	mov	r3, r0
	return (converted_data > (v_neutral - neutral_error) &&
 80022da:	4619      	mov	r1, r3
 80022dc:	4620      	mov	r0, r4
 80022de:	f7fe fee1 	bl	80010a4 <__aeabi_fcmplt>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <_ZN3Joy20is_joy_near_neautralEv+0x54>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <_ZN3Joy20is_joy_near_neautralEv+0x56>
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}

080022f6 <_ZSt3powIihEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80022f6:	b5b0      	push	{r4, r5, r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	70fb      	strb	r3, [r7, #3]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe f8ec 	bl	80004e0 <__aeabi_i2d>
 8002308:	4604      	mov	r4, r0
 800230a:	460d      	mov	r5, r1
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f8d6 	bl	80004c0 <__aeabi_ui2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4620      	mov	r0, r4
 800231a:	4629      	mov	r1, r5
 800231c:	f003 fba8 	bl	8005a70 <pow>
 8002320:	4603      	mov	r3, r0
 8002322:	460c      	mov	r4, r1
    }
 8002324:	4618      	mov	r0, r3
 8002326:	4621      	mov	r1, r4
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002330 <HAL_TIM_PeriodElapsedCallback>:

#include "CanManager.h"
#include "ModeManager.h"
#include "Joystick.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d102      	bne.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x18>
	  canManager.stopAllMotors();
 8002342:	4811      	ldr	r0, [pc, #68]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002344:	f000 f98e 	bl	8002664 <_ZN10CanManager13stopAllMotorsEv>
  }
  if (htim->Instance == TIM3) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0f      	ldr	r2, [pc, #60]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d113      	bne.n	800237a <HAL_TIM_PeriodElapsedCallback+0x4a>

	  if (modeManager.isJoystickMode()){
 8002352:	480f      	ldr	r0, [pc, #60]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002354:	f000 fbfe 	bl	8002b54 <_ZN11ModeManager14isJoystickModeEv>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_TIM_PeriodElapsedCallback+0x4a>
		  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800236e:	4809      	ldr	r0, [pc, #36]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002370:	f002 f8dc 	bl	800452c <HAL_GPIO_WritePin>
		joystick.update_measurments();
 8002374:	4808      	ldr	r0, [pc, #32]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002376:	f000 fa69 	bl	800284c <_ZN8Joystick18update_measurmentsEv>
	  }
  }
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40000800 	.word	0x40000800
 8002388:	2000009c 	.word	0x2000009c
 800238c:	40000400 	.word	0x40000400
 8002390:	20000204 	.word	0x20000204
 8002394:	40011000 	.word	0x40011000
 8002398:	20000114 	.word	0x20000114

0800239c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback (CAN_HandleTypeDef* hcan ){
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
			&canManager.canMsgRx.header,
			canManager.canMsgRx.data );
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 80023a8:	2100      	movs	r1, #0
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f001 fc7c 	bl	8003ca8 <HAL_CAN_GetRxMessage>

	canManager.process();
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 80023b2:	f000 f82d 	bl	8002410 <_ZN10CanManager7processEv>

}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200000e8 	.word	0x200000e8
 80023c4:	200000c8 	.word	0x200000c8
 80023c8:	2000009c 	.word	0x2000009c

080023cc <_ZN10CanManager4initEv>:
#include "CanManager.h"
#include <math.h>

CanManager canManager;

void CanManager::init(){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	canMsgTx.header.RTR = CAN_RTR_DATA;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	661a      	str	r2, [r3, #96]	; 0x60
	canMsgTx.header.IDE  = CAN_ID_STD;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	65da      	str	r2, [r3, #92]	; 0x5c
	canMsgTx.header.ExtId = 0x01;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	659a      	str	r2, [r3, #88]	; 0x58
	canMsgTx.header.TransmitGlobalTime = DISABLE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	hal_can_filter_init();
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f962 	bl	80026b8 <_ZN10CanManager19hal_can_filter_initEv>
	HAL_CAN_Start(&hcan);
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <_ZN10CanManager4initEv+0x40>)
 80023f6:	f001 fbde 	bl	8003bb6 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80023fa:	2102      	movs	r1, #2
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <_ZN10CanManager4initEv+0x40>)
 80023fe:	f001 fcc9 	bl	8003d94 <HAL_CAN_ActivateNotification>

}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000290 	.word	0x20000290

08002410 <_ZN10CanManager7processEv>:
void CanManager::process(){
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	getData_Rx(canMsgRx.header.StdId,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
			canMsgRx.data,
			canMsgRx.header.DLC);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	getData_Rx(canMsgRx.header.StdId,
 8002426:	b2db      	uxtb	r3, r3
			canMsgRx.header.DLC);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f804 	bl	8002436 <_ZN10CanManager10getData_RxEmPhh>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZN10CanManager10getData_RxEmPhh>:
/////////////////////////RX PART///////////////////////////////////////////

void CanManager::getData_Rx(uint32_t frame_id, uint8_t* data, uint8_t dlc){
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	70fb      	strb	r3, [r7, #3]
	if (frame_id == STATUS_FRAME_ID) convertStatusData_Rx( data); // function also update status in modemanager
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f240 225d 	movw	r2, #605	; 0x25d
 800244a:	4293      	cmp	r3, r2
 800244c:	d104      	bne.n	8002458 <_ZN10CanManager10getData_RxEmPhh+0x22>
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f831 	bl	80024b8 <_ZN10CanManager20convertStatusData_RxEPh>
	else if ( frame_id == VELOCITY_FRAME_ID ) 		setVelocity( data, ModeManager::RC );
	else if ( frame_id == I3_VELOCITY_FRAME_ID )	setVelocity( data, ModeManager::I3  );
	else if ( frame_id == TURN_FRAME_ID )			setTurn( data , ModeManager::RC  );
	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data , ModeManager::I3  );
}
 8002456:	e02a      	b.n	80024ae <_ZN10CanManager10getData_RxEmPhh+0x78>
	else if ( frame_id == VELOCITY_FRAME_ID ) 		setVelocity( data, ModeManager::RC );
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f240 223e 	movw	r2, #574	; 0x23e
 800245e:	4293      	cmp	r3, r2
 8002460:	d105      	bne.n	800246e <_ZN10CanManager10getData_RxEmPhh+0x38>
 8002462:	2200      	movs	r2, #0
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f87e 	bl	8002568 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>
}
 800246c:	e01f      	b.n	80024ae <_ZN10CanManager10getData_RxEmPhh+0x78>
	else if ( frame_id == I3_VELOCITY_FRAME_ID )	setVelocity( data, ModeManager::I3  );
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f240 226d 	movw	r2, #621	; 0x26d
 8002474:	4293      	cmp	r3, r2
 8002476:	d105      	bne.n	8002484 <_ZN10CanManager10getData_RxEmPhh+0x4e>
 8002478:	2201      	movs	r2, #1
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f873 	bl	8002568 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>
}
 8002482:	e014      	b.n	80024ae <_ZN10CanManager10getData_RxEmPhh+0x78>
	else if ( frame_id == TURN_FRAME_ID )			setTurn( data , ModeManager::RC  );
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f240 224d 	movw	r2, #589	; 0x24d
 800248a:	4293      	cmp	r3, r2
 800248c:	d105      	bne.n	800249a <_ZN10CanManager10getData_RxEmPhh+0x64>
 800248e:	2200      	movs	r2, #0
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f88a 	bl	80025ac <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>
}
 8002498:	e009      	b.n	80024ae <_ZN10CanManager10getData_RxEmPhh+0x78>
	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data , ModeManager::I3  );
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f240 227d 	movw	r2, #637	; 0x27d
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d104      	bne.n	80024ae <_ZN10CanManager10getData_RxEmPhh+0x78>
 80024a4:	2201      	movs	r2, #1
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f87f 	bl	80025ac <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <_ZN10CanManager20convertStatusData_RxEPh>:

void CanManager::convertStatusData_Rx(uint8_t * data){
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]

	uint8_t status = data[STATUS_MODE_BYTE];
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	73fb      	strb	r3, [r7, #15]
	uint8_t permition = data[STATUS_PERMITION_BYTE];
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	785b      	ldrb	r3, [r3, #1]
 80024cc:	73bb      	strb	r3, [r7, #14]
	modeManager.statusUpdate(getRCmodeStatus_Rx( status ), getDriveModestatus_Rx( permition ) );
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f814 	bl	8002500 <_ZN10CanManager18getRCmodeStatus_RxEh>
 80024d8:	4603      	mov	r3, r0
 80024da:	461c      	mov	r4, r3
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f82c 	bl	800253e <_ZN10CanManager21getDriveModestatus_RxEh>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4621      	mov	r1, r4
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <_ZN10CanManager20convertStatusData_RxEPh+0x44>)
 80024ee:	f000 fac9 	bl	8002a84 <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE>
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000204 	.word	0x20000204

08002500 <_ZN10CanManager18getRCmodeStatus_RxEh>:

ModeManager::RC_MODE CanManager::getRCmodeStatus_Rx(uint8_t status){
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
	if (status == JOYSTICK_MODE_MSG ) 		return ModeManager::MODE_JOYSICK;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <_ZN10CanManager18getRCmodeStatus_RxEh+0x16>
 8002512:	2300      	movs	r3, #0
 8002514:	e00e      	b.n	8002534 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == ACRO_MODE_MSG ) 		return ModeManager::MODE_ACRO;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <_ZN10CanManager18getRCmodeStatus_RxEh+0x20>
 800251c:	2303      	movs	r3, #3
 800251e:	e009      	b.n	8002534 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == SEMI_MODE_MSG ) 		return ModeManager::MODE_SEMI;
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d101      	bne.n	800252a <_ZN10CanManager18getRCmodeStatus_RxEh+0x2a>
 8002526:	2302      	movs	r3, #2
 8002528:	e004      	b.n	8002534 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == AUTONOMOUS_MODE_MSG ) return ModeManager::MODE_AUTONOMOUS;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d101      	bne.n	8002534 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
 8002530:	2301      	movs	r3, #1
 8002532:	e7ff      	b.n	8002534 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <_ZN10CanManager21getDriveModestatus_RxEh>:

ModeManager::DRIVE_MODE CanManager::getDriveModestatus_Rx(uint8_t permition){
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
	if (permition == ENABLE_DRIVE_MSG  ) 		return ModeManager::ENABLE;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <_ZN10CanManager21getDriveModestatus_RxEh+0x16>
 8002550:	2301      	movs	r3, #1
 8002552:	e004      	b.n	800255e <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
	else if(permition ==  DISABLE_DRIVE_MSG ) 	return ModeManager::DISABLE;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
 800255a:	2300      	movs	r3, #0
 800255c:	e7ff      	b.n	800255e <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>:


void CanManager::setVelocity(uint8_t* data, ModeManager::MSG_ORIGIN origin){
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	71fb      	strb	r3, [r7, #7]
	if (modeManager.velocityPermission(origin)){
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	4619      	mov	r1, r3
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE+0x40>)
 800257c:	f000 fa00 	bl	8002980 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE+0x38>
		fill_frame(data);
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f82c 	bl	80025f0 <_ZN10CanManager10fill_frameEPh>
		sendMsg(VELOCITY);
 8002598:	2101      	movs	r1, #1
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f845 	bl	800262a <_ZN10CanManager7sendMsgENS_9SEND_MODEE>
	}

}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000204 	.word	0x20000204

080025ac <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>:
void CanManager::setTurn(uint8_t* data, ModeManager::MSG_ORIGIN origin){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	4613      	mov	r3, r2
 80025b8:	71fb      	strb	r3, [r7, #7]
	if (modeManager.turnPermission(origin)){
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	4619      	mov	r1, r3
 80025be:	480b      	ldr	r0, [pc, #44]	; (80025ec <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE+0x40>)
 80025c0:	f000 fa1f 	bl	8002a02 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE+0x38>
		fill_frame(data);
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f80a 	bl	80025f0 <_ZN10CanManager10fill_frameEPh>
		sendMsg(TURN);
 80025dc:	2100      	movs	r1, #0
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f823 	bl	800262a <_ZN10CanManager7sendMsgENS_9SEND_MODEE>
	}
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000204 	.word	0x20000204

080025f0 <_ZN10CanManager10fill_frameEPh>:


void CanManager::fill_frame(uint8_t* data){
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	for(uint8_t i=0; i <4; i++){
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b03      	cmp	r3, #3
 8002602:	dc0d      	bgt.n	8002620 <_ZN10CanManager10fill_frameEPh+0x30>
		canMsgTx.data[i] = data[i];
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6839      	ldr	r1, [r7, #0]
 800260a:	440a      	add	r2, r1
 800260c:	7811      	ldrb	r1, [r2, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	460a      	mov	r2, r1
 8002614:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	for(uint8_t i=0; i <4; i++){
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	3301      	adds	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e7ee      	b.n	80025fe <_ZN10CanManager10fill_frameEPh+0xe>
	}
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <_ZN10CanManager7sendMsgENS_9SEND_MODEE>:

/////////////////////////TX PART///////////////////////////////////////////

void CanManager::sendMsg(SEND_MODE mode){
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
	if (mode == TURN  ){
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x20>
		hal_can_send( STEERING_VELOCITY_FRAME_ID, STEERING_FRAME_LENGTH );
 800263c:	2204      	movs	r2, #4
 800263e:	f240 211d 	movw	r1, #541	; 0x21d
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f818 	bl	8002678 <_ZN10CanManager12hal_can_sendEth>
	}
	else if (mode == VELOCITY){
		hal_can_send( STEERING_TURN_FRAME_ID,  STEERING_FRAME_LENGTH );
	}
}
 8002648:	e008      	b.n	800265c <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x32>
	else if (mode == VELOCITY){
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x32>
		hal_can_send( STEERING_TURN_FRAME_ID,  STEERING_FRAME_LENGTH );
 8002650:	2204      	movs	r2, #4
 8002652:	f240 212d 	movw	r1, #557	; 0x22d
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f80e 	bl	8002678 <_ZN10CanManager12hal_can_sendEth>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <_ZN10CanManager13stopAllMotorsEv>:
}




void CanManager::stopAllMotors(){
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
	...

08002678 <_ZN10CanManager12hal_can_sendEth>:


void CanManager::hal_can_send(uint16_t frame_id, uint8_t dlc){
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
	canMsgTx.header.DLC = (uint32_t)dlc;
 8002688:	787a      	ldrb	r2, [r7, #1]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	665a      	str	r2, [r3, #100]	; 0x64
	canMsgTx.header.StdId = (uint32_t)frame_id;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
	HAL_CAN_AddTxMessage(&hcan, &(canMsgTx.header),canMsgTx.data,&(canMsgTx.mailbox));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	336c      	adds	r3, #108	; 0x6c
 80026a4:	4803      	ldr	r0, [pc, #12]	; (80026b4 <_ZN10CanManager12hal_can_sendEth+0x3c>)
 80026a6:	f001 fab1 	bl	8003c0c <HAL_CAN_AddTxMessage>

}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000290 	.word	0x20000290

080026b8 <_ZN10CanManager19hal_can_filter_initEv>:

void CanManager::hal_can_filter_init(void){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	hcan_filter.FilterBank = 0;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	621a      	str	r2, [r3, #32]
	hcan_filter.FilterIdHigh = 0x0000;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
	hcan_filter.FilterIdLow = 0x0000;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
	hcan_filter.FilterMaskIdHigh = 0x0000;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
	hcan_filter.FilterMaskIdLow = 0x0000;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
	hcan_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
	hcan_filter.FilterActivation = ENABLE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
	hcan_filter.SlaveStartFilterBank = 14;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	220e      	movs	r2, #14
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4803      	ldr	r0, [pc, #12]	; (8002710 <_ZN10CanManager19hal_can_filter_initEv+0x58>)
 8002704:	f001 f9eb 	bl	8003ade <HAL_CAN_ConfigFilter>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000290 	.word	0x20000290

08002714 <_ZN10CanManagerC1Ev>:
CanManager::CanManager() {
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <_ZN10CanManagerC1Ev+0x1c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]

}
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	08006cb0 	.word	0x08006cb0

08002734 <_ZN10CanManagerD1Ev>:

CanManager::~CanManager() {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <_ZN10CanManagerD1Ev+0x1c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	08006cb0 	.word	0x08006cb0

08002754 <_ZN10CanManagerD0Ev>:
CanManager::~CanManager() {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
}
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ffe9 	bl	8002734 <_ZN10CanManagerD1Ev>
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f002 fc75 	bl	8005052 <_ZdlPv>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <_Z41__static_initialization_and_destruction_0ii>:
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d10c      	bne.n	800279e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278a:	4293      	cmp	r3, r2
 800278c:	d107      	bne.n	800279e <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanManager canManager;
 800278e:	4806      	ldr	r0, [pc, #24]	; (80027a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002790:	f7ff ffc0 	bl	8002714 <_ZN10CanManagerC1Ev>
 8002794:	4a05      	ldr	r2, [pc, #20]	; (80027ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002796:	4906      	ldr	r1, [pc, #24]	; (80027b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002798:	4803      	ldr	r0, [pc, #12]	; (80027a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800279a:	f002 fc5c 	bl	8005056 <__aeabi_atexit>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000009c 	.word	0x2000009c
 80027ac:	20000000 	.word	0x20000000
 80027b0:	08002735 	.word	0x08002735

080027b4 <_GLOBAL__sub_I_canManager>:
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027bc:	2001      	movs	r0, #1
 80027be:	f7ff ffd9 	bl	8002774 <_Z41__static_initialization_and_destruction_0ii>
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_ZN8Joystick4initEv>:

#include "Joystick.h"

Joystick joystick;

void Joystick::init(void){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(&hadc1);
 80027cc:	4808      	ldr	r0, [pc, #32]	; (80027f0 <_ZN8Joystick4initEv+0x2c>)
 80027ce:	f000 ff6f 	bl	80036b0 <HAL_ADC_Start>
    HAL_ADC_Start_DMA(&hadc1,adc_raw_values,NUMBER_OF_CHANNELS);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	33e0      	adds	r3, #224	; 0xe0
 80027d6:	2204      	movs	r2, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <_ZN8Joystick4initEv+0x2c>)
 80027dc:	f000 ffca 	bl	8003774 <HAL_ADC_Start_DMA>

    addJoy();
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f807 	bl	80027f4 <_ZN8Joystick6addJoyEv>

}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000021c 	.word	0x2000021c

080027f4 <_ZN8Joystick6addJoyEv>:

void Joystick::addJoy(){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af04      	add	r7, sp, #16
 80027fa:	6078      	str	r0, [r7, #4]
    axis[X_AXIS_INDEX].init( V_MAX_X_AXIS, V_MIN_X_AXIS, V_NEUTRAL_X_AXIS,
 80027fc:	6878      	ldr	r0, [r7, #4]
    				ADC_BIT_RESOLUTION, ADC_REFERENCE_VOLTAGE, MEASUREMENT_ERROR);
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <_ZN8Joystick6addJoyEv+0x44>)
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <_ZN8Joystick6addJoyEv+0x48>)
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	230c      	movs	r3, #12
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <_ZN8Joystick6addJoyEv+0x4c>)
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <_ZN8Joystick6addJoyEv+0x50>)
 800280e:	490e      	ldr	r1, [pc, #56]	; (8002848 <_ZN8Joystick6addJoyEv+0x54>)
 8002810:	f7ff fc49 	bl	80020a6 <_ZN3Joy4initEfffhff>

    axis[Y_AXIS_INDEX].init( V_MAX_Y_AXIS, V_MIN_Y_AXIS, V_NEUTRAL_Y_AXIS,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0038 	add.w	r0, r3, #56	; 0x38
        				ADC_BIT_RESOLUTION, ADC_REFERENCE_VOLTAGE, MEASUREMENT_ERROR);
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <_ZN8Joystick6addJoyEv+0x44>)
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <_ZN8Joystick6addJoyEv+0x48>)
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	230c      	movs	r3, #12
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <_ZN8Joystick6addJoyEv+0x4c>)
 8002828:	4a06      	ldr	r2, [pc, #24]	; (8002844 <_ZN8Joystick6addJoyEv+0x50>)
 800282a:	4907      	ldr	r1, [pc, #28]	; (8002848 <_ZN8Joystick6addJoyEv+0x54>)
 800282c:	f7ff fc3b 	bl	80020a6 <_ZN3Joy4initEfffhff>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	3d75c28f 	.word	0x3d75c28f
 800283c:	40533333 	.word	0x40533333
 8002840:	3f99999a 	.word	0x3f99999a
 8002844:	3dcccccd 	.word	0x3dcccccd
 8002848:	40400000 	.word	0x40400000

0800284c <_ZN8Joystick18update_measurmentsEv>:

void Joystick::update_measurments(void){
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	axis[X_AXIS_INDEX].calculate_data(adc_raw_values[X_AXIS_ADC_CHANNEL]);
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f7ff fc68 	bl	8002134 <_ZN3Joy14calculate_dataEm>
	axis[Y_AXIS_INDEX].calculate_data(adc_raw_values[Y_AXIS_ADC_CHANNEL]);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f7ff fc5e 	bl	8002134 <_ZN3Joy14calculate_dataEm>
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_ZN8JoystickC1Ev>:
}
float Joystick::getPercentage(Axis_num ax){
	return axis[ax].getPercentage();
}

Joystick::Joystick() {
 8002880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	687d      	ldr	r5, [r7, #4]
 800288a:	2403      	movs	r4, #3
 800288c:	462e      	mov	r6, r5
 800288e:	2c00      	cmp	r4, #0
 8002890:	db05      	blt.n	800289e <_ZN8JoystickC1Ev+0x1e>
 8002892:	4630      	mov	r0, r6
 8002894:	f7ff fbc0 	bl	8002018 <_ZN3JoyC1Ev>
 8002898:	3638      	adds	r6, #56	; 0x38
 800289a:	3c01      	subs	r4, #1
 800289c:	e7f7      	b.n	800288e <_ZN8JoystickC1Ev+0xe>

}
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	e013      	b.n	80028ca <_ZN8JoystickC1Ev+0x4a>
 80028a2:	2d00      	cmp	r5, #0
 80028a4:	d00f      	beq.n	80028c6 <_ZN8JoystickC1Ev+0x46>
Joystick::Joystick() {
 80028a6:	f1c4 0303 	rsb	r3, r4, #3
 80028aa:	461a      	mov	r2, r3
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	18ec      	adds	r4, r5, r3
 80028b6:	42ac      	cmp	r4, r5
 80028b8:	d005      	beq.n	80028c6 <_ZN8JoystickC1Ev+0x46>
 80028ba:	3c38      	subs	r4, #56	; 0x38
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4620      	mov	r0, r4
 80028c2:	4798      	blx	r3
 80028c4:	e7f7      	b.n	80028b6 <_ZN8JoystickC1Ev+0x36>
 80028c6:	f002 fbcb 	bl	8005060 <__cxa_end_cleanup>
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028d2 <_ZN8JoystickD1Ev>:

Joystick::~Joystick() {
 80028d2:	b590      	push	{r4, r7, lr}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <_ZN8JoystickD1Ev+0x26>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	42a3      	cmp	r3, r4
 80028ea:	d005      	beq.n	80028f8 <_ZN8JoystickD1Ev+0x26>
 80028ec:	3c38      	subs	r4, #56	; 0x38
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4620      	mov	r0, r4
 80028f4:	4798      	blx	r3
 80028f6:	e7f6      	b.n	80028e6 <_ZN8JoystickD1Ev+0x14>
	// TODO Auto-generated destructor stub
}
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
	...

08002904 <_Z41__static_initialization_and_destruction_0ii>:
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d10c      	bne.n	800292e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800291a:	4293      	cmp	r3, r2
 800291c:	d107      	bne.n	800292e <_Z41__static_initialization_and_destruction_0ii+0x2a>
Joystick joystick;
 800291e:	4806      	ldr	r0, [pc, #24]	; (8002938 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002920:	f7ff ffae 	bl	8002880 <_ZN8JoystickC1Ev>
 8002924:	4a05      	ldr	r2, [pc, #20]	; (800293c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002926:	4906      	ldr	r1, [pc, #24]	; (8002940 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002928:	4803      	ldr	r0, [pc, #12]	; (8002938 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800292a:	f002 fb94 	bl	8005056 <__aeabi_atexit>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000114 	.word	0x20000114
 800293c:	20000000 	.word	0x20000000
 8002940:	080028d3 	.word	0x080028d3

08002944 <_GLOBAL__sub_I_joystick>:
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
 8002948:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800294c:	2001      	movs	r0, #1
 800294e:	f7ff ffd9 	bl	8002904 <_Z41__static_initialization_and_destruction_0ii>
 8002952:	bd80      	pop	{r7, pc}

08002954 <_ZN11ModeManager4initEv>:

#include "ModeManager.h"

ModeManager modeManager;

void ModeManager::init(){
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	driveMode = ENABLE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	715a      	strb	r2, [r3, #5]
	RCmode = MODE_JOYSICK;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	719a      	strb	r2, [r3, #6]
	HAL_TIM_Base_Start_IT(&PROCESS_TIMER);
 8002968:	4804      	ldr	r0, [pc, #16]	; (800297c <_ZN11ModeManager4initEv+0x28>)
 800296a:	f002 f8f5 	bl	8004b58 <HAL_TIM_Base_Start_IT>
	isIdleTimerON = 1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	711a      	strb	r2, [r3, #4]
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200002f8 	.word	0x200002f8

08002980 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE>:
uint8_t ModeManager::velocityPermission(MSG_ORIGIN origin){
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	resetIdleTimer();
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f8bb 	bl	8002b08 <_ZN11ModeManager14resetIdleTimerEv>
	if (getDriveMode() == ENABLE){
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8c8 	bl	8002b28 <_ZN11ModeManager12getDriveModeEv>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d027      	beq.n	80029f8 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x78>
		if(origin == RC && (getRCmode() == MODE_ACRO ||
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4a>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8c5 	bl	8002b3e <_ZN11ModeManager9getRCmodeEv>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d005      	beq.n	80029c6 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x46>
  	   	   	     	 	 	getRCmode() == MODE_SEMI) ){
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8bf 	bl	8002b3e <_ZN11ModeManager9getRCmodeEv>
 80029c0:	4603      	mov	r3, r0
		if(origin == RC && (getRCmode() == MODE_ACRO ||
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d101      	bne.n	80029ca <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4a>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4c>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x54>
			return 1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e012      	b.n	80029fa <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS) ){
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6a>
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8af 	bl	8002b3e <_ZN11ModeManager9getRCmodeEv>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6a>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6c>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x74>
			return 1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e002      	b.n	80029fa <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else return 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
	}
	else return 0;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE>:

uint8_t ModeManager::turnPermission(MSG_ORIGIN origin){
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
	resetIdleTimer();
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f87a 	bl	8002b08 <_ZN11ModeManager14resetIdleTimerEv>
	if (getDriveMode() == ENABLE){
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f887 	bl	8002b28 <_ZN11ModeManager12getDriveModeEv>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d027      	beq.n	8002a7a <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x78>
		if(origin == RC && getRCmode() == MODE_ACRO){
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x3e>
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f884 	bl	8002b3e <_ZN11ModeManager9getRCmodeEv>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d101      	bne.n	8002a40 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x3e>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x40>
 8002a40:	2300      	movs	r3, #0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x48>
			return 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e018      	b.n	8002a7c <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS ||
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10d      	bne.n	8002a6c <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6a>
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f874 	bl	8002b3e <_ZN11ModeManager9getRCmodeEv>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d005      	beq.n	8002a68 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x66>
				   	   	   	     getRCmode() == MODE_SEMI) ){
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f86e 	bl	8002b3e <_ZN11ModeManager9getRCmodeEv>
 8002a62:	4603      	mov	r3, r0
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS ||
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d101      	bne.n	8002a6c <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6a>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6c>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x74>
			return 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e002      	b.n	8002a7c <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else return 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e000      	b.n	8002a7c <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
	}
	else return 0;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE>:


void ModeManager::statusUpdate(RC_MODE RCstatus, DRIVE_MODE drivestatus){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
 8002a90:	4613      	mov	r3, r2
 8002a92:	70bb      	strb	r3, [r7, #2]
	RCmode = RCstatus;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	719a      	strb	r2, [r3, #6]
	driveMode = drivestatus;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	78ba      	ldrb	r2, [r7, #2]
 8002a9e:	715a      	strb	r2, [r3, #5]
	if (RCstatus !=MODE_JOYSICK){
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE+0x2a>
		startIdleTimer();
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f808 	bl	8002abc <_ZN11ModeManager14startIdleTimerEv>
	}
	else stopIdleTimer();
}
 8002aac:	e002      	b.n	8002ab4 <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE+0x30>
	else stopIdleTimer();
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f816 	bl	8002ae0 <_ZN11ModeManager13stopIdleTimerEv>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN11ModeManager14startIdleTimerEv>:

void ModeManager::startIdleTimer(){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	if(!isIdleTimerON){
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	791b      	ldrb	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <_ZN11ModeManager14startIdleTimerEv+0x16>
		HAL_TIM_Base_Start_IT(&IDLE_TIMER);
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <_ZN11ModeManager14startIdleTimerEv+0x20>)
 8002ace:	f002 f843 	bl	8004b58 <HAL_TIM_Base_Start_IT>
	}
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200002b8 	.word	0x200002b8

08002ae0 <_ZN11ModeManager13stopIdleTimerEv>:

void ModeManager::stopIdleTimer(){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	if(isIdleTimerON){
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <_ZN11ModeManager13stopIdleTimerEv+0x1c>
		HAL_TIM_Base_Stop_IT(&IDLE_TIMER);
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <_ZN11ModeManager13stopIdleTimerEv+0x24>)
 8002af2:	f002 f841 	bl	8004b78 <HAL_TIM_Base_Stop_IT>
		resetIdleTimer();
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f806 	bl	8002b08 <_ZN11ModeManager14resetIdleTimerEv>
	}
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200002b8 	.word	0x200002b8

08002b08 <_ZN11ModeManager14resetIdleTimerEv>:
void ModeManager::resetIdleTimer(){
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&IDLE_TIMER, 0);
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <_ZN11ModeManager14resetIdleTimerEv+0x1c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	200002b8 	.word	0x200002b8

08002b28 <_ZN11ModeManager12getDriveModeEv>:

ModeManager::DRIVE_MODE ModeManager::getDriveMode(){
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	return driveMode;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	795b      	ldrb	r3, [r3, #5]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <_ZN11ModeManager9getRCmodeEv>:
ModeManager::RC_MODE ModeManager::getRCmode(){
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
	return RCmode;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	799b      	ldrb	r3, [r3, #6]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <_ZN11ModeManager14isJoystickModeEv>:


uint8_t ModeManager::isJoystickMode(){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	if (getDriveMode() == ENABLE &&
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffe3 	bl	8002b28 <_ZN11ModeManager12getDriveModeEv>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d107      	bne.n	8002b78 <_ZN11ModeManager14isJoystickModeEv+0x24>
		getRCmode() == MODE_JOYSICK) return 1;
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ffe8 	bl	8002b3e <_ZN11ModeManager9getRCmodeEv>
 8002b6e:	4603      	mov	r3, r0
	if (getDriveMode() == ENABLE &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <_ZN11ModeManager14isJoystickModeEv+0x24>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <_ZN11ModeManager14isJoystickModeEv+0x26>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <_ZN11ModeManager14isJoystickModeEv+0x2e>
		getRCmode() == MODE_JOYSICK) return 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <_ZN11ModeManager14isJoystickModeEv+0x30>
	else return 0;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZN11ModeManagerC1Ev>:

ModeManager::ModeManager() {
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <_ZN11ModeManagerC1Ev+0x1c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	08006cd8 	.word	0x08006cd8

08002bac <_ZN11ModeManagerD1Ev>:

ModeManager::~ModeManager() {
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <_ZN11ModeManagerD1Ev+0x1c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	08006cd8 	.word	0x08006cd8

08002bcc <_ZN11ModeManagerD0Ev>:
ModeManager::~ModeManager() {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
}
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ffe9 	bl	8002bac <_ZN11ModeManagerD1Ev>
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f002 fa39 	bl	8005052 <_ZdlPv>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <_Z41__static_initialization_and_destruction_0ii>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d10c      	bne.n	8002c16 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d107      	bne.n	8002c16 <_Z41__static_initialization_and_destruction_0ii+0x2a>
ModeManager modeManager;
 8002c06:	4806      	ldr	r0, [pc, #24]	; (8002c20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002c08:	f7ff ffc0 	bl	8002b8c <_ZN11ModeManagerC1Ev>
 8002c0c:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002c0e:	4906      	ldr	r1, [pc, #24]	; (8002c28 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002c12:	f002 fa20 	bl	8005056 <__aeabi_atexit>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000204 	.word	0x20000204
 8002c24:	20000000 	.word	0x20000000
 8002c28:	08002bad 	.word	0x08002bad

08002c2c <_GLOBAL__sub_I_modeManager>:
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c34:	2001      	movs	r0, #1
 8002c36:	f7ff ffd9 	bl	8002bec <_Z41__static_initialization_and_destruction_0ii>
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002c3c:	4824      	ldr	r0, [pc, #144]	; (8002cd0 <MX_ADC1_Init+0x94>)
 8002c3e:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <MX_ADC1_Init+0x98>)
{
 8002c40:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8002c42:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c48:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c4a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c4e:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c50:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c52:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002c54:	2304      	movs	r3, #4
{
 8002c56:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c58:	9401      	str	r4, [sp, #4]
 8002c5a:	9402      	str	r4, [sp, #8]
 8002c5c:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c5e:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c60:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c62:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002c64:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c66:	f000 fe35 	bl	80038d4 <HAL_ADC_Init>
 8002c6a:	b108      	cbz	r0, 8002c70 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8002c6c:	f000 fa5e 	bl	800312c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002c70:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c72:	a901      	add	r1, sp, #4
 8002c74:	4816      	ldr	r0, [pc, #88]	; (8002cd0 <MX_ADC1_Init+0x94>)
  sConfig.Channel = ADC_CHANNEL_0;
 8002c76:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c78:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002c7a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c7c:	f000 fc5c 	bl	8003538 <HAL_ADC_ConfigChannel>
 8002c80:	b108      	cbz	r0, 8002c86 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8002c82:	f000 fa53 	bl	800312c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c8a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c8c:	a901      	add	r1, sp, #4
 8002c8e:	4810      	ldr	r0, [pc, #64]	; (8002cd0 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c90:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c92:	f000 fc51 	bl	8003538 <HAL_ADC_ConfigChannel>
 8002c96:	b108      	cbz	r0, 8002c9c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8002c98:	f000 fa48 	bl	800312c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002c9c:	230e      	movs	r3, #14
 8002c9e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002ca0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ca2:	a901      	add	r1, sp, #4
 8002ca4:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002ca6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ca8:	f000 fc46 	bl	8003538 <HAL_ADC_ConfigChannel>
 8002cac:	b108      	cbz	r0, 8002cb2 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8002cae:	f000 fa3d 	bl	800312c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002cb2:	230f      	movs	r3, #15
 8002cb4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002cb6:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <MX_ADC1_Init+0x94>)
 8002cba:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002cbe:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cc0:	f000 fc3a 	bl	8003538 <HAL_ADC_ConfigChannel>
 8002cc4:	b108      	cbz	r0, 8002cca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002cc6:	f000 fa31 	bl	800312c <Error_Handler>
  }

}
 8002cca:	b005      	add	sp, #20
 8002ccc:	bd30      	pop	{r4, r5, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000021c 	.word	0x2000021c
 8002cd4:	40012400 	.word	0x40012400

08002cd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	2210      	movs	r2, #16
{
 8002cda:	b530      	push	{r4, r5, lr}
 8002cdc:	4605      	mov	r5, r0
 8002cde:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	eb0d 0002 	add.w	r0, sp, r2
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f003 ff1b 	bl	8006b20 <memset>
  if(adcHandle->Instance==ADC1)
 8002cea:	682a      	ldr	r2, [r5, #0]
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_ADC_MspInit+0xac>)
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d145      	bne.n	8002d7e <HAL_ADC_MspInit+0xa6>
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 8002cf2:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cf4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002cf8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d00:	619a      	str	r2, [r3, #24]
 8002d02:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d04:	4820      	ldr	r0, [pc, #128]	; (8002d88 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d06:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002d0a:	9201      	str	r2, [sp, #4]
 8002d0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	f042 0204 	orr.w	r2, r2, #4
 8002d14:	619a      	str	r2, [r3, #24]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	f002 0204 	and.w	r2, r2, #4
 8002d1c:	9202      	str	r2, [sp, #8]
 8002d1e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	f042 0210 	orr.w	r2, r2, #16
 8002d26:	619a      	str	r2, [r3, #24]
 8002d28:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 8002d2a:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	9303      	str	r3, [sp, #12]
 8002d32:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d34:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d36:	f001 fb0d 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 8002d3a:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3c:	4813      	ldr	r0, [pc, #76]	; (8002d8c <HAL_ADC_MspInit+0xb4>)
 8002d3e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 8002d40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d42:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d44:	f001 fb06 	bl	8004354 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d48:	4c11      	ldr	r4, [pc, #68]	; (8002d90 <HAL_ADC_MspInit+0xb8>)
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d4c:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 8002d4e:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d50:	2300      	movs	r3, #0
 8002d52:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d54:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d5e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d64:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d66:	2320      	movs	r3, #32
 8002d68:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d70:	f001 f996 	bl	80040a0 <HAL_DMA_Init>
 8002d74:	b108      	cbz	r0, 8002d7a <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 8002d76:	f000 f9d9 	bl	800312c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002d7a:	622c      	str	r4, [r5, #32]
 8002d7c:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d7e:	b009      	add	sp, #36	; 0x24
 8002d80:	bd30      	pop	{r4, r5, pc}
 8002d82:	bf00      	nop
 8002d84:	40012400 	.word	0x40012400
 8002d88:	40010800 	.word	0x40010800
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	2000024c 	.word	0x2000024c
 8002d94:	40020008 	.word	0x40020008

08002d98 <MX_CAN_Init>:

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002d98:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Instance = CAN1;
 8002d9c:	480e      	ldr	r0, [pc, #56]	; (8002dd8 <MX_CAN_Init+0x40>)
{
 8002d9e:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 5;
 8002da0:	f04f 0e05 	mov.w	lr, #5
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002da4:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002da6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.Prescaler = 5;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <MX_CAN_Init+0x44>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002dac:	6142      	str	r2, [r0, #20]
  hcan.Init.Prescaler = 5;
 8002dae:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
 8002db2:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002db4:	2300      	movs	r3, #0
  hcan.Init.AutoRetransmission = ENABLE;
 8002db6:	76c2      	strb	r2, [r0, #27]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002db8:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002dba:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002dbc:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002dbe:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002dc0:	7683      	strb	r3, [r0, #26]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002dc2:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002dc4:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002dc6:	f000 fe0f 	bl	80039e8 <HAL_CAN_Init>
 8002dca:	b118      	cbz	r0, 8002dd4 <MX_CAN_Init+0x3c>
  {
    Error_Handler();
  }

}
 8002dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002dd0:	f000 b9ac 	b.w	800312c <Error_Handler>
 8002dd4:	bd08      	pop	{r3, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000290 	.word	0x20000290
 8002ddc:	40006400 	.word	0x40006400

08002de0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002de0:	b510      	push	{r4, lr}
 8002de2:	4604      	mov	r4, r0
 8002de4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de6:	2210      	movs	r2, #16
 8002de8:	2100      	movs	r1, #0
 8002dea:	a802      	add	r0, sp, #8
 8002dec:	f003 fe98 	bl	8006b20 <memset>
  if(canHandle->Instance==CAN1)
 8002df0:	6822      	ldr	r2, [r4, #0]
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_CAN_MspInit+0x98>)
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d13d      	bne.n	8002e74 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002df8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002dfc:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8002dfe:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002e00:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002e04:	61da      	str	r2, [r3, #28]
 8002e06:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8002e08:	481c      	ldr	r0, [pc, #112]	; (8002e7c <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002e0a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	f042 0204 	orr.w	r2, r2, #4
 8002e18:	619a      	str	r2, [r3, #24]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 8002e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e28:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f001 fa93 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 8002e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e32:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e38:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8002e3a:	a902      	add	r1, sp, #8
 8002e3c:	480f      	ldr	r0, [pc, #60]	; (8002e7c <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8002e40:	f001 fa88 	bl	8004354 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8002e44:	2200      	movs	r2, #0
 8002e46:	2013      	movs	r0, #19
 8002e48:	4611      	mov	r1, r2
 8002e4a:	f001 f8d1 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002e4e:	2013      	movs	r0, #19
 8002e50:	f001 f902 	bl	8004058 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2014      	movs	r0, #20
 8002e58:	4611      	mov	r1, r2
 8002e5a:	f001 f8c9 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002e5e:	2014      	movs	r0, #20
 8002e60:	f001 f8fa 	bl	8004058 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2015      	movs	r0, #21
 8002e68:	4611      	mov	r1, r2
 8002e6a:	f001 f8c1 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002e6e:	2015      	movs	r0, #21
 8002e70:	f001 f8f2 	bl	8004058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002e74:	b006      	add	sp, #24
 8002e76:	bd10      	pop	{r4, pc}
 8002e78:	40006400 	.word	0x40006400
 8002e7c:	40010800 	.word	0x40010800

08002e80 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <MX_DMA_Init+0x4c>)
{
 8002e82:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e84:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e86:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e8e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e90:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e92:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e9c:	f001 f8a8 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ea0:	200b      	movs	r0, #11
 8002ea2:	f001 f8d9 	bl	8004058 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	200e      	movs	r0, #14
 8002eaa:	4611      	mov	r1, r2
 8002eac:	f001 f8a0 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002eb0:	200e      	movs	r0, #14
 8002eb2:	f001 f8d1 	bl	8004058 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	200f      	movs	r0, #15
 8002eba:	4611      	mov	r1, r2
 8002ebc:	f001 f898 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002ec0:	200f      	movs	r0, #15
 8002ec2:	f001 f8c9 	bl	8004058 <HAL_NVIC_EnableIRQ>

}
 8002ec6:	b003      	add	sp, #12
 8002ec8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f04f 0810 	mov.w	r8, #16
{
 8002ed8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eda:	4642      	mov	r2, r8
 8002edc:	2100      	movs	r1, #0
 8002ede:	eb0d 0008 	add.w	r0, sp, r8
 8002ee2:	f003 fe1d 	bl	8006b20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee6:	4b48      	ldr	r3, [pc, #288]	; (8003008 <MX_GPIO_Init+0x138>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002ee8:	4f48      	ldr	r7, [pc, #288]	; (800300c <MX_GPIO_Init+0x13c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eea:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 8002eec:	4d48      	ldr	r5, [pc, #288]	; (8003010 <MX_GPIO_Init+0x140>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eee:	ea42 0208 	orr.w	r2, r2, r8
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002ef6:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef8:	ea02 0208 	and.w	r2, r2, r8
 8002efc:	9200      	str	r2, [sp, #0]
 8002efe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f00:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002f02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f06:	f042 0220 	orr.w	r2, r2, #32
 8002f0a:	619a      	str	r2, [r3, #24]
 8002f0c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
                          |BUTTON_4_Pin|BUTTON_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f10:	f002 0220 	and.w	r2, r2, #32
 8002f14:	9201      	str	r2, [sp, #4]
 8002f16:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f18:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1a:	f04f 0a01 	mov.w	sl, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	f042 0204 	orr.w	r2, r2, #4
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	f002 0204 	and.w	r2, r2, #4
 8002f2e:	9202      	str	r2, [sp, #8]
 8002f30:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PC15 PC0 PC1 PC2 
                           PC3 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f34:	2603      	movs	r6, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	619a      	str	r2, [r3, #24]
 8002f3c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002f3e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	9303      	str	r3, [sp, #12]
 8002f46:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002f48:	f001 faf0 	bl	800452c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	2201      	movs	r2, #1
 8002f50:	2104      	movs	r1, #4
 8002f52:	f001 faeb 	bl	800452c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BL_CTRL_Pin|LED_Pin|GPIO18_Pin|GPIO4_Pin, GPIO_PIN_RESET);
 8002f56:	2200      	movs	r2, #0
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f248 1128 	movw	r1, #33064	; 0x8128
 8002f5e:	f001 fae5 	bl	800452c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
 8002f62:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f66:	eb0d 0108 	add.w	r1, sp, r8
 8002f6a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
 8002f6c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f72:	f001 f9ef 	bl	8004354 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8002f76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002f7a:	eb0d 0108 	add.w	r1, sp, r8
 8002f7e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8002f80:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f82:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002f8c:	f001 f9e2 	bl	8004354 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002f90:	f248 03cf 	movw	r3, #32975	; 0x80cf
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f94:	eb0d 0108 	add.w	r1, sp, r8
 8002f98:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002f9a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f9c:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9e:	f001 f9d9 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = TP_CS_Pin|BL_CTRL_Pin|LED_Pin|GPIO18_Pin 
 8002fa2:	f248 132c 	movw	r3, #33068	; 0x812c
                          |GPIO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa6:	eb0d 0108 	add.w	r1, sp, r8
 8002faa:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TP_CS_Pin|BL_CTRL_Pin|LED_Pin|GPIO18_Pin 
 8002fac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fae:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f001 f9cc 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002fbc:	eb0d 0108 	add.w	r1, sp, r8
 8002fc0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8002fc2:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f001 f9c3 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fce:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd0:	eb0d 0108 	add.w	r1, sp, r8
 8002fd4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fd6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fd8:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fda:	f001 f9bb 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8002fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe2:	eb0d 0108 	add.w	r1, sp, r8
 8002fe6:	480b      	ldr	r0, [pc, #44]	; (8003014 <MX_GPIO_Init+0x144>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8002fe8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fea:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	f001 f9b2 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ff0:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff2:	eb0d 0108 	add.w	r1, sp, r8
 8002ff6:	4808      	ldr	r0, [pc, #32]	; (8003018 <MX_GPIO_Init+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ff8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ffa:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffc:	f001 f9aa 	bl	8004354 <HAL_GPIO_Init>

}
 8003000:	b008      	add	sp, #32
 8003002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	40011000 	.word	0x40011000
 8003010:	40010800 	.word	0x40010800
 8003014:	40010c00 	.word	0x40010c00
 8003018:	40011400 	.word	0x40011400

0800301c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003020:	f000 fa2a 	bl	8003478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003024:	f000 f81c 	bl	8003060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003028:	f7ff ff52 	bl	8002ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 800302c:	f7ff ff28 	bl	8002e80 <MX_DMA_Init>
  MX_ADC1_Init();
 8003030:	f7ff fe04 	bl	8002c3c <MX_ADC1_Init>
  MX_CAN_Init();
 8003034:	f7ff feb0 	bl	8002d98 <MX_CAN_Init>
//  MX_SPI1_Init();
  MX_TIM3_Init();
 8003038:	f000 f908 	bl	800324c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800303c:	f000 f970 	bl	8003320 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  joystick.init();
 8003040:	4804      	ldr	r0, [pc, #16]	; (8003054 <main+0x38>)
 8003042:	f7ff fbbf 	bl	80027c4 <_ZN8Joystick4initEv>
  modeManager.init();
 8003046:	4804      	ldr	r0, [pc, #16]	; (8003058 <main+0x3c>)
 8003048:	f7ff fc84 	bl	8002954 <_ZN11ModeManager4initEv>
  canManager.init();
 800304c:	4803      	ldr	r0, [pc, #12]	; (800305c <main+0x40>)
 800304e:	f7ff f9bd 	bl	80023cc <_ZN10CanManager4initEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003052:	e7fe      	b.n	8003052 <main+0x36>
 8003054:	20000114 	.word	0x20000114
 8003058:	20000204 	.word	0x20000204
 800305c:	2000009c 	.word	0x2000009c

08003060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b096      	sub	sp, #88	; 0x58
 8003064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003066:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800306a:	2228      	movs	r2, #40	; 0x28
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f003 fd56 	bl	8006b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003094:	2302      	movs	r3, #2
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003098:	2301      	movs	r3, #1
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800309c:	2310      	movs	r3, #16
 800309e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030a0:	2302      	movs	r3, #2
 80030a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80030a4:	2300      	movs	r3, #0
 80030a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80030a8:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 fa40 	bl	8004538 <HAL_RCC_OscConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80030c8:	f000 f830 	bl	800312c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030cc:	230f      	movs	r3, #15
 80030ce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030d0:	2302      	movs	r3, #2
 80030d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 fc00 	bl	80048ec <HAL_RCC_ClockConfig>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80030fc:	f000 f816 	bl	800312c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003100:	2302      	movs	r3, #2
 8003102:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fcac 	bl	8004a68 <HAL_RCCEx_PeriphCLKConfig>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003120:	f000 f804 	bl	800312c <Error_Handler>
  }
}
 8003124:	bf00      	nop
 8003126:	3758      	adds	r7, #88	; 0x58
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_MspInit+0x3c>)
{
 800313a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	619a      	str	r2, [r3, #24]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	f002 0201 	and.w	r2, r2, #1
 800314a:	9200      	str	r2, [sp, #0]
 800314c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003154:	61da      	str	r2, [r3, #28]
 8003156:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003158:	4a07      	ldr	r2, [pc, #28]	; (8003178 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003162:	6853      	ldr	r3, [r2, #4]
 8003164:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800316c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316e:	b002      	add	sp, #8
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	40010000 	.word	0x40010000

0800317c <NMI_Handler>:
 800317c:	4770      	bx	lr

0800317e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800317e:	e7fe      	b.n	800317e <HardFault_Handler>

08003180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003180:	e7fe      	b.n	8003180 <MemManage_Handler>

08003182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003182:	e7fe      	b.n	8003182 <BusFault_Handler>

08003184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003184:	e7fe      	b.n	8003184 <UsageFault_Handler>

08003186 <SVC_Handler>:
 8003186:	4770      	bx	lr

08003188 <DebugMon_Handler>:
 8003188:	4770      	bx	lr

0800318a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318a:	4770      	bx	lr

0800318c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800318c:	f000 b986 	b.w	800349c <HAL_IncTick>

08003190 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003190:	4801      	ldr	r0, [pc, #4]	; (8003198 <DMA1_Channel1_IRQHandler+0x8>)
 8003192:	f001 b803 	b.w	800419c <HAL_DMA_IRQHandler>
 8003196:	bf00      	nop
 8003198:	2000024c 	.word	0x2000024c

0800319c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800319c:	4801      	ldr	r0, [pc, #4]	; (80031a4 <DMA1_Channel4_IRQHandler+0x8>)
 800319e:	f000 bffd 	b.w	800419c <HAL_DMA_IRQHandler>
 80031a2:	bf00      	nop
 80031a4:	20000338 	.word	0x20000338

080031a8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031a8:	4801      	ldr	r0, [pc, #4]	; (80031b0 <DMA1_Channel5_IRQHandler+0x8>)
 80031aa:	f000 bff7 	b.w	800419c <HAL_DMA_IRQHandler>
 80031ae:	bf00      	nop
 80031b0:	2000037c 	.word	0x2000037c

080031b4 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <CAN1_RX1_IRQHandler+0x8>)
 80031b6:	f000 be0a 	b.w	8003dce <HAL_CAN_IRQHandler>
 80031ba:	bf00      	nop
 80031bc:	20000290 	.word	0x20000290

080031c0 <USB_LP_CAN1_RX0_IRQHandler>:
 80031c0:	f7ff bff8 	b.w	80031b4 <CAN1_RX1_IRQHandler>

080031c4 <USB_HP_CAN1_TX_IRQHandler>:
 80031c4:	f7ff bff6 	b.w	80031b4 <CAN1_RX1_IRQHandler>

080031c8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031c8:	4801      	ldr	r0, [pc, #4]	; (80031d0 <TIM3_IRQHandler+0x8>)
 80031ca:	f001 bcee 	b.w	8004baa <HAL_TIM_IRQHandler>
 80031ce:	bf00      	nop
 80031d0:	200002f8 	.word	0x200002f8

080031d4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031d4:	4801      	ldr	r0, [pc, #4]	; (80031dc <TIM4_IRQHandler+0x8>)
 80031d6:	f001 bce8 	b.w	8004baa <HAL_TIM_IRQHandler>
 80031da:	bf00      	nop
 80031dc:	200002b8 	.word	0x200002b8

080031e0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80031e0:	2001      	movs	r0, #1
 80031e2:	4770      	bx	lr

080031e4 <_kill>:

int _kill(int pid, int sig)
{
 80031e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80031e6:	f003 fc69 	bl	8006abc <__errno>
 80031ea:	2316      	movs	r3, #22
 80031ec:	6003      	str	r3, [r0, #0]
	return -1;
}
 80031ee:	f04f 30ff 	mov.w	r0, #4294967295
 80031f2:	bd08      	pop	{r3, pc}

080031f4 <_exit>:

void _exit (int status)
{
 80031f4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80031f6:	f003 fc61 	bl	8006abc <__errno>
 80031fa:	2316      	movs	r3, #22
 80031fc:	6003      	str	r3, [r0, #0]
 80031fe:	e7fe      	b.n	80031fe <_exit+0xa>

08003200 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <SystemInit+0x40>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <SystemInit+0x44>)
 800320e:	400a      	ands	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003218:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800321c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003224:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800322c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800322e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003232:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003234:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <SystemInit+0x48>)
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	f8ff0000 	.word	0xf8ff0000
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800324c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800324e:	2210      	movs	r2, #16
 8003250:	2100      	movs	r1, #0
 8003252:	a802      	add	r0, sp, #8
 8003254:	f003 fc64 	bl	8006b20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003258:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 800-1;
 800325a:	f240 321f 	movw	r2, #799	; 0x31f
  htim3.Instance = TIM3;
 800325e:	4814      	ldr	r0, [pc, #80]	; (80032b0 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 800-1;
 8003260:	4914      	ldr	r1, [pc, #80]	; (80032b4 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	9301      	str	r3, [sp, #4]
  htim3.Init.Prescaler = 800-1;
 8003266:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 800326c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003270:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003272:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 8003274:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003276:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003278:	f001 fd86 	bl	8004d88 <HAL_TIM_Base_Init>
 800327c:	b108      	cbz	r0, 8003282 <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 800327e:	f7ff ff55 	bl	800312c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003286:	a902      	add	r1, sp, #8
 8003288:	4809      	ldr	r0, [pc, #36]	; (80032b0 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800328a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800328c:	f001 fda0 	bl	8004dd0 <HAL_TIM_ConfigClockSource>
 8003290:	b108      	cbz	r0, 8003296 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 8003292:	f7ff ff4b 	bl	800312c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003296:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003298:	4669      	mov	r1, sp
 800329a:	4805      	ldr	r0, [pc, #20]	; (80032b0 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800329c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800329e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032a0:	f001 fe2a 	bl	8004ef8 <HAL_TIMEx_MasterConfigSynchronization>
 80032a4:	b108      	cbz	r0, 80032aa <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 80032a6:	f7ff ff41 	bl	800312c <Error_Handler>
  }

}
 80032aa:	b007      	add	sp, #28
 80032ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b0:	200002f8 	.word	0x200002f8
 80032b4:	40000400 	.word	0x40000400

080032b8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032b8:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 80032ba:	6803      	ldr	r3, [r0, #0]
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <HAL_TIM_Base_MspInit+0x5c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d114      	bne.n	80032ec <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_TIM_Base_MspInit+0x60>)

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032c4:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	f042 0202 	orr.w	r2, r2, #2
 80032cc:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032d0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032d2:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032dc:	f000 fe88 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032e0:	201d      	movs	r0, #29
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032e2:	f000 feb9 	bl	8004058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80032e6:	b003      	add	sp, #12
 80032e8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 80032ec:	4a0b      	ldr	r2, [pc, #44]	; (800331c <HAL_TIM_Base_MspInit+0x64>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d1f9      	bne.n	80032e6 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80032f4:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	f042 0204 	orr.w	r2, r2, #4
 80032fc:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80032fe:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003300:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003302:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800330c:	f000 fe70 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003310:	201e      	movs	r0, #30
 8003312:	e7e6      	b.n	80032e2 <HAL_TIM_Base_MspInit+0x2a>
 8003314:	40000400 	.word	0x40000400
 8003318:	40021000 	.word	0x40021000
 800331c:	40000800 	.word	0x40000800

08003320 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003320:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003322:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8003326:	480a      	ldr	r0, [pc, #40]	; (8003350 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800332a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 800332c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003330:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003332:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003334:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003336:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003338:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800333a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800333c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800333e:	f001 fe35 	bl	8004fac <HAL_UART_Init>
 8003342:	b118      	cbz	r0, 800334c <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003348:	f7ff bef0 	b.w	800312c <Error_Handler>
 800334c:	bd08      	pop	{r3, pc}
 800334e:	bf00      	nop
 8003350:	200003c0 	.word	0x200003c0
 8003354:	40013800 	.word	0x40013800

08003358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4606      	mov	r6, r0
 800335c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335e:	2210      	movs	r2, #16
 8003360:	2100      	movs	r1, #0
 8003362:	a802      	add	r0, sp, #8
 8003364:	f003 fbdc 	bl	8006b20 <memset>
  if(uartHandle->Instance==USART1)
 8003368:	6832      	ldr	r2, [r6, #0]
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_UART_MspInit+0xc0>)
 800336c:	429a      	cmp	r2, r3
 800336e:	d151      	bne.n	8003414 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003370:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003374:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART1_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003376:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8003378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800337c:	619a      	str	r2, [r3, #24]
 800337e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003380:	4826      	ldr	r0, [pc, #152]	; (800341c <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003382:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003386:	9200      	str	r2, [sp, #0]
 8003388:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800338c:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338e:	f042 0204 	orr.w	r2, r2, #4
 8003392:	619a      	str	r2, [r3, #24]
 8003394:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003396:	4c22      	ldr	r4, [pc, #136]	; (8003420 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART1_TX_Pin;
 80033a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 80033ae:	f000 ffd1 	bl	8004354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 80033b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 80033b6:	4819      	ldr	r0, [pc, #100]	; (800341c <HAL_UART_MspInit+0xc4>)
 80033b8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 80033ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033bc:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 80033c0:	f000 ffc8 	bl	8004354 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_UART_MspInit+0xcc>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033c6:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033c8:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033cc:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ce:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033d0:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033d2:	6125      	str	r5, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033d4:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80033d6:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033d8:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033da:	f000 fe61 	bl	80040a0 <HAL_DMA_Init>
 80033de:	b108      	cbz	r0, 80033e4 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 80033e0:	f7ff fea4 	bl	800312c <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033e4:	f04f 0c10 	mov.w	ip, #16
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_UART_MspInit+0xd0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80033ea:	6374      	str	r4, [r6, #52]	; 0x34
 80033ec:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80033ee:	4c0f      	ldr	r4, [pc, #60]	; (800342c <HAL_UART_MspInit+0xd4>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033f0:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033f2:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f6:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033f8:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033fa:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033fc:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033fe:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003400:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003402:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003404:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003406:	f000 fe4b 	bl	80040a0 <HAL_DMA_Init>
 800340a:	b108      	cbz	r0, 8003410 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 800340c:	f7ff fe8e 	bl	800312c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003410:	6334      	str	r4, [r6, #48]	; 0x30
 8003412:	6266      	str	r6, [r4, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003414:	b006      	add	sp, #24
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	40013800 	.word	0x40013800
 800341c:	40010800 	.word	0x40010800
 8003420:	2000037c 	.word	0x2000037c
 8003424:	40020058 	.word	0x40020058
 8003428:	40020044 	.word	0x40020044
 800342c:	20000338 	.word	0x20000338

08003430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003430:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_InitTick+0x3c>)
{
 8003434:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003436:	7818      	ldrb	r0, [r3, #0]
 8003438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800343c:	fbb3 f3f0 	udiv	r3, r3, r0
 8003440:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <HAL_InitTick+0x40>)
 8003442:	6810      	ldr	r0, [r2, #0]
 8003444:	fbb0 f0f3 	udiv	r0, r0, r3
 8003448:	f000 fe14 	bl	8004074 <HAL_SYSTICK_Config>
 800344c:	4604      	mov	r4, r0
 800344e:	b958      	cbnz	r0, 8003468 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003450:	2d0f      	cmp	r5, #15
 8003452:	d809      	bhi.n	8003468 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003454:	4602      	mov	r2, r0
 8003456:	4629      	mov	r1, r5
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f000 fdc8 	bl	8003ff0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_InitTick+0x44>)
 8003462:	4620      	mov	r0, r4
 8003464:	601d      	str	r5, [r3, #0]
 8003466:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003468:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	20000008 	.word	0x20000008
 8003470:	20000004 	.word	0x20000004
 8003474:	2000000c 	.word	0x2000000c

08003478 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003478:	4a07      	ldr	r2, [pc, #28]	; (8003498 <HAL_Init+0x20>)
{
 800347a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800347c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800347e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003480:	f043 0310 	orr.w	r3, r3, #16
 8003484:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003486:	f000 fda1 	bl	8003fcc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800348a:	2000      	movs	r0, #0
 800348c:	f7ff ffd0 	bl	8003430 <HAL_InitTick>
  HAL_MspInit();
 8003490:	f7ff fe52 	bl	8003138 <HAL_MspInit>
}
 8003494:	2000      	movs	r0, #0
 8003496:	bd08      	pop	{r3, pc}
 8003498:	40022000 	.word	0x40022000

0800349c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800349c:	4a03      	ldr	r2, [pc, #12]	; (80034ac <HAL_IncTick+0x10>)
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <HAL_IncTick+0x14>)
 80034a0:	6811      	ldr	r1, [r2, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	440b      	add	r3, r1
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000400 	.word	0x20000400
 80034b0:	20000008 	.word	0x20000008

080034b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80034b4:	4b01      	ldr	r3, [pc, #4]	; (80034bc <HAL_GetTick+0x8>)
 80034b6:	6818      	ldr	r0, [r3, #0]
}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000400 	.word	0x20000400

080034c0 <HAL_ADC_ConvCpltCallback>:
 80034c0:	4770      	bx	lr

080034c2 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80034c4:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c8:	f012 0f50 	tst.w	r2, #80	; 0x50
 80034cc:	d11b      	bne.n	8003506 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	6892      	ldr	r2, [r2, #8]
 80034da:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80034de:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80034e2:	d10c      	bne.n	80034fe <ADC_DMAConvCplt+0x3c>
 80034e4:	7b1a      	ldrb	r2, [r3, #12]
 80034e6:	b952      	cbnz	r2, 80034fe <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f2:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034f4:	bf5e      	ittt	pl
 80034f6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80034f8:	f042 0201 	orrpl.w	r2, r2, #1
 80034fc:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff ffde 	bl	80034c0 <HAL_ADC_ConvCpltCallback>
 8003504:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003506:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4718      	bx	r3

08003510 <HAL_ADC_ConvHalfCpltCallback>:
 8003510:	4770      	bx	lr

08003512 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003512:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003514:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003516:	f7ff fffb 	bl	8003510 <HAL_ADC_ConvHalfCpltCallback>
 800351a:	bd08      	pop	{r3, pc}

0800351c <HAL_ADC_ErrorCallback>:
{
 800351c:	4770      	bx	lr

0800351e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800351e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003520:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003522:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003528:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800352a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003532:	f7ff fff3 	bl	800351c <HAL_ADC_ErrorCallback>
 8003536:	bd08      	pop	{r3, pc}

08003538 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8003538:	2300      	movs	r3, #0
{ 
 800353a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800353c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800353e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003542:	2b01      	cmp	r3, #1
 8003544:	d074      	beq.n	8003630 <HAL_ADC_ConfigChannel+0xf8>
 8003546:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8003548:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800354a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800354e:	2d06      	cmp	r5, #6
 8003550:	6802      	ldr	r2, [r0, #0]
 8003552:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8003556:	680c      	ldr	r4, [r1, #0]
 8003558:	d825      	bhi.n	80035a6 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800355a:	442b      	add	r3, r5
 800355c:	251f      	movs	r5, #31
 800355e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8003560:	3b05      	subs	r3, #5
 8003562:	409d      	lsls	r5, r3
 8003564:	ea26 0505 	bic.w	r5, r6, r5
 8003568:	fa04 f303 	lsl.w	r3, r4, r3
 800356c:	432b      	orrs	r3, r5
 800356e:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003570:	2c09      	cmp	r4, #9
 8003572:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8003576:	688d      	ldr	r5, [r1, #8]
 8003578:	d92f      	bls.n	80035da <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800357a:	2607      	movs	r6, #7
 800357c:	4423      	add	r3, r4
 800357e:	68d1      	ldr	r1, [r2, #12]
 8003580:	3b1e      	subs	r3, #30
 8003582:	409e      	lsls	r6, r3
 8003584:	ea21 0106 	bic.w	r1, r1, r6
 8003588:	fa05 f303 	lsl.w	r3, r5, r3
 800358c:	430b      	orrs	r3, r1
 800358e:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003590:	f1a4 0310 	sub.w	r3, r4, #16
 8003594:	2b01      	cmp	r3, #1
 8003596:	d92b      	bls.n	80035f0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003598:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800359a:	2200      	movs	r2, #0
 800359c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	b002      	add	sp, #8
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80035a6:	2d0c      	cmp	r5, #12
 80035a8:	d80b      	bhi.n	80035c2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80035aa:	442b      	add	r3, r5
 80035ac:	251f      	movs	r5, #31
 80035ae:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80035b0:	3b23      	subs	r3, #35	; 0x23
 80035b2:	409d      	lsls	r5, r3
 80035b4:	ea26 0505 	bic.w	r5, r6, r5
 80035b8:	fa04 f303 	lsl.w	r3, r4, r3
 80035bc:	432b      	orrs	r3, r5
 80035be:	6313      	str	r3, [r2, #48]	; 0x30
 80035c0:	e7d6      	b.n	8003570 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80035c2:	442b      	add	r3, r5
 80035c4:	251f      	movs	r5, #31
 80035c6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80035c8:	3b41      	subs	r3, #65	; 0x41
 80035ca:	409d      	lsls	r5, r3
 80035cc:	ea26 0505 	bic.w	r5, r6, r5
 80035d0:	fa04 f303 	lsl.w	r3, r4, r3
 80035d4:	432b      	orrs	r3, r5
 80035d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035d8:	e7ca      	b.n	8003570 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035da:	2607      	movs	r6, #7
 80035dc:	6911      	ldr	r1, [r2, #16]
 80035de:	4423      	add	r3, r4
 80035e0:	409e      	lsls	r6, r3
 80035e2:	ea21 0106 	bic.w	r1, r1, r6
 80035e6:	fa05 f303 	lsl.w	r3, r5, r3
 80035ea:	430b      	orrs	r3, r1
 80035ec:	6113      	str	r3, [r2, #16]
 80035ee:	e7cf      	b.n	8003590 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_ADC_ConfigChannel+0xfc>)
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d116      	bne.n	8003624 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035f6:	6893      	ldr	r3, [r2, #8]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	d4cd      	bmi.n	8003598 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035fc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035fe:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003604:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003606:	d1c7      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_ADC_ConfigChannel+0x100>)
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <HAL_ADC_ConfigChannel+0x104>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003612:	230a      	movs	r3, #10
 8003614:	4353      	muls	r3, r2
            wait_loop_index--;
 8003616:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003618:	9b01      	ldr	r3, [sp, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0bc      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800361e:	9b01      	ldr	r3, [sp, #4]
 8003620:	3b01      	subs	r3, #1
 8003622:	e7f8      	b.n	8003616 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003624:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003626:	f043 0320 	orr.w	r3, r3, #32
 800362a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e7b4      	b.n	800359a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8003630:	2302      	movs	r3, #2
 8003632:	e7b5      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x68>
 8003634:	40012400 	.word	0x40012400
 8003638:	20000004 	.word	0x20000004
 800363c:	000f4240 	.word	0x000f4240

08003640 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8003640:	2300      	movs	r3, #0
{
 8003642:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8003644:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003646:	6803      	ldr	r3, [r0, #0]
{
 8003648:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	07d2      	lsls	r2, r2, #31
 800364e:	d502      	bpl.n	8003656 <ADC_Enable+0x16>
  return HAL_OK;
 8003650:	2000      	movs	r0, #0
}
 8003652:	b002      	add	sp, #8
 8003654:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <ADC_Enable+0x68>)
 8003660:	4a12      	ldr	r2, [pc, #72]	; (80036ac <ADC_Enable+0x6c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8003668:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800366a:	9b01      	ldr	r3, [sp, #4]
 800366c:	b9c3      	cbnz	r3, 80036a0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800366e:	f7ff ff21 	bl	80034b4 <HAL_GetTick>
 8003672:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	689d      	ldr	r5, [r3, #8]
 8003678:	f015 0501 	ands.w	r5, r5, #1
 800367c:	d1e8      	bne.n	8003650 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800367e:	f7ff ff19 	bl	80034b4 <HAL_GetTick>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	2802      	cmp	r0, #2
 8003686:	d9f5      	bls.n	8003674 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003688:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800368a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	f043 0310 	orr.w	r3, r3, #16
 8003692:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003694:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8003696:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800369e:	e7d8      	b.n	8003652 <ADC_Enable+0x12>
      wait_loop_index--;
 80036a0:	9b01      	ldr	r3, [sp, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	e7e0      	b.n	8003668 <ADC_Enable+0x28>
 80036a6:	bf00      	nop
 80036a8:	20000004 	.word	0x20000004
 80036ac:	000f4240 	.word	0x000f4240

080036b0 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80036b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80036b4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80036b6:	2b01      	cmp	r3, #1
{
 80036b8:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80036ba:	d054      	beq.n	8003766 <HAL_ADC_Start+0xb6>
 80036bc:	2301      	movs	r3, #1
 80036be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80036c2:	f7ff ffbd 	bl	8003640 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d149      	bne.n	800375e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80036ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036cc:	4a27      	ldr	r2, [pc, #156]	; (800376c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80036ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036da:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	4293      	cmp	r3, r2
 80036e0:	d104      	bne.n	80036ec <HAL_ADC_Start+0x3c>
 80036e2:	4923      	ldr	r1, [pc, #140]	; (8003770 <HAL_ADC_Start+0xc0>)
 80036e4:	684a      	ldr	r2, [r1, #4]
 80036e6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80036ea:	d12e      	bne.n	800374a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036ee:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80036f2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036f4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80036f6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036f8:	bf41      	itttt	mi
 80036fa:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80036fc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8003700:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8003704:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003706:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800370c:	bf1c      	itt	ne
 800370e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8003710:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003714:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8003716:	2200      	movs	r2, #0
 8003718:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800371c:	f06f 0202 	mvn.w	r2, #2
 8003720:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003728:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800372c:	d113      	bne.n	8003756 <HAL_ADC_Start+0xa6>
 800372e:	4a0f      	ldr	r2, [pc, #60]	; (800376c <HAL_ADC_Start+0xbc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d105      	bne.n	8003740 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003734:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003738:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800373a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800373e:	d10a      	bne.n	8003756 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800374a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800374c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003750:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003752:	684a      	ldr	r2, [r1, #4]
 8003754:	e7cf      	b.n	80036f6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800375c:	e7f3      	b.n	8003746 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800375e:	2300      	movs	r3, #0
 8003760:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003764:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003766:	2002      	movs	r0, #2
}
 8003768:	bd10      	pop	{r4, pc}
 800376a:	bf00      	nop
 800376c:	40012800 	.word	0x40012800
 8003770:	40012400 	.word	0x40012400

08003774 <HAL_ADC_Start_DMA>:
{
 8003774:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8003778:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800377a:	4b40      	ldr	r3, [pc, #256]	; (800387c <HAL_ADC_Start_DMA+0x108>)
 800377c:	6802      	ldr	r2, [r0, #0]
{
 800377e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003780:	429a      	cmp	r2, r3
{
 8003782:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003784:	d002      	beq.n	800378c <HAL_ADC_Start_DMA+0x18>
 8003786:	493e      	ldr	r1, [pc, #248]	; (8003880 <HAL_ADC_Start_DMA+0x10c>)
 8003788:	428a      	cmp	r2, r1
 800378a:	d103      	bne.n	8003794 <HAL_ADC_Start_DMA+0x20>
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003792:	d16e      	bne.n	8003872 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8003794:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003798:	2b01      	cmp	r3, #1
 800379a:	d06c      	beq.n	8003876 <HAL_ADC_Start_DMA+0x102>
 800379c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800379e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80037a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80037a4:	f7ff ff4c 	bl	8003640 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80037a8:	4606      	mov	r6, r0
 80037aa:	2800      	cmp	r0, #0
 80037ac:	d15d      	bne.n	800386a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80037ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037b0:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80037b2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037b6:	4b32      	ldr	r3, [pc, #200]	; (8003880 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80037b8:	f020 0001 	bic.w	r0, r0, #1
 80037bc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037c0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80037c2:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037c4:	d104      	bne.n	80037d0 <HAL_ADC_Start_DMA+0x5c>
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_ADC_Start_DMA+0x108>)
 80037c8:	6853      	ldr	r3, [r2, #4]
 80037ca:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80037ce:	d13e      	bne.n	800384e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80037d6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037d8:	684b      	ldr	r3, [r1, #4]
 80037da:	055a      	lsls	r2, r3, #21
 80037dc:	d505      	bpl.n	80037ea <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037e8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037ec:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ee:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037f2:	bf18      	it	ne
 80037f4:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037f6:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037f8:	bf18      	it	ne
 80037fa:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80037fe:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8003800:	2300      	movs	r3, #0
 8003802:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003808:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800380a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800380c:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <HAL_ADC_Start_DMA+0x114>)
 800380e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_ADC_Start_DMA+0x118>)
 8003812:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003814:	f06f 0302 	mvn.w	r3, #2
 8003818:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800381c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003828:	4643      	mov	r3, r8
 800382a:	f000 fc79 	bl	8004120 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003836:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	bf0c      	ite	eq
 800383e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003842:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	4630      	mov	r0, r6
 800384a:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800384e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003854:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003856:	6853      	ldr	r3, [r2, #4]
 8003858:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800385a:	bf41      	itttt	mi
 800385c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800385e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8003862:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8003866:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8003868:	e7bf      	b.n	80037ea <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800386a:	2300      	movs	r3, #0
 800386c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003870:	e7ea      	b.n	8003848 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8003872:	2601      	movs	r6, #1
 8003874:	e7e8      	b.n	8003848 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8003876:	2602      	movs	r6, #2
 8003878:	e7e6      	b.n	8003848 <HAL_ADC_Start_DMA+0xd4>
 800387a:	bf00      	nop
 800387c:	40012400 	.word	0x40012400
 8003880:	40012800 	.word	0x40012800
 8003884:	080034c3 	.word	0x080034c3
 8003888:	08003513 	.word	0x08003513
 800388c:	0800351f 	.word	0x0800351f

08003890 <ADC_ConversionStop_Disable>:
{
 8003890:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003892:	6803      	ldr	r3, [r0, #0]
{
 8003894:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	07d2      	lsls	r2, r2, #31
 800389a:	d401      	bmi.n	80038a0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800389c:	2000      	movs	r0, #0
 800389e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80038a8:	f7ff fe04 	bl	80034b4 <HAL_GetTick>
 80038ac:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	07db      	lsls	r3, r3, #31
 80038b4:	d5f2      	bpl.n	800389c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038b6:	f7ff fdfd 	bl	80034b4 <HAL_GetTick>
 80038ba:	1b40      	subs	r0, r0, r5
 80038bc:	2802      	cmp	r0, #2
 80038be:	d9f6      	bls.n	80038ae <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c4:	f043 0310 	orr.w	r3, r3, #16
 80038c8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038d2:	bd38      	pop	{r3, r4, r5, pc}

080038d4 <HAL_ADC_Init>:
{
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80038d6:	4604      	mov	r4, r0
 80038d8:	2800      	cmp	r0, #0
 80038da:	d077      	beq.n	80039cc <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80038de:	b923      	cbnz	r3, 80038ea <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80038e0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80038e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80038e6:	f7ff f9f7 	bl	8002cd8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7ff ffd0 	bl	8003890 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038f2:	f013 0310 	ands.w	r3, r3, #16
 80038f6:	d16b      	bne.n	80039d0 <HAL_ADC_Init+0xfc>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d169      	bne.n	80039d0 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 80038fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038fe:	4937      	ldr	r1, [pc, #220]	; (80039dc <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 8003900:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003904:	f022 0202 	bic.w	r2, r2, #2
 8003908:	f042 0202 	orr.w	r2, r2, #2
 800390c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800390e:	e894 0024 	ldmia.w	r4, {r2, r5}
 8003912:	428a      	cmp	r2, r1
 8003914:	69e1      	ldr	r1, [r4, #28]
 8003916:	d104      	bne.n	8003922 <HAL_ADC_Init+0x4e>
 8003918:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800391c:	bf08      	it	eq
 800391e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003922:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003924:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8003928:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800392a:	68a5      	ldr	r5, [r4, #8]
 800392c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003930:	d035      	beq.n	800399e <HAL_ADC_Init+0xca>
 8003932:	2d01      	cmp	r5, #1
 8003934:	bf08      	it	eq
 8003936:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800393a:	7d27      	ldrb	r7, [r4, #20]
 800393c:	2f01      	cmp	r7, #1
 800393e:	d106      	bne.n	800394e <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003940:	bb7e      	cbnz	r6, 80039a2 <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003942:	69a6      	ldr	r6, [r4, #24]
 8003944:	3e01      	subs	r6, #1
 8003946:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 800394a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800394e:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003950:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003954:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8003958:	ea43 0306 	orr.w	r3, r3, r6
 800395c:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800395e:	6896      	ldr	r6, [r2, #8]
 8003960:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <HAL_ADC_Init+0x10c>)
 8003962:	ea03 0306 	and.w	r3, r3, r6
 8003966:	ea43 0301 	orr.w	r3, r3, r1
 800396a:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800396c:	d001      	beq.n	8003972 <HAL_ADC_Init+0x9e>
 800396e:	2d01      	cmp	r5, #1
 8003970:	d120      	bne.n	80039b4 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	3b01      	subs	r3, #1
 8003976:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8003978:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800397a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800397e:	432b      	orrs	r3, r5
 8003980:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003982:	6892      	ldr	r2, [r2, #8]
 8003984:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <HAL_ADC_Init+0x110>)
 8003986:	4013      	ands	r3, r2
 8003988:	4299      	cmp	r1, r3
 800398a:	d115      	bne.n	80039b8 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 800398c:	2300      	movs	r3, #0
 800398e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	62a3      	str	r3, [r4, #40]	; 0x28
 800399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800399e:	462b      	mov	r3, r5
 80039a0:	e7cb      	b.n	800393a <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039a4:	f046 0620 	orr.w	r6, r6, #32
 80039a8:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ac:	f046 0601 	orr.w	r6, r6, #1
 80039b0:	62e6      	str	r6, [r4, #44]	; 0x2c
 80039b2:	e7cc      	b.n	800394e <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e7df      	b.n	8003978 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 80039b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039ba:	f023 0312 	bic.w	r3, r3, #18
 80039be:	f043 0310 	orr.w	r3, r3, #16
 80039c2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80039cc:	2001      	movs	r0, #1
}
 80039ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039d2:	f043 0310 	orr.w	r3, r3, #16
 80039d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80039d8:	e7f8      	b.n	80039cc <HAL_ADC_Init+0xf8>
 80039da:	bf00      	nop
 80039dc:	40013c00 	.word	0x40013c00
 80039e0:	ffe1f7fd 	.word	0xffe1f7fd
 80039e4:	ff1f0efe 	.word	0xff1f0efe

080039e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80039e8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80039ea:	4604      	mov	r4, r0
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d06e      	beq.n	8003ace <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80039f0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80039f4:	b90b      	cbnz	r3, 80039fa <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039f6:	f7ff f9f3 	bl	8002de0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	f023 0302 	bic.w	r3, r3, #2
 8003a02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a04:	f7ff fd56 	bl	80034b4 <HAL_GetTick>
 8003a08:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	0791      	lsls	r1, r2, #30
 8003a10:	d451      	bmi.n	8003ab6 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a1a:	f7ff fd4b 	bl	80034b4 <HAL_GetTick>
 8003a1e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	07d2      	lsls	r2, r2, #31
 8003a26:	d554      	bpl.n	8003ad2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a28:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a2a:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a2c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	bf0c      	ite	eq
 8003a32:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a36:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8003a3a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a3c:	7e62      	ldrb	r2, [r4, #25]
 8003a3e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	bf0c      	ite	eq
 8003a44:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a48:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003a4c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a4e:	7ea2      	ldrb	r2, [r4, #26]
 8003a50:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	bf0c      	ite	eq
 8003a56:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a5a:	f022 0220 	bicne.w	r2, r2, #32
 8003a5e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a60:	7ee2      	ldrb	r2, [r4, #27]
 8003a62:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	bf0c      	ite	eq
 8003a68:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a6c:	f042 0210 	orrne.w	r2, r2, #16
 8003a70:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a72:	7f22      	ldrb	r2, [r4, #28]
 8003a74:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	bf0c      	ite	eq
 8003a7a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a7e:	f022 0208 	bicne.w	r2, r2, #8
 8003a82:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a84:	7f62      	ldrb	r2, [r4, #29]
 8003a86:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	bf0c      	ite	eq
 8003a8c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a90:	f022 0204 	bicne.w	r2, r2, #4
 8003a94:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a96:	68e1      	ldr	r1, [r4, #12]
 8003a98:	68a2      	ldr	r2, [r4, #8]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	6921      	ldr	r1, [r4, #16]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	6961      	ldr	r1, [r4, #20]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	6861      	ldr	r1, [r4, #4]
 8003aa6:	3901      	subs	r1, #1
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003aac:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003aae:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003ab0:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ab6:	f7ff fcfd 	bl	80034b4 <HAL_GetTick>
 8003aba:	1b40      	subs	r0, r0, r5
 8003abc:	280a      	cmp	r0, #10
 8003abe:	d9a4      	bls.n	8003a0a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ac8:	2305      	movs	r3, #5
 8003aca:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003ace:	2001      	movs	r0, #1
}
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ad2:	f7ff fcef 	bl	80034b4 <HAL_GetTick>
 8003ad6:	1b40      	subs	r0, r0, r5
 8003ad8:	280a      	cmp	r0, #10
 8003ada:	d9a1      	bls.n	8003a20 <HAL_CAN_Init+0x38>
 8003adc:	e7f0      	b.n	8003ac0 <HAL_CAN_Init+0xd8>

08003ade <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ade:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003ae2:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d85f      	bhi.n	8003baa <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003aea:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8003aec:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003aee:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003af0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003afc:	f000 021f 	and.w	r2, r0, #31
 8003b00:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b04:	43d4      	mvns	r4, r2
 8003b06:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8003b0a:	4025      	ands	r5, r4
 8003b0c:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b10:	69cd      	ldr	r5, [r1, #28]
 8003b12:	bb85      	cbnz	r5, 8003b76 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b14:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b18:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b1a:	4025      	ands	r5, r4
 8003b1c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b20:	888d      	ldrh	r5, [r1, #4]
 8003b22:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b26:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b2a:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b2e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003b30:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b32:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b36:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003b3a:	6988      	ldr	r0, [r1, #24]
 8003b3c:	bb68      	cbnz	r0, 8003b9a <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003b3e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003b42:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b44:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003b48:	6908      	ldr	r0, [r1, #16]
 8003b4a:	bb50      	cbnz	r0, 8003ba2 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b4c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003b50:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b52:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b56:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8003b58:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b5a:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003b5c:	bf02      	ittt	eq
 8003b5e:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8003b62:	430a      	orreq	r2, r1
 8003b64:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003b76:	2d01      	cmp	r5, #1
 8003b78:	d1df      	bne.n	8003b3a <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b7a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b7e:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b80:	4315      	orrs	r5, r2
 8003b82:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b86:	888d      	ldrh	r5, [r1, #4]
 8003b88:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b8c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b90:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b94:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003b96:	898d      	ldrh	r5, [r1, #12]
 8003b98:	e7cb      	b.n	8003b32 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b9a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003b9e:	4310      	orrs	r0, r2
 8003ba0:	e7d0      	b.n	8003b44 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ba2:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003ba6:	4310      	orrs	r0, r2
 8003ba8:	e7d3      	b.n	8003b52 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003baa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003bb2:	2001      	movs	r0, #1
  }
}
 8003bb4:	bd70      	pop	{r4, r5, r6, pc}

08003bb6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003bb6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003bb8:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003bbc:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d11f      	bne.n	8003c02 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003bc2:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bc4:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003bc6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bca:	6813      	ldr	r3, [r2, #0]
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd2:	f7ff fc6f 	bl	80034b4 <HAL_GetTick>
 8003bd6:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	6858      	ldr	r0, [r3, #4]
 8003bdc:	f010 0001 	ands.w	r0, r0, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003be2:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003be4:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003be6:	f7ff fc65 	bl	80034b4 <HAL_GetTick>
 8003bea:	1b40      	subs	r0, r0, r5
 8003bec:	280a      	cmp	r0, #10
 8003bee:	d9f3      	bls.n	8003bd8 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf6:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003bf8:	2305      	movs	r3, #5
 8003bfa:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8003bfe:	2001      	movs	r0, #1
  }
}
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c08:	6243      	str	r3, [r0, #36]	; 0x24
 8003c0a:	e7f8      	b.n	8003bfe <HAL_CAN_Start+0x48>

08003c0c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c0e:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c12:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c14:	3d01      	subs	r5, #1
 8003c16:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c18:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8003c1a:	d841      	bhi.n	8003ca0 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c1c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8003c20:	d03a      	beq.n	8003c98 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c22:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003c26:	2c03      	cmp	r4, #3
 8003c28:	f04f 0501 	mov.w	r5, #1
 8003c2c:	d105      	bne.n	8003c3a <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003c2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c34:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003c36:	2001      	movs	r0, #1
  }
}
 8003c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c3a:	40a5      	lsls	r5, r4
 8003c3c:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8003c3e:	6888      	ldr	r0, [r1, #8]
 8003c40:	68cf      	ldr	r7, [r1, #12]
 8003c42:	f104 0318 	add.w	r3, r4, #24
 8003c46:	bb10      	cbnz	r0, 8003c8e <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c48:	6808      	ldr	r0, [r1, #0]
 8003c4a:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003c52:	6908      	ldr	r0, [r1, #16]
 8003c54:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003c56:	7d09      	ldrb	r1, [r1, #20]
 8003c58:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003c5a:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003c5e:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003c60:	bf08      	it	eq
 8003c62:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003c66:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003c68:	bf04      	itt	eq
 8003c6a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8003c6e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003c72:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8003c74:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003c76:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003c80:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8003c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c8e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8003c90:	4338      	orrs	r0, r7
 8003c92:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8003c96:	e7da      	b.n	8003c4e <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c9e:	e7c9      	b.n	8003c34 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca6:	e7c5      	b.n	8003c34 <HAL_CAN_AddTxMessage+0x28>

08003ca8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8003caa:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cae:	3c01      	subs	r4, #1
 8003cb0:	2c01      	cmp	r4, #1
 8003cb2:	d86b      	bhi.n	8003d8c <HAL_CAN_GetRxMessage+0xe4>
 8003cb4:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cb6:	b941      	cbnz	r1, 8003cca <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003cb8:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003cba:	07a4      	lsls	r4, r4, #30
 8003cbc:	d107      	bne.n	8003cce <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cc4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003cc6:	2001      	movs	r0, #1
  }
}
 8003cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003cca:	6934      	ldr	r4, [r6, #16]
 8003ccc:	e7f5      	b.n	8003cba <HAL_CAN_GetRxMessage+0x12>
 8003cce:	010c      	lsls	r4, r1, #4
 8003cd0:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003cd2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8003cd6:	f007 0704 	and.w	r7, r7, #4
 8003cda:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003cdc:	2f00      	cmp	r7, #0
 8003cde:	d14b      	bne.n	8003d78 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ce0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8003ce4:	0d7f      	lsrs	r7, r7, #21
 8003ce6:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ce8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003cec:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003cee:	f007 0702 	and.w	r7, r7, #2
 8003cf2:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003cf4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8003cf8:	f007 070f 	and.w	r7, r7, #15
 8003cfc:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003cfe:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d02:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d06:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d0a:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d0c:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d0e:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d10:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8003d14:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d16:	6802      	ldr	r2, [r0, #0]
 8003d18:	4422      	add	r2, r4
 8003d1a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003d1e:	0a12      	lsrs	r2, r2, #8
 8003d20:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d22:	6802      	ldr	r2, [r0, #0]
 8003d24:	4422      	add	r2, r4
 8003d26:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003d2a:	0c12      	lsrs	r2, r2, #16
 8003d2c:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d2e:	6802      	ldr	r2, [r0, #0]
 8003d30:	4422      	add	r2, r4
 8003d32:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003d36:	0e12      	lsrs	r2, r2, #24
 8003d38:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d3a:	6802      	ldr	r2, [r0, #0]
 8003d3c:	4422      	add	r2, r4
 8003d3e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003d42:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d44:	6802      	ldr	r2, [r0, #0]
 8003d46:	4422      	add	r2, r4
 8003d48:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003d4c:	0a12      	lsrs	r2, r2, #8
 8003d4e:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003d50:	6802      	ldr	r2, [r0, #0]
 8003d52:	4422      	add	r2, r4
 8003d54:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003d58:	0c12      	lsrs	r2, r2, #16
 8003d5a:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d5c:	6802      	ldr	r2, [r0, #0]
 8003d5e:	4414      	add	r4, r2
 8003d60:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8003d64:	0e12      	lsrs	r2, r2, #24
 8003d66:	71da      	strb	r2, [r3, #7]
 8003d68:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d6a:	b951      	cbnz	r1, 8003d82 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	f042 0220 	orr.w	r2, r2, #32
 8003d72:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8003d74:	2000      	movs	r0, #0
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d78:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8003d7c:	08ff      	lsrs	r7, r7, #3
 8003d7e:	6057      	str	r7, [r2, #4]
 8003d80:	e7b2      	b.n	8003ce8 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	f042 0220 	orr.w	r2, r2, #32
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e7f3      	b.n	8003d74 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d92:	e797      	b.n	8003cc4 <HAL_CAN_GetRxMessage+0x1c>

08003d94 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d94:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d805      	bhi.n	8003daa <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d9e:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8003da0:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003da2:	6953      	ldr	r3, [r2, #20]
 8003da4:	4319      	orrs	r1, r3
 8003da6:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8003da8:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003daa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003db2:	2001      	movs	r0, #1
  }
}
 8003db4:	4770      	bx	lr

08003db6 <HAL_CAN_TxMailbox0CompleteCallback>:
 8003db6:	4770      	bx	lr

08003db8 <HAL_CAN_TxMailbox1CompleteCallback>:
 8003db8:	4770      	bx	lr

08003dba <HAL_CAN_TxMailbox2CompleteCallback>:
 8003dba:	4770      	bx	lr

08003dbc <HAL_CAN_TxMailbox0AbortCallback>:
 8003dbc:	4770      	bx	lr

08003dbe <HAL_CAN_TxMailbox1AbortCallback>:
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_CAN_TxMailbox2AbortCallback>:
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_CAN_RxFifo0FullCallback>:
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_CAN_RxFifo1FullCallback>:
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_CAN_SleepCallback>:
 8003dc8:	4770      	bx	lr

08003dca <HAL_CAN_WakeUpFromRxMsgCallback>:
 8003dca:	4770      	bx	lr

08003dcc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003dcc:	4770      	bx	lr

08003dce <HAL_CAN_IRQHandler>:
{
 8003dce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003dd2:	6803      	ldr	r3, [r0, #0]
{
 8003dd4:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003dd6:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003dd8:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ddc:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003de0:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003de2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003de6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dea:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dee:	d022      	beq.n	8003e36 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003df0:	f017 0401 	ands.w	r4, r7, #1
 8003df4:	d007      	beq.n	8003e06 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003df6:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003df8:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dfa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003dfc:	f140 80a3 	bpl.w	8003f46 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e00:	f7ff ffd9 	bl	8003db6 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e04:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e06:	05fb      	lsls	r3, r7, #23
 8003e08:	d509      	bpl.n	8003e1e <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e0e:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e10:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e12:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e14:	f140 80a5 	bpl.w	8003f62 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f7ff ffcd 	bl	8003db8 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e1e:	03fb      	lsls	r3, r7, #15
 8003e20:	d509      	bpl.n	8003e36 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e26:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e28:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e2c:	f140 80a7 	bpl.w	8003f7e <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e30:	4628      	mov	r0, r5
 8003e32:	f7ff ffc2 	bl	8003dba <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e36:	0733      	lsls	r3, r6, #28
 8003e38:	d507      	bpl.n	8003e4a <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e3a:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e3e:	bf1f      	itttt	ne
 8003e40:	2210      	movne	r2, #16
 8003e42:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e44:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e48:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e4a:	0777      	lsls	r7, r6, #29
 8003e4c:	d508      	bpl.n	8003e60 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e4e:	f01b 0f08 	tst.w	fp, #8
 8003e52:	d005      	beq.n	8003e60 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e54:	2208      	movs	r2, #8
 8003e56:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e58:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e5a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e5c:	f7ff ffb2 	bl	8003dc4 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e60:	07b0      	lsls	r0, r6, #30
 8003e62:	d506      	bpl.n	8003e72 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	0799      	lsls	r1, r3, #30
 8003e6a:	d002      	beq.n	8003e72 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f7ff ffa8 	bl	8003dc2 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e72:	0672      	lsls	r2, r6, #25
 8003e74:	d507      	bpl.n	8003e86 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e76:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e7a:	bf1f      	itttt	ne
 8003e7c:	2210      	movne	r2, #16
 8003e7e:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e80:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e84:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e86:	06b3      	lsls	r3, r6, #26
 8003e88:	d508      	bpl.n	8003e9c <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e8a:	f01a 0f08 	tst.w	sl, #8
 8003e8e:	d005      	beq.n	8003e9c <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e90:	2208      	movs	r2, #8
 8003e92:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e94:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e96:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e98:	f7ff ff95 	bl	8003dc6 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e9c:	06f7      	lsls	r7, r6, #27
 8003e9e:	d506      	bpl.n	8003eae <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	0798      	lsls	r0, r3, #30
 8003ea6:	d002      	beq.n	8003eae <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f7fe fa77 	bl	800239c <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003eae:	03b1      	lsls	r1, r6, #14
 8003eb0:	d508      	bpl.n	8003ec4 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003eb2:	f019 0f10 	tst.w	r9, #16
 8003eb6:	d005      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003eb8:	2210      	movs	r2, #16
 8003eba:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8003ebc:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ebe:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8003ec0:	f7ff ff82 	bl	8003dc8 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ec4:	03f2      	lsls	r2, r6, #15
 8003ec6:	d508      	bpl.n	8003eda <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ec8:	f019 0f08 	tst.w	r9, #8
 8003ecc:	d005      	beq.n	8003eda <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ece:	2208      	movs	r2, #8
 8003ed0:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ed2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ed4:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ed6:	f7ff ff78 	bl	8003dca <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003eda:	0433      	lsls	r3, r6, #16
 8003edc:	d52a      	bpl.n	8003f34 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ede:	f019 0f04 	tst.w	r9, #4
 8003ee2:	682a      	ldr	r2, [r5, #0]
 8003ee4:	d024      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ee6:	05f7      	lsls	r7, r6, #23
 8003ee8:	d504      	bpl.n	8003ef4 <HAL_CAN_IRQHandler+0x126>
 8003eea:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8003eee:	bf18      	it	ne
 8003ef0:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ef4:	05b0      	lsls	r0, r6, #22
 8003ef6:	d504      	bpl.n	8003f02 <HAL_CAN_IRQHandler+0x134>
 8003ef8:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8003efc:	bf18      	it	ne
 8003efe:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f02:	0571      	lsls	r1, r6, #21
 8003f04:	d504      	bpl.n	8003f10 <HAL_CAN_IRQHandler+0x142>
 8003f06:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f0a:	bf18      	it	ne
 8003f0c:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f10:	0533      	lsls	r3, r6, #20
 8003f12:	d50d      	bpl.n	8003f30 <HAL_CAN_IRQHandler+0x162>
 8003f14:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8003f18:	d00a      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8003f1a:	2b30      	cmp	r3, #48	; 0x30
 8003f1c:	d04c      	beq.n	8003fb8 <HAL_CAN_IRQHandler+0x1ea>
 8003f1e:	d83c      	bhi.n	8003f9a <HAL_CAN_IRQHandler+0x1cc>
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d043      	beq.n	8003fac <HAL_CAN_IRQHandler+0x1de>
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d044      	beq.n	8003fb2 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f28:	6993      	ldr	r3, [r2, #24]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f30:	2304      	movs	r3, #4
 8003f32:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f34:	b12c      	cbz	r4, 8003f42 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8003f36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003f38:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8003f3a:	431c      	orrs	r4, r3
 8003f3c:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003f3e:	f7ff ff45 	bl	8003dcc <HAL_CAN_ErrorCallback>
 8003f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f46:	077a      	lsls	r2, r7, #29
 8003f48:	d405      	bmi.n	8003f56 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f4a:	f017 0408 	ands.w	r4, r7, #8
 8003f4e:	d105      	bne.n	8003f5c <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f50:	f7ff ff34 	bl	8003dbc <HAL_CAN_TxMailbox0AbortCallback>
 8003f54:	e757      	b.n	8003e06 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f56:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8003f5a:	e754      	b.n	8003e06 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f5c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8003f60:	e751      	b.n	8003e06 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f62:	0579      	lsls	r1, r7, #21
 8003f64:	d502      	bpl.n	8003f6c <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f66:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8003f6a:	e758      	b.n	8003e1e <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f6c:	053a      	lsls	r2, r7, #20
 8003f6e:	d502      	bpl.n	8003f76 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f70:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003f74:	e753      	b.n	8003e1e <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003f76:	4628      	mov	r0, r5
 8003f78:	f7ff ff21 	bl	8003dbe <HAL_CAN_TxMailbox1AbortCallback>
 8003f7c:	e74f      	b.n	8003e1e <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f7e:	0379      	lsls	r1, r7, #13
 8003f80:	d502      	bpl.n	8003f88 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f82:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003f86:	e756      	b.n	8003e36 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f88:	033a      	lsls	r2, r7, #12
 8003f8a:	d502      	bpl.n	8003f92 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f8c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8003f90:	e751      	b.n	8003e36 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f92:	4628      	mov	r0, r5
 8003f94:	f7ff ff14 	bl	8003dc0 <HAL_CAN_TxMailbox2AbortCallback>
 8003f98:	e74d      	b.n	8003e36 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8003f9a:	2b50      	cmp	r3, #80	; 0x50
 8003f9c:	d00f      	beq.n	8003fbe <HAL_CAN_IRQHandler+0x1f0>
 8003f9e:	2b60      	cmp	r3, #96	; 0x60
 8003fa0:	d010      	beq.n	8003fc4 <HAL_CAN_IRQHandler+0x1f6>
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d1c0      	bne.n	8003f28 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003fa6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8003faa:	e7bd      	b.n	8003f28 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003fac:	f044 0408 	orr.w	r4, r4, #8
            break;
 8003fb0:	e7ba      	b.n	8003f28 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003fb2:	f044 0410 	orr.w	r4, r4, #16
            break;
 8003fb6:	e7b7      	b.n	8003f28 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003fb8:	f044 0420 	orr.w	r4, r4, #32
            break;
 8003fbc:	e7b4      	b.n	8003f28 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003fbe:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8003fc2:	e7b1      	b.n	8003f28 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003fc4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8003fc8:	e7ae      	b.n	8003f28 <HAL_CAN_IRQHandler+0x15a>
	...

08003fcc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003fce:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003fd2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003fe6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003fe8:	60d3      	str	r3, [r2, #12]
 8003fea:	4770      	bx	lr
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff0:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff2:	b530      	push	{r4, r5, lr}
 8003ff4:	68dc      	ldr	r4, [r3, #12]
 8003ff6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ffa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ffe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004000:	2b04      	cmp	r3, #4
 8004002:	bf28      	it	cs
 8004004:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004006:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800400c:	bf98      	it	ls
 800400e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004010:	fa05 f303 	lsl.w	r3, r5, r3
 8004014:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004018:	bf88      	it	hi
 800401a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800401c:	4019      	ands	r1, r3
 800401e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004020:	fa05 f404 	lsl.w	r4, r5, r4
 8004024:	3c01      	subs	r4, #1
 8004026:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004028:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800402a:	ea42 0201 	orr.w	r2, r2, r1
 800402e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004032:	bfa9      	itett	ge
 8004034:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004038:	4b06      	ldrlt	r3, [pc, #24]	; (8004054 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403a:	b2d2      	uxtbge	r2, r2
 800403c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004040:	bfbb      	ittet	lt
 8004042:	f000 000f 	andlt.w	r0, r0, #15
 8004046:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004048:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404c:	541a      	strblt	r2, [r3, r0]
 800404e:	bd30      	pop	{r4, r5, pc}
 8004050:	e000ed00 	.word	0xe000ed00
 8004054:	e000ed14 	.word	0xe000ed14

08004058 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004058:	2800      	cmp	r0, #0
 800405a:	db08      	blt.n	800406e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405c:	2301      	movs	r3, #1
 800405e:	0942      	lsrs	r2, r0, #5
 8004060:	f000 001f 	and.w	r0, r0, #31
 8004064:	fa03 f000 	lsl.w	r0, r3, r0
 8004068:	4b01      	ldr	r3, [pc, #4]	; (8004070 <HAL_NVIC_EnableIRQ+0x18>)
 800406a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100

08004074 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004074:	3801      	subs	r0, #1
 8004076:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800407a:	d20a      	bcs.n	8004092 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004080:	4a06      	ldr	r2, [pc, #24]	; (800409c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004082:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004084:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004088:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800408a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800408c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004092:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000e010 	.word	0xe000e010
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d032      	beq.n	800410c <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040a6:	6801      	ldr	r1, [r0, #0]
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_DMA_Init+0x70>)
 80040aa:	2414      	movs	r4, #20
 80040ac:	4299      	cmp	r1, r3
 80040ae:	d825      	bhi.n	80040fc <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040b0:	4a18      	ldr	r2, [pc, #96]	; (8004114 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 80040b2:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040b6:	440a      	add	r2, r1
 80040b8:	fbb2 f2f4 	udiv	r2, r2, r4
 80040bc:	0092      	lsls	r2, r2, #2
 80040be:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040c0:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 80040c2:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80040c4:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80040c6:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80040c8:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ca:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040cc:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d0:	4323      	orrs	r3, r4
 80040d2:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040d4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040da:	6944      	ldr	r4, [r0, #20]
 80040dc:	4323      	orrs	r3, r4
 80040de:	6984      	ldr	r4, [r0, #24]
 80040e0:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e2:	69c4      	ldr	r4, [r0, #28]
 80040e4:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80040e6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040e8:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040ea:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ec:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80040ee:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f2:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040f4:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_DMA_Init+0x78>)
 80040fe:	440b      	add	r3, r1
 8004100:	fbb3 f3f4 	udiv	r3, r3, r4
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <HAL_DMA_Init+0x7c>)
 800410a:	e7d9      	b.n	80040c0 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800410c:	2001      	movs	r0, #1
}
 800410e:	bd10      	pop	{r4, pc}
 8004110:	40020407 	.word	0x40020407
 8004114:	bffdfff8 	.word	0xbffdfff8
 8004118:	bffdfbf8 	.word	0xbffdfbf8
 800411c:	40020400 	.word	0x40020400

08004120 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004120:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004122:	f890 4020 	ldrb.w	r4, [r0, #32]
 8004126:	2c01      	cmp	r4, #1
 8004128:	d035      	beq.n	8004196 <HAL_DMA_Start_IT+0x76>
 800412a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800412c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8004130:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004134:	42a5      	cmp	r5, r4
 8004136:	f04f 0600 	mov.w	r6, #0
 800413a:	f04f 0402 	mov.w	r4, #2
 800413e:	d128      	bne.n	8004192 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004140:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004144:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004146:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8004148:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800414a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800414c:	f026 0601 	bic.w	r6, r6, #1
 8004150:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004152:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8004154:	40bd      	lsls	r5, r7
 8004156:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004158:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800415a:	6843      	ldr	r3, [r0, #4]
 800415c:	6805      	ldr	r5, [r0, #0]
 800415e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8004160:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004162:	bf0b      	itete	eq
 8004164:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004166:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004168:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800416a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800416c:	b14b      	cbz	r3, 8004182 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004174:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004176:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	f043 030a 	orr.w	r3, r3, #10
 8004190:	e7f0      	b.n	8004174 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8004192:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8004196:	2002      	movs	r0, #2
}
 8004198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800419c <HAL_DMA_IRQHandler>:
{
 800419c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800419e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041a0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041a4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80041a6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041a8:	4095      	lsls	r5, r2
 80041aa:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80041ac:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041ae:	d055      	beq.n	800425c <HAL_DMA_IRQHandler+0xc0>
 80041b0:	074d      	lsls	r5, r1, #29
 80041b2:	d553      	bpl.n	800425c <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041b8:	bf5e      	ittt	pl
 80041ba:	681a      	ldrpl	r2, [r3, #0]
 80041bc:	f022 0204 	bicpl.w	r2, r2, #4
 80041c0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80041c2:	4a60      	ldr	r2, [pc, #384]	; (8004344 <HAL_DMA_IRQHandler+0x1a8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d91f      	bls.n	8004208 <HAL_DMA_IRQHandler+0x6c>
 80041c8:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d014      	beq.n	80041fa <HAL_DMA_IRQHandler+0x5e>
 80041d0:	3214      	adds	r2, #20
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_DMA_IRQHandler+0x62>
 80041d6:	3214      	adds	r2, #20
 80041d8:	4293      	cmp	r3, r2
 80041da:	d012      	beq.n	8004202 <HAL_DMA_IRQHandler+0x66>
 80041dc:	3214      	adds	r2, #20
 80041de:	4293      	cmp	r3, r2
 80041e0:	bf0c      	ite	eq
 80041e2:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80041e6:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80041ea:	4a57      	ldr	r2, [pc, #348]	; (8004348 <HAL_DMA_IRQHandler+0x1ac>)
 80041ec:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80041ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80a5 	beq.w	8004340 <HAL_DMA_IRQHandler+0x1a4>
}
 80041f6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80041f8:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80041fa:	2304      	movs	r3, #4
 80041fc:	e7f5      	b.n	80041ea <HAL_DMA_IRQHandler+0x4e>
 80041fe:	2340      	movs	r3, #64	; 0x40
 8004200:	e7f3      	b.n	80041ea <HAL_DMA_IRQHandler+0x4e>
 8004202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004206:	e7f0      	b.n	80041ea <HAL_DMA_IRQHandler+0x4e>
 8004208:	4950      	ldr	r1, [pc, #320]	; (800434c <HAL_DMA_IRQHandler+0x1b0>)
 800420a:	428b      	cmp	r3, r1
 800420c:	d016      	beq.n	800423c <HAL_DMA_IRQHandler+0xa0>
 800420e:	3114      	adds	r1, #20
 8004210:	428b      	cmp	r3, r1
 8004212:	d015      	beq.n	8004240 <HAL_DMA_IRQHandler+0xa4>
 8004214:	3114      	adds	r1, #20
 8004216:	428b      	cmp	r3, r1
 8004218:	d014      	beq.n	8004244 <HAL_DMA_IRQHandler+0xa8>
 800421a:	3114      	adds	r1, #20
 800421c:	428b      	cmp	r3, r1
 800421e:	d014      	beq.n	800424a <HAL_DMA_IRQHandler+0xae>
 8004220:	3114      	adds	r1, #20
 8004222:	428b      	cmp	r3, r1
 8004224:	d014      	beq.n	8004250 <HAL_DMA_IRQHandler+0xb4>
 8004226:	3114      	adds	r1, #20
 8004228:	428b      	cmp	r3, r1
 800422a:	d014      	beq.n	8004256 <HAL_DMA_IRQHandler+0xba>
 800422c:	4293      	cmp	r3, r2
 800422e:	bf14      	ite	ne
 8004230:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8004234:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8004238:	4a45      	ldr	r2, [pc, #276]	; (8004350 <HAL_DMA_IRQHandler+0x1b4>)
 800423a:	e7d7      	b.n	80041ec <HAL_DMA_IRQHandler+0x50>
 800423c:	2304      	movs	r3, #4
 800423e:	e7fb      	b.n	8004238 <HAL_DMA_IRQHandler+0x9c>
 8004240:	2340      	movs	r3, #64	; 0x40
 8004242:	e7f9      	b.n	8004238 <HAL_DMA_IRQHandler+0x9c>
 8004244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004248:	e7f6      	b.n	8004238 <HAL_DMA_IRQHandler+0x9c>
 800424a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800424e:	e7f3      	b.n	8004238 <HAL_DMA_IRQHandler+0x9c>
 8004250:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004254:	e7f0      	b.n	8004238 <HAL_DMA_IRQHandler+0x9c>
 8004256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800425a:	e7ed      	b.n	8004238 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800425c:	2502      	movs	r5, #2
 800425e:	4095      	lsls	r5, r2
 8004260:	4225      	tst	r5, r4
 8004262:	d057      	beq.n	8004314 <HAL_DMA_IRQHandler+0x178>
 8004264:	078d      	lsls	r5, r1, #30
 8004266:	d555      	bpl.n	8004314 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	0694      	lsls	r4, r2, #26
 800426c:	d406      	bmi.n	800427c <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	f022 020a 	bic.w	r2, r2, #10
 8004274:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004276:	2201      	movs	r2, #1
 8004278:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800427c:	4a31      	ldr	r2, [pc, #196]	; (8004344 <HAL_DMA_IRQHandler+0x1a8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d91e      	bls.n	80042c0 <HAL_DMA_IRQHandler+0x124>
 8004282:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x116>
 800428a:	3214      	adds	r2, #20
 800428c:	4293      	cmp	r3, r2
 800428e:	d012      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x11a>
 8004290:	3214      	adds	r2, #20
 8004292:	4293      	cmp	r3, r2
 8004294:	d011      	beq.n	80042ba <HAL_DMA_IRQHandler+0x11e>
 8004296:	3214      	adds	r2, #20
 8004298:	4293      	cmp	r3, r2
 800429a:	bf0c      	ite	eq
 800429c:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80042a0:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80042a4:	4a28      	ldr	r2, [pc, #160]	; (8004348 <HAL_DMA_IRQHandler+0x1ac>)
 80042a6:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80042a8:	2300      	movs	r3, #0
 80042aa:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80042ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80042b0:	e79e      	b.n	80041f0 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80042b2:	2302      	movs	r3, #2
 80042b4:	e7f6      	b.n	80042a4 <HAL_DMA_IRQHandler+0x108>
 80042b6:	2320      	movs	r3, #32
 80042b8:	e7f4      	b.n	80042a4 <HAL_DMA_IRQHandler+0x108>
 80042ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042be:	e7f1      	b.n	80042a4 <HAL_DMA_IRQHandler+0x108>
 80042c0:	4922      	ldr	r1, [pc, #136]	; (800434c <HAL_DMA_IRQHandler+0x1b0>)
 80042c2:	428b      	cmp	r3, r1
 80042c4:	d016      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x158>
 80042c6:	3114      	adds	r1, #20
 80042c8:	428b      	cmp	r3, r1
 80042ca:	d015      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x15c>
 80042cc:	3114      	adds	r1, #20
 80042ce:	428b      	cmp	r3, r1
 80042d0:	d014      	beq.n	80042fc <HAL_DMA_IRQHandler+0x160>
 80042d2:	3114      	adds	r1, #20
 80042d4:	428b      	cmp	r3, r1
 80042d6:	d014      	beq.n	8004302 <HAL_DMA_IRQHandler+0x166>
 80042d8:	3114      	adds	r1, #20
 80042da:	428b      	cmp	r3, r1
 80042dc:	d014      	beq.n	8004308 <HAL_DMA_IRQHandler+0x16c>
 80042de:	3114      	adds	r1, #20
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d014      	beq.n	800430e <HAL_DMA_IRQHandler+0x172>
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bf14      	ite	ne
 80042e8:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80042ec:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80042f0:	4a17      	ldr	r2, [pc, #92]	; (8004350 <HAL_DMA_IRQHandler+0x1b4>)
 80042f2:	e7d8      	b.n	80042a6 <HAL_DMA_IRQHandler+0x10a>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e7fb      	b.n	80042f0 <HAL_DMA_IRQHandler+0x154>
 80042f8:	2320      	movs	r3, #32
 80042fa:	e7f9      	b.n	80042f0 <HAL_DMA_IRQHandler+0x154>
 80042fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004300:	e7f6      	b.n	80042f0 <HAL_DMA_IRQHandler+0x154>
 8004302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004306:	e7f3      	b.n	80042f0 <HAL_DMA_IRQHandler+0x154>
 8004308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800430c:	e7f0      	b.n	80042f0 <HAL_DMA_IRQHandler+0x154>
 800430e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004312:	e7ed      	b.n	80042f0 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004314:	2508      	movs	r5, #8
 8004316:	4095      	lsls	r5, r2
 8004318:	4225      	tst	r5, r4
 800431a:	d011      	beq.n	8004340 <HAL_DMA_IRQHandler+0x1a4>
 800431c:	0709      	lsls	r1, r1, #28
 800431e:	d50f      	bpl.n	8004340 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	f021 010e 	bic.w	r1, r1, #14
 8004326:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004328:	2301      	movs	r3, #1
 800432a:	fa03 f202 	lsl.w	r2, r3, r2
 800432e:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004330:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8004332:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8004336:	2300      	movs	r3, #0
 8004338:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800433c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800433e:	e757      	b.n	80041f0 <HAL_DMA_IRQHandler+0x54>
}
 8004340:	bc70      	pop	{r4, r5, r6}
 8004342:	4770      	bx	lr
 8004344:	40020080 	.word	0x40020080
 8004348:	40020400 	.word	0x40020400
 800434c:	40020008 	.word	0x40020008
 8004350:	40020000 	.word	0x40020000

08004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004358:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800435a:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800435c:	4f6c      	ldr	r7, [pc, #432]	; (8004510 <HAL_GPIO_Init+0x1bc>)
 800435e:	4b6d      	ldr	r3, [pc, #436]	; (8004514 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004360:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 800451c <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8004364:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8004520 <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004368:	680a      	ldr	r2, [r1, #0]
 800436a:	fa32 f506 	lsrs.w	r5, r2, r6
 800436e:	d102      	bne.n	8004376 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8004370:	b003      	add	sp, #12
 8004372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8004376:	f04f 0801 	mov.w	r8, #1
 800437a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437e:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8004382:	4590      	cmp	r8, r2
 8004384:	f040 8084 	bne.w	8004490 <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8004388:	684d      	ldr	r5, [r1, #4]
 800438a:	2d12      	cmp	r5, #18
 800438c:	f000 80b1 	beq.w	80044f2 <HAL_GPIO_Init+0x19e>
 8004390:	f200 8087 	bhi.w	80044a2 <HAL_GPIO_Init+0x14e>
 8004394:	2d02      	cmp	r5, #2
 8004396:	f000 80a9 	beq.w	80044ec <HAL_GPIO_Init+0x198>
 800439a:	d87b      	bhi.n	8004494 <HAL_GPIO_Init+0x140>
 800439c:	2d00      	cmp	r5, #0
 800439e:	f000 808c 	beq.w	80044ba <HAL_GPIO_Init+0x166>
 80043a2:	2d01      	cmp	r5, #1
 80043a4:	f000 80a0 	beq.w	80044e8 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043a8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043ac:	2aff      	cmp	r2, #255	; 0xff
 80043ae:	bf93      	iteet	ls
 80043b0:	4682      	movls	sl, r0
 80043b2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80043b6:	3d08      	subhi	r5, #8
 80043b8:	f8d0 b000 	ldrls.w	fp, [r0]
 80043bc:	bf92      	itee	ls
 80043be:	00b5      	lslls	r5, r6, #2
 80043c0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80043c4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043c6:	fa09 f805 	lsl.w	r8, r9, r5
 80043ca:	ea2b 0808 	bic.w	r8, fp, r8
 80043ce:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043d2:	bf88      	it	hi
 80043d4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043d8:	ea48 0505 	orr.w	r5, r8, r5
 80043dc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043e0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80043e4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80043e8:	d052      	beq.n	8004490 <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043ea:	69bd      	ldr	r5, [r7, #24]
 80043ec:	f026 0803 	bic.w	r8, r6, #3
 80043f0:	f045 0501 	orr.w	r5, r5, #1
 80043f4:	61bd      	str	r5, [r7, #24]
 80043f6:	69bd      	ldr	r5, [r7, #24]
 80043f8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80043fc:	f005 0501 	and.w	r5, r5, #1
 8004400:	9501      	str	r5, [sp, #4]
 8004402:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004406:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800440a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800440c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004410:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004414:	fa09 f90b 	lsl.w	r9, r9, fp
 8004418:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800441c:	4d3e      	ldr	r5, [pc, #248]	; (8004518 <HAL_GPIO_Init+0x1c4>)
 800441e:	42a8      	cmp	r0, r5
 8004420:	d06c      	beq.n	80044fc <HAL_GPIO_Init+0x1a8>
 8004422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004426:	42a8      	cmp	r0, r5
 8004428:	d06a      	beq.n	8004500 <HAL_GPIO_Init+0x1ac>
 800442a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800442e:	42a8      	cmp	r0, r5
 8004430:	d068      	beq.n	8004504 <HAL_GPIO_Init+0x1b0>
 8004432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004436:	42a8      	cmp	r0, r5
 8004438:	d066      	beq.n	8004508 <HAL_GPIO_Init+0x1b4>
 800443a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800443e:	42a8      	cmp	r0, r5
 8004440:	d064      	beq.n	800450c <HAL_GPIO_Init+0x1b8>
 8004442:	4570      	cmp	r0, lr
 8004444:	bf0c      	ite	eq
 8004446:	2505      	moveq	r5, #5
 8004448:	2506      	movne	r5, #6
 800444a:	fa05 f50b 	lsl.w	r5, r5, fp
 800444e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004452:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8004456:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004458:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800445c:	bf14      	ite	ne
 800445e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004460:	4395      	biceq	r5, r2
 8004462:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8004464:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004466:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800446a:	bf14      	ite	ne
 800446c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800446e:	4395      	biceq	r5, r2
 8004470:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004472:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004474:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004478:	bf14      	ite	ne
 800447a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800447c:	4395      	biceq	r5, r2
 800447e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004480:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004482:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004486:	bf14      	ite	ne
 8004488:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800448a:	ea25 0202 	biceq.w	r2, r5, r2
 800448e:	60da      	str	r2, [r3, #12]
	position++;
 8004490:	3601      	adds	r6, #1
 8004492:	e769      	b.n	8004368 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8004494:	2d03      	cmp	r5, #3
 8004496:	d025      	beq.n	80044e4 <HAL_GPIO_Init+0x190>
 8004498:	2d11      	cmp	r5, #17
 800449a:	d185      	bne.n	80043a8 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800449c:	68cc      	ldr	r4, [r1, #12]
 800449e:	3404      	adds	r4, #4
          break;
 80044a0:	e782      	b.n	80043a8 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80044a2:	4565      	cmp	r5, ip
 80044a4:	d009      	beq.n	80044ba <HAL_GPIO_Init+0x166>
 80044a6:	d812      	bhi.n	80044ce <HAL_GPIO_Init+0x17a>
 80044a8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004524 <HAL_GPIO_Init+0x1d0>
 80044ac:	454d      	cmp	r5, r9
 80044ae:	d004      	beq.n	80044ba <HAL_GPIO_Init+0x166>
 80044b0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80044b4:	454d      	cmp	r5, r9
 80044b6:	f47f af77 	bne.w	80043a8 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044ba:	688c      	ldr	r4, [r1, #8]
 80044bc:	b1e4      	cbz	r4, 80044f8 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044be:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80044c0:	bf0c      	ite	eq
 80044c2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80044c6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044ca:	2408      	movs	r4, #8
 80044cc:	e76c      	b.n	80043a8 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80044ce:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004528 <HAL_GPIO_Init+0x1d4>
 80044d2:	454d      	cmp	r5, r9
 80044d4:	d0f1      	beq.n	80044ba <HAL_GPIO_Init+0x166>
 80044d6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80044da:	454d      	cmp	r5, r9
 80044dc:	d0ed      	beq.n	80044ba <HAL_GPIO_Init+0x166>
 80044de:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80044e2:	e7e7      	b.n	80044b4 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044e4:	2400      	movs	r4, #0
 80044e6:	e75f      	b.n	80043a8 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044e8:	68cc      	ldr	r4, [r1, #12]
          break;
 80044ea:	e75d      	b.n	80043a8 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044ec:	68cc      	ldr	r4, [r1, #12]
 80044ee:	3408      	adds	r4, #8
          break;
 80044f0:	e75a      	b.n	80043a8 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044f2:	68cc      	ldr	r4, [r1, #12]
 80044f4:	340c      	adds	r4, #12
          break;
 80044f6:	e757      	b.n	80043a8 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044f8:	2404      	movs	r4, #4
 80044fa:	e755      	b.n	80043a8 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044fc:	2500      	movs	r5, #0
 80044fe:	e7a4      	b.n	800444a <HAL_GPIO_Init+0xf6>
 8004500:	2501      	movs	r5, #1
 8004502:	e7a2      	b.n	800444a <HAL_GPIO_Init+0xf6>
 8004504:	2502      	movs	r5, #2
 8004506:	e7a0      	b.n	800444a <HAL_GPIO_Init+0xf6>
 8004508:	2503      	movs	r5, #3
 800450a:	e79e      	b.n	800444a <HAL_GPIO_Init+0xf6>
 800450c:	2504      	movs	r5, #4
 800450e:	e79c      	b.n	800444a <HAL_GPIO_Init+0xf6>
 8004510:	40021000 	.word	0x40021000
 8004514:	40010400 	.word	0x40010400
 8004518:	40010800 	.word	0x40010800
 800451c:	40011c00 	.word	0x40011c00
 8004520:	10210000 	.word	0x10210000
 8004524:	10110000 	.word	0x10110000
 8004528:	10310000 	.word	0x10310000

0800452c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800452c:	b10a      	cbz	r2, 8004532 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800452e:	6101      	str	r1, [r0, #16]
 8004530:	4770      	bx	lr
 8004532:	0409      	lsls	r1, r1, #16
 8004534:	e7fb      	b.n	800452e <HAL_GPIO_WritePin+0x2>
	...

08004538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800453c:	4605      	mov	r5, r0
 800453e:	b908      	cbnz	r0, 8004544 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004540:	2001      	movs	r0, #1
 8004542:	e03c      	b.n	80045be <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004544:	6803      	ldr	r3, [r0, #0]
 8004546:	07db      	lsls	r3, r3, #31
 8004548:	d410      	bmi.n	800456c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	682b      	ldr	r3, [r5, #0]
 800454c:	079f      	lsls	r7, r3, #30
 800454e:	d45d      	bmi.n	800460c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	0719      	lsls	r1, r3, #28
 8004554:	f100 8094 	bmi.w	8004680 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	075a      	lsls	r2, r3, #29
 800455c:	f100 80be 	bmi.w	80046dc <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	69e8      	ldr	r0, [r5, #28]
 8004562:	2800      	cmp	r0, #0
 8004564:	f040 812c 	bne.w	80047c0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8004568:	2000      	movs	r0, #0
 800456a:	e028      	b.n	80045be <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800456c:	4c8f      	ldr	r4, [pc, #572]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 800456e:	6863      	ldr	r3, [r4, #4]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b04      	cmp	r3, #4
 8004576:	d007      	beq.n	8004588 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b08      	cmp	r3, #8
 8004580:	d109      	bne.n	8004596 <HAL_RCC_OscConfig+0x5e>
 8004582:	6863      	ldr	r3, [r4, #4]
 8004584:	03de      	lsls	r6, r3, #15
 8004586:	d506      	bpl.n	8004596 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	039c      	lsls	r4, r3, #14
 800458c:	d5dd      	bpl.n	800454a <HAL_RCC_OscConfig+0x12>
 800458e:	686b      	ldr	r3, [r5, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1da      	bne.n	800454a <HAL_RCC_OscConfig+0x12>
 8004594:	e7d4      	b.n	8004540 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004596:	686b      	ldr	r3, [r5, #4]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d112      	bne.n	80045c4 <HAL_RCC_OscConfig+0x8c>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045a6:	f7fe ff85 	bl	80034b4 <HAL_GetTick>
 80045aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	0398      	lsls	r0, r3, #14
 80045b0:	d4cb      	bmi.n	800454a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b2:	f7fe ff7f 	bl	80034b4 <HAL_GetTick>
 80045b6:	1b80      	subs	r0, r0, r6
 80045b8:	2864      	cmp	r0, #100	; 0x64
 80045ba:	d9f7      	bls.n	80045ac <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80045bc:	2003      	movs	r0, #3
}
 80045be:	b002      	add	sp, #8
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c4:	b99b      	cbnz	r3, 80045ee <HAL_RCC_OscConfig+0xb6>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045d6:	f7fe ff6d 	bl	80034b4 <HAL_GetTick>
 80045da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	0399      	lsls	r1, r3, #14
 80045e0:	d5b3      	bpl.n	800454a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e2:	f7fe ff67 	bl	80034b4 <HAL_GetTick>
 80045e6:	1b80      	subs	r0, r0, r6
 80045e8:	2864      	cmp	r0, #100	; 0x64
 80045ea:	d9f7      	bls.n	80045dc <HAL_RCC_OscConfig+0xa4>
 80045ec:	e7e6      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	d103      	bne.n	80045fe <HAL_RCC_OscConfig+0xc6>
 80045f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	e7cf      	b.n	800459e <HAL_RCC_OscConfig+0x66>
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460a:	e7cb      	b.n	80045a4 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460c:	4c67      	ldr	r4, [pc, #412]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	f013 0f0c 	tst.w	r3, #12
 8004614:	d007      	beq.n	8004626 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004616:	6863      	ldr	r3, [r4, #4]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d110      	bne.n	8004642 <HAL_RCC_OscConfig+0x10a>
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	03da      	lsls	r2, r3, #15
 8004624:	d40d      	bmi.n	8004642 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	079b      	lsls	r3, r3, #30
 800462a:	d502      	bpl.n	8004632 <HAL_RCC_OscConfig+0xfa>
 800462c:	692b      	ldr	r3, [r5, #16]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d186      	bne.n	8004540 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	696a      	ldr	r2, [r5, #20]
 8004636:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800463a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	e786      	b.n	8004550 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004642:	692a      	ldr	r2, [r5, #16]
 8004644:	4b5a      	ldr	r3, [pc, #360]	; (80047b0 <HAL_RCC_OscConfig+0x278>)
 8004646:	b16a      	cbz	r2, 8004664 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800464c:	f7fe ff32 	bl	80034b4 <HAL_GetTick>
 8004650:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	079f      	lsls	r7, r3, #30
 8004656:	d4ec      	bmi.n	8004632 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004658:	f7fe ff2c 	bl	80034b4 <HAL_GetTick>
 800465c:	1b80      	subs	r0, r0, r6
 800465e:	2802      	cmp	r0, #2
 8004660:	d9f7      	bls.n	8004652 <HAL_RCC_OscConfig+0x11a>
 8004662:	e7ab      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8004664:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004666:	f7fe ff25 	bl	80034b4 <HAL_GetTick>
 800466a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	0798      	lsls	r0, r3, #30
 8004670:	f57f af6e 	bpl.w	8004550 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004674:	f7fe ff1e 	bl	80034b4 <HAL_GetTick>
 8004678:	1b80      	subs	r0, r0, r6
 800467a:	2802      	cmp	r0, #2
 800467c:	d9f6      	bls.n	800466c <HAL_RCC_OscConfig+0x134>
 800467e:	e79d      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004680:	69aa      	ldr	r2, [r5, #24]
 8004682:	4c4a      	ldr	r4, [pc, #296]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004684:	4b4b      	ldr	r3, [pc, #300]	; (80047b4 <HAL_RCC_OscConfig+0x27c>)
 8004686:	b1da      	cbz	r2, 80046c0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800468c:	f7fe ff12 	bl	80034b4 <HAL_GetTick>
 8004690:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004694:	079b      	lsls	r3, r3, #30
 8004696:	d50d      	bpl.n	80046b4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004698:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800469c:	4b46      	ldr	r3, [pc, #280]	; (80047b8 <HAL_RCC_OscConfig+0x280>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80046a4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80046a6:	bf00      	nop
  }
  while (Delay --);
 80046a8:	9b01      	ldr	r3, [sp, #4]
 80046aa:	1e5a      	subs	r2, r3, #1
 80046ac:	9201      	str	r2, [sp, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f9      	bne.n	80046a6 <HAL_RCC_OscConfig+0x16e>
 80046b2:	e751      	b.n	8004558 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b4:	f7fe fefe 	bl	80034b4 <HAL_GetTick>
 80046b8:	1b80      	subs	r0, r0, r6
 80046ba:	2802      	cmp	r0, #2
 80046bc:	d9e9      	bls.n	8004692 <HAL_RCC_OscConfig+0x15a>
 80046be:	e77d      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80046c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80046c2:	f7fe fef7 	bl	80034b4 <HAL_GetTick>
 80046c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046ca:	079f      	lsls	r7, r3, #30
 80046cc:	f57f af44 	bpl.w	8004558 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fe fef0 	bl	80034b4 <HAL_GetTick>
 80046d4:	1b80      	subs	r0, r0, r6
 80046d6:	2802      	cmp	r0, #2
 80046d8:	d9f6      	bls.n	80046c8 <HAL_RCC_OscConfig+0x190>
 80046da:	e76f      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046dc:	4c33      	ldr	r4, [pc, #204]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80046de:	69e3      	ldr	r3, [r4, #28]
 80046e0:	00d8      	lsls	r0, r3, #3
 80046e2:	d424      	bmi.n	800472e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80046e4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	69e3      	ldr	r3, [r4, #28]
 80046e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ec:	61e3      	str	r3, [r4, #28]
 80046ee:	69e3      	ldr	r3, [r4, #28]
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	4e30      	ldr	r6, [pc, #192]	; (80047bc <HAL_RCC_OscConfig+0x284>)
 80046fa:	6833      	ldr	r3, [r6, #0]
 80046fc:	05d9      	lsls	r1, r3, #23
 80046fe:	d518      	bpl.n	8004732 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004700:	68eb      	ldr	r3, [r5, #12]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d126      	bne.n	8004754 <HAL_RCC_OscConfig+0x21c>
 8004706:	6a23      	ldr	r3, [r4, #32]
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800470e:	f7fe fed1 	bl	80034b4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004712:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004716:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004718:	6a23      	ldr	r3, [r4, #32]
 800471a:	079b      	lsls	r3, r3, #30
 800471c:	d53f      	bpl.n	800479e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800471e:	2f00      	cmp	r7, #0
 8004720:	f43f af1e 	beq.w	8004560 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	69e3      	ldr	r3, [r4, #28]
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472a:	61e3      	str	r3, [r4, #28]
 800472c:	e718      	b.n	8004560 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2700      	movs	r7, #0
 8004730:	e7e2      	b.n	80046f8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	6833      	ldr	r3, [r6, #0]
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800473a:	f7fe febb 	bl	80034b4 <HAL_GetTick>
 800473e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	6833      	ldr	r3, [r6, #0]
 8004742:	05da      	lsls	r2, r3, #23
 8004744:	d4dc      	bmi.n	8004700 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fe feb5 	bl	80034b4 <HAL_GetTick>
 800474a:	eba0 0008 	sub.w	r0, r0, r8
 800474e:	2864      	cmp	r0, #100	; 0x64
 8004750:	d9f6      	bls.n	8004740 <HAL_RCC_OscConfig+0x208>
 8004752:	e733      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004754:	b9ab      	cbnz	r3, 8004782 <HAL_RCC_OscConfig+0x24a>
 8004756:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004758:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	6223      	str	r3, [r4, #32]
 8004762:	6a23      	ldr	r3, [r4, #32]
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800476a:	f7fe fea3 	bl	80034b4 <HAL_GetTick>
 800476e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004770:	6a23      	ldr	r3, [r4, #32]
 8004772:	0798      	lsls	r0, r3, #30
 8004774:	d5d3      	bpl.n	800471e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f7fe fe9d 	bl	80034b4 <HAL_GetTick>
 800477a:	1b80      	subs	r0, r0, r6
 800477c:	4540      	cmp	r0, r8
 800477e:	d9f7      	bls.n	8004770 <HAL_RCC_OscConfig+0x238>
 8004780:	e71c      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004782:	2b05      	cmp	r3, #5
 8004784:	6a23      	ldr	r3, [r4, #32]
 8004786:	d103      	bne.n	8004790 <HAL_RCC_OscConfig+0x258>
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	6223      	str	r3, [r4, #32]
 800478e:	e7ba      	b.n	8004706 <HAL_RCC_OscConfig+0x1ce>
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	6223      	str	r3, [r4, #32]
 8004796:	6a23      	ldr	r3, [r4, #32]
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	e7b6      	b.n	800470c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7fe fe89 	bl	80034b4 <HAL_GetTick>
 80047a2:	eba0 0008 	sub.w	r0, r0, r8
 80047a6:	42b0      	cmp	r0, r6
 80047a8:	d9b6      	bls.n	8004718 <HAL_RCC_OscConfig+0x1e0>
 80047aa:	e707      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
 80047ac:	40021000 	.word	0x40021000
 80047b0:	42420000 	.word	0x42420000
 80047b4:	42420480 	.word	0x42420480
 80047b8:	20000004 	.word	0x20000004
 80047bc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_RCC_OscConfig+0x334>)
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	461c      	mov	r4, r3
 80047c6:	f002 020c 	and.w	r2, r2, #12
 80047ca:	2a08      	cmp	r2, #8
 80047cc:	d03d      	beq.n	800484a <HAL_RCC_OscConfig+0x312>
 80047ce:	2300      	movs	r3, #0
 80047d0:	4e27      	ldr	r6, [pc, #156]	; (8004870 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80047d4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d6:	d12b      	bne.n	8004830 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80047d8:	f7fe fe6c 	bl	80034b4 <HAL_GetTick>
 80047dc:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	0199      	lsls	r1, r3, #6
 80047e2:	d41f      	bmi.n	8004824 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047e4:	6a2b      	ldr	r3, [r5, #32]
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ec:	6862      	ldr	r2, [r4, #4]
 80047ee:	68a9      	ldr	r1, [r5, #8]
 80047f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80047f4:	430a      	orrs	r2, r1
 80047f6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80047fa:	6862      	ldr	r2, [r4, #4]
 80047fc:	430b      	orrs	r3, r1
 80047fe:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004802:	4313      	orrs	r3, r2
 8004804:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004806:	2301      	movs	r3, #1
 8004808:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800480a:	f7fe fe53 	bl	80034b4 <HAL_GetTick>
 800480e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	019a      	lsls	r2, r3, #6
 8004814:	f53f aea8 	bmi.w	8004568 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004818:	f7fe fe4c 	bl	80034b4 <HAL_GetTick>
 800481c:	1b40      	subs	r0, r0, r5
 800481e:	2802      	cmp	r0, #2
 8004820:	d9f6      	bls.n	8004810 <HAL_RCC_OscConfig+0x2d8>
 8004822:	e6cb      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004824:	f7fe fe46 	bl	80034b4 <HAL_GetTick>
 8004828:	1bc0      	subs	r0, r0, r7
 800482a:	2802      	cmp	r0, #2
 800482c:	d9d7      	bls.n	80047de <HAL_RCC_OscConfig+0x2a6>
 800482e:	e6c5      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8004830:	f7fe fe40 	bl	80034b4 <HAL_GetTick>
 8004834:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	f57f ae95 	bpl.w	8004568 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483e:	f7fe fe39 	bl	80034b4 <HAL_GetTick>
 8004842:	1b40      	subs	r0, r0, r5
 8004844:	2802      	cmp	r0, #2
 8004846:	d9f6      	bls.n	8004836 <HAL_RCC_OscConfig+0x2fe>
 8004848:	e6b8      	b.n	80045bc <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800484a:	2801      	cmp	r0, #1
 800484c:	f43f aeb7 	beq.w	80045be <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8004850:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	6a2b      	ldr	r3, [r5, #32]
 8004854:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8004858:	429a      	cmp	r2, r3
 800485a:	f47f ae71 	bne.w	8004540 <HAL_RCC_OscConfig+0x8>
 800485e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004860:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8004864:	1ac0      	subs	r0, r0, r3
 8004866:	bf18      	it	ne
 8004868:	2001      	movne	r0, #1
 800486a:	e6a8      	b.n	80045be <HAL_RCC_OscConfig+0x86>
 800486c:	40021000 	.word	0x40021000
 8004870:	42420060 	.word	0x42420060

08004874 <HAL_RCC_GetSysClockFreq>:
{
 8004874:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004876:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004878:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800487a:	ac02      	add	r4, sp, #8
 800487c:	f103 0510 	add.w	r5, r3, #16
 8004880:	4622      	mov	r2, r4
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	3308      	adds	r3, #8
 8004888:	c203      	stmia	r2!, {r0, r1}
 800488a:	42ab      	cmp	r3, r5
 800488c:	4614      	mov	r4, r2
 800488e:	d1f7      	bne.n	8004880 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004890:	2301      	movs	r3, #1
 8004892:	f88d 3004 	strb.w	r3, [sp, #4]
 8004896:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8004898:	4911      	ldr	r1, [pc, #68]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800489a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800489e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80048a0:	f003 020c 	and.w	r2, r3, #12
 80048a4:	2a08      	cmp	r2, #8
 80048a6:	d117      	bne.n	80048d8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048a8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80048ac:	a806      	add	r0, sp, #24
 80048ae:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048b0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048b2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048b6:	d50c      	bpl.n	80048d2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048b8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ba:	480a      	ldr	r0, [pc, #40]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048bc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048c0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048c2:	aa06      	add	r2, sp, #24
 80048c4:	4413      	add	r3, r2
 80048c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ca:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80048ce:	b007      	add	sp, #28
 80048d0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048d2:	4805      	ldr	r0, [pc, #20]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x74>)
 80048d4:	4350      	muls	r0, r2
 80048d6:	e7fa      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80048d8:	4802      	ldr	r0, [pc, #8]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80048da:	e7f8      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x5a>
 80048dc:	08006cf6 	.word	0x08006cf6
 80048e0:	40021000 	.word	0x40021000
 80048e4:	007a1200 	.word	0x007a1200
 80048e8:	003d0900 	.word	0x003d0900

080048ec <HAL_RCC_ClockConfig>:
{
 80048ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80048f2:	4604      	mov	r4, r0
 80048f4:	b910      	cbnz	r0, 80048fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80048f6:	2001      	movs	r0, #1
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048fc:	4a45      	ldr	r2, [pc, #276]	; (8004a14 <HAL_RCC_ClockConfig+0x128>)
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	428b      	cmp	r3, r1
 8004906:	d329      	bcc.n	800495c <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004908:	6821      	ldr	r1, [r4, #0]
 800490a:	078e      	lsls	r6, r1, #30
 800490c:	d431      	bmi.n	8004972 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490e:	07ca      	lsls	r2, r1, #31
 8004910:	d444      	bmi.n	800499c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004912:	4a40      	ldr	r2, [pc, #256]	; (8004a14 <HAL_RCC_ClockConfig+0x128>)
 8004914:	6813      	ldr	r3, [r2, #0]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	429d      	cmp	r5, r3
 800491c:	d367      	bcc.n	80049ee <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491e:	6822      	ldr	r2, [r4, #0]
 8004920:	4d3d      	ldr	r5, [pc, #244]	; (8004a18 <HAL_RCC_ClockConfig+0x12c>)
 8004922:	f012 0f04 	tst.w	r2, #4
 8004926:	d16e      	bne.n	8004a06 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004928:	0713      	lsls	r3, r2, #28
 800492a:	d506      	bpl.n	800493a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800492c:	686b      	ldr	r3, [r5, #4]
 800492e:	6922      	ldr	r2, [r4, #16]
 8004930:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004934:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004938:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800493a:	f7ff ff9b 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 800493e:	686b      	ldr	r3, [r5, #4]
 8004940:	4a36      	ldr	r2, [pc, #216]	; (8004a1c <HAL_RCC_ClockConfig+0x130>)
 8004942:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	40d8      	lsrs	r0, r3
 800494a:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <HAL_RCC_ClockConfig+0x134>)
 800494c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800494e:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <HAL_RCC_ClockConfig+0x138>)
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	f7fe fd6d 	bl	8003430 <HAL_InitTick>
  return HAL_OK;
 8004956:	2000      	movs	r0, #0
 8004958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495c:	6813      	ldr	r3, [r2, #0]
 800495e:	f023 0307 	bic.w	r3, r3, #7
 8004962:	430b      	orrs	r3, r1
 8004964:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4299      	cmp	r1, r3
 800496e:	d1c2      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xa>
 8004970:	e7ca      	b.n	8004908 <HAL_RCC_ClockConfig+0x1c>
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004978:	bf1e      	ittt	ne
 800497a:	685a      	ldrne	r2, [r3, #4]
 800497c:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004980:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004982:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004984:	bf42      	ittt	mi
 8004986:	685a      	ldrmi	r2, [r3, #4]
 8004988:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800498c:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	68a0      	ldr	r0, [r4, #8]
 8004992:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004996:	4302      	orrs	r2, r0
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e7b8      	b.n	800490e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499c:	6862      	ldr	r2, [r4, #4]
 800499e:	4e1e      	ldr	r6, [pc, #120]	; (8004a18 <HAL_RCC_ClockConfig+0x12c>)
 80049a0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a4:	d11b      	bne.n	80049de <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049aa:	d0a4      	beq.n	80048f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ac:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	4313      	orrs	r3, r2
 80049b8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80049ba:	f7fe fd7b 	bl	80034b4 <HAL_GetTick>
 80049be:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c0:	6873      	ldr	r3, [r6, #4]
 80049c2:	6862      	ldr	r2, [r4, #4]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80049cc:	d0a1      	beq.n	8004912 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ce:	f7fe fd71 	bl	80034b4 <HAL_GetTick>
 80049d2:	1bc0      	subs	r0, r0, r7
 80049d4:	4540      	cmp	r0, r8
 80049d6:	d9f3      	bls.n	80049c0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80049d8:	2003      	movs	r0, #3
}
 80049da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049de:	2a02      	cmp	r2, #2
 80049e0:	d102      	bne.n	80049e8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049e6:	e7e0      	b.n	80049aa <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e8:	f013 0f02 	tst.w	r3, #2
 80049ec:	e7dd      	b.n	80049aa <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f023 0307 	bic.w	r3, r3, #7
 80049f4:	432b      	orrs	r3, r5
 80049f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f8:	6813      	ldr	r3, [r2, #0]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	429d      	cmp	r5, r3
 8004a00:	f47f af79 	bne.w	80048f6 <HAL_RCC_ClockConfig+0xa>
 8004a04:	e78b      	b.n	800491e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a06:	686b      	ldr	r3, [r5, #4]
 8004a08:	68e1      	ldr	r1, [r4, #12]
 8004a0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	606b      	str	r3, [r5, #4]
 8004a12:	e789      	b.n	8004928 <HAL_RCC_ClockConfig+0x3c>
 8004a14:	40022000 	.word	0x40022000
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08006d06 	.word	0x08006d06
 8004a20:	20000004 	.word	0x20000004
 8004a24:	2000000c 	.word	0x2000000c

08004a28 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x14>)
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004a32:	5cd3      	ldrb	r3, [r2, r3]
 8004a34:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004a36:	6810      	ldr	r0, [r2, #0]
}
 8004a38:	40d8      	lsrs	r0, r3
 8004a3a:	4770      	bx	lr
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	08006d16 	.word	0x08006d16
 8004a44:	20000004 	.word	0x20000004

08004a48 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x14>)
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004a52:	5cd3      	ldrb	r3, [r2, r3]
 8004a54:	4a03      	ldr	r2, [pc, #12]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004a56:	6810      	ldr	r0, [r2, #0]
}
 8004a58:	40d8      	lsrs	r0, r3
 8004a5a:	4770      	bx	lr
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	08006d16 	.word	0x08006d16
 8004a64:	20000004 	.word	0x20000004

08004a68 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a68:	6803      	ldr	r3, [r0, #0]
{
 8004a6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a6e:	07d9      	lsls	r1, r3, #31
{
 8004a70:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a72:	d520      	bpl.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a74:	4c35      	ldr	r4, [pc, #212]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004a76:	69e3      	ldr	r3, [r4, #28]
 8004a78:	00da      	lsls	r2, r3, #3
 8004a7a:	d432      	bmi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004a7c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	69e3      	ldr	r3, [r4, #28]
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	61e3      	str	r3, [r4, #28]
 8004a86:	69e3      	ldr	r3, [r4, #28]
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	4e2f      	ldr	r6, [pc, #188]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a92:	6833      	ldr	r3, [r6, #0]
 8004a94:	05db      	lsls	r3, r3, #23
 8004a96:	d526      	bpl.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a98:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a9a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004a9e:	d136      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aa0:	6a23      	ldr	r3, [r4, #32]
 8004aa2:	686a      	ldr	r2, [r5, #4]
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004aac:	b11f      	cbz	r7, 8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aae:	69e3      	ldr	r3, [r4, #28]
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ab6:	6828      	ldr	r0, [r5, #0]
 8004ab8:	0783      	lsls	r3, r0, #30
 8004aba:	d506      	bpl.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004abc:	4a23      	ldr	r2, [pc, #140]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004abe:	68a9      	ldr	r1, [r5, #8]
 8004ac0:	6853      	ldr	r3, [r2, #4]
 8004ac2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aca:	f010 0010 	ands.w	r0, r0, #16
 8004ace:	d01b      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004ad2:	6969      	ldr	r1, [r5, #20]
 8004ad4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ad6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ad8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6053      	str	r3, [r2, #4]
 8004ae0:	e012      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2700      	movs	r7, #0
 8004ae4:	e7d4      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae6:	6833      	ldr	r3, [r6, #0]
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004aee:	f7fe fce1 	bl	80034b4 <HAL_GetTick>
 8004af2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	6833      	ldr	r3, [r6, #0]
 8004af6:	05d8      	lsls	r0, r3, #23
 8004af8:	d4ce      	bmi.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fe fcdb 	bl	80034b4 <HAL_GetTick>
 8004afe:	eba0 0008 	sub.w	r0, r0, r8
 8004b02:	2864      	cmp	r0, #100	; 0x64
 8004b04:	d9f6      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8004b06:	2003      	movs	r0, #3
}
 8004b08:	b002      	add	sp, #8
 8004b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b0e:	686a      	ldr	r2, [r5, #4]
 8004b10:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d0c3      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b18:	2001      	movs	r0, #1
 8004b1a:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b1c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b1e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b20:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b26:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8004b28:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b2a:	07d9      	lsls	r1, r3, #31
 8004b2c:	d5b8      	bpl.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8004b2e:	f7fe fcc1 	bl	80034b4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004b36:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b38:	6a23      	ldr	r3, [r4, #32]
 8004b3a:	079a      	lsls	r2, r3, #30
 8004b3c:	d4b0      	bmi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fe fcb9 	bl	80034b4 <HAL_GetTick>
 8004b42:	1b80      	subs	r0, r0, r6
 8004b44:	4540      	cmp	r0, r8
 8004b46:	d9f7      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8004b48:	e7dd      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40007000 	.word	0x40007000
 8004b54:	42420440 	.word	0x42420440

08004b58 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b58:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8004b5a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8004b6c:	bf1e      	ittt	ne
 8004b6e:	681a      	ldrne	r2, [r3, #0]
 8004b70:	f042 0201 	orrne.w	r2, r2, #1
 8004b74:	601a      	strne	r2, [r3, #0]
}
 8004b76:	4770      	bx	lr

08004b78 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b78:	6803      	ldr	r3, [r0, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b82:	f241 1211 	movw	r2, #4369	; 0x1111
 8004b86:	6a19      	ldr	r1, [r3, #32]
 8004b88:	4211      	tst	r1, r2
 8004b8a:	d108      	bne.n	8004b9e <HAL_TIM_Base_Stop_IT+0x26>
 8004b8c:	f240 4244 	movw	r2, #1092	; 0x444
 8004b90:	6a19      	ldr	r1, [r3, #32]
 8004b92:	4211      	tst	r1, r2
 8004b94:	bf02      	ittt	eq
 8004b96:	681a      	ldreq	r2, [r3, #0]
 8004b98:	f022 0201 	biceq.w	r2, r2, #1
 8004b9c:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIM_OC_DelayElapsedCallback>:
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIM_IC_CaptureCallback>:
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_TIM_TriggerCallback>:
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004baa:	6803      	ldr	r3, [r0, #0]
{
 8004bac:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bae:	691a      	ldr	r2, [r3, #16]
{
 8004bb0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb2:	0791      	lsls	r1, r2, #30
 8004bb4:	d50e      	bpl.n	8004bd4 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	0792      	lsls	r2, r2, #30
 8004bba:	d50b      	bpl.n	8004bd4 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bbc:	f06f 0202 	mvn.w	r2, #2
 8004bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc2:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc8:	079b      	lsls	r3, r3, #30
 8004bca:	d077      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bcc:	f7ff ffea 	bl	8004ba4 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	0750      	lsls	r0, r2, #29
 8004bda:	d510      	bpl.n	8004bfe <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	0751      	lsls	r1, r2, #29
 8004be0:	d50d      	bpl.n	8004bfe <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be2:	f06f 0204 	mvn.w	r2, #4
 8004be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be8:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bea:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bee:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf4:	d068      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	f7ff ffd5 	bl	8004ba4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	0712      	lsls	r2, r2, #28
 8004c04:	d50f      	bpl.n	8004c26 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	0710      	lsls	r0, r2, #28
 8004c0a:	d50c      	bpl.n	8004c26 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c0c:	f06f 0208 	mvn.w	r2, #8
 8004c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c12:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c14:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c16:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c18:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c1c:	d05a      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	f7ff ffc1 	bl	8004ba4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c22:	2300      	movs	r3, #0
 8004c24:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	06d2      	lsls	r2, r2, #27
 8004c2c:	d510      	bpl.n	8004c50 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	06d0      	lsls	r0, r2, #27
 8004c32:	d50d      	bpl.n	8004c50 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c34:	f06f 0210 	mvn.w	r2, #16
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c3a:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c3c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c3e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c40:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c44:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c46:	d04b      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c48:	f7ff ffac 	bl	8004ba4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	07d1      	lsls	r1, r2, #31
 8004c56:	d508      	bpl.n	8004c6a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	07d2      	lsls	r2, r2, #31
 8004c5c:	d505      	bpl.n	8004c6a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c5e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c64:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c66:	f7fd fb63 	bl	8002330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	0610      	lsls	r0, r2, #24
 8004c70:	d508      	bpl.n	8004c84 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	0611      	lsls	r1, r2, #24
 8004c76:	d505      	bpl.n	8004c84 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c7c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c80:	f000 f959 	bl	8004f36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	0652      	lsls	r2, r2, #25
 8004c8a:	d508      	bpl.n	8004c9e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	0650      	lsls	r0, r2, #25
 8004c90:	d505      	bpl.n	8004c9e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c96:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c98:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c9a:	f7ff ff85 	bl	8004ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	0691      	lsls	r1, r2, #26
 8004ca4:	d522      	bpl.n	8004cec <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	0692      	lsls	r2, r2, #26
 8004caa:	d51f      	bpl.n	8004cec <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cac:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb0:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004cb8:	f000 b93c 	b.w	8004f34 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbc:	f7ff ff71 	bl	8004ba2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7ff ff70 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
 8004cc6:	e783      	b.n	8004bd0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc8:	f7ff ff6b 	bl	8004ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7ff ff6a 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
 8004cd2:	e792      	b.n	8004bfa <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd4:	f7ff ff65 	bl	8004ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f7ff ff64 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
 8004cde:	e7a0      	b.n	8004c22 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce0:	f7ff ff5f 	bl	8004ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f7ff ff5e 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
 8004cea:	e7af      	b.n	8004c4c <HAL_TIM_IRQHandler+0xa2>
 8004cec:	bd10      	pop	{r4, pc}
	...

08004cf0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf0:	4a24      	ldr	r2, [pc, #144]	; (8004d84 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8004cf2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf4:	4290      	cmp	r0, r2
 8004cf6:	d012      	beq.n	8004d1e <TIM_Base_SetConfig+0x2e>
 8004cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfc:	4290      	cmp	r0, r2
 8004cfe:	d00e      	beq.n	8004d1e <TIM_Base_SetConfig+0x2e>
 8004d00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004d04:	d00b      	beq.n	8004d1e <TIM_Base_SetConfig+0x2e>
 8004d06:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004d0a:	4290      	cmp	r0, r2
 8004d0c:	d007      	beq.n	8004d1e <TIM_Base_SetConfig+0x2e>
 8004d0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d12:	4290      	cmp	r0, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_Base_SetConfig+0x2e>
 8004d16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d1a:	4290      	cmp	r0, r2
 8004d1c:	d11d      	bne.n	8004d5a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004d1e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d24:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d26:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <TIM_Base_SetConfig+0x94>)
 8004d28:	4290      	cmp	r0, r2
 8004d2a:	d012      	beq.n	8004d52 <TIM_Base_SetConfig+0x62>
 8004d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d30:	4290      	cmp	r0, r2
 8004d32:	d00e      	beq.n	8004d52 <TIM_Base_SetConfig+0x62>
 8004d34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004d38:	d00b      	beq.n	8004d52 <TIM_Base_SetConfig+0x62>
 8004d3a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004d3e:	4290      	cmp	r0, r2
 8004d40:	d007      	beq.n	8004d52 <TIM_Base_SetConfig+0x62>
 8004d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d46:	4290      	cmp	r0, r2
 8004d48:	d003      	beq.n	8004d52 <TIM_Base_SetConfig+0x62>
 8004d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d4e:	4290      	cmp	r0, r2
 8004d50:	d103      	bne.n	8004d5a <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d52:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d58:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d5a:	694a      	ldr	r2, [r1, #20]
 8004d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d60:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004d62:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d64:	688b      	ldr	r3, [r1, #8]
 8004d66:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d68:	680b      	ldr	r3, [r1, #0]
 8004d6a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <TIM_Base_SetConfig+0x94>)
 8004d6e:	4298      	cmp	r0, r3
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d76:	4298      	cmp	r0, r3
 8004d78:	d101      	bne.n	8004d7e <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d7a:	690b      	ldr	r3, [r1, #16]
 8004d7c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	6143      	str	r3, [r0, #20]
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00

08004d88 <HAL_TIM_Base_Init>:
{
 8004d88:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	b1a0      	cbz	r0, 8004db8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d96:	b91b      	cbnz	r3, 8004da0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004d98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d9c:	f7fe fa8c 	bl	80032b8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	1d21      	adds	r1, r4, #4
 8004daa:	f7ff ffa1 	bl	8004cf0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004dae:	2301      	movs	r3, #1
  return HAL_OK;
 8004db0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004db2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004db6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004db8:	2001      	movs	r0, #1
}
 8004dba:	bd10      	pop	{r4, pc}

08004dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dbc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dbe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004dca:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dcc:	6083      	str	r3, [r0, #8]
 8004dce:	bd10      	pop	{r4, pc}

08004dd0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004dd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004dd4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004dd6:	2b01      	cmp	r3, #1
{
 8004dd8:	4604      	mov	r4, r0
 8004dda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004dde:	d019      	beq.n	8004e14 <HAL_TIM_ConfigClockSource+0x44>
 8004de0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004de2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004de6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004de8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004df6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004df8:	680b      	ldr	r3, [r1, #0]
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d065      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xfa>
 8004dfe:	d815      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x5c>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d00c      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x4e>
 8004e04:	d807      	bhi.n	8004e16 <HAL_TIM_ConfigClockSource+0x46>
 8004e06:	b153      	cbz	r3, 8004e1e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8004e08:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004e0a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004e10:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d001      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x4e>
 8004e1a:	2b30      	cmp	r3, #48	; 0x30
 8004e1c:	d1f4      	bne.n	8004e08 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8004e1e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e20:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	e01a      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8004e2c:	2b60      	cmp	r3, #96	; 0x60
 8004e2e:	d034      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0xca>
 8004e30:	d819      	bhi.n	8004e66 <HAL_TIM_ConfigClockSource+0x96>
 8004e32:	2b50      	cmp	r3, #80	; 0x50
 8004e34:	d1e8      	bne.n	8004e08 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e36:	684a      	ldr	r2, [r1, #4]
 8004e38:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004e3a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	f025 0501 	bic.w	r5, r5, #1
 8004e46:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e48:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004e4a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e50:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004e54:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004e56:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004e58:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e5e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004e62:	6083      	str	r3, [r0, #8]
 8004e64:	e7d0      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8004e66:	2b70      	cmp	r3, #112	; 0x70
 8004e68:	d00c      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0xb4>
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	d1cb      	bne.n	8004e08 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	68cb      	ldr	r3, [r1, #12]
 8004e72:	684a      	ldr	r2, [r1, #4]
 8004e74:	6889      	ldr	r1, [r1, #8]
 8004e76:	f7ff ffa1 	bl	8004dbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	6893      	ldr	r3, [r2, #8]
 8004e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e82:	e008      	b.n	8004e96 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8004e84:	68cb      	ldr	r3, [r1, #12]
 8004e86:	684a      	ldr	r2, [r1, #4]
 8004e88:	6889      	ldr	r1, [r1, #8]
 8004e8a:	f7ff ff97 	bl	8004dbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e96:	6093      	str	r3, [r2, #8]
      break;
 8004e98:	e7b6      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9a:	684d      	ldr	r5, [r1, #4]
 8004e9c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9e:	6a01      	ldr	r1, [r0, #32]
 8004ea0:	f021 0110 	bic.w	r1, r1, #16
 8004ea4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8004ea8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eaa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eb2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eb6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004eba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004ebc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004ebe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8004ec8:	e7cb      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eca:	684a      	ldr	r2, [r1, #4]
 8004ecc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004ece:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ed2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed6:	f025 0501 	bic.w	r5, r5, #1
 8004eda:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004edc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004ede:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004ee8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004eea:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004eec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ef2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8004ef6:	e7b4      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x92>

08004ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ef8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004efc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	f04f 0302 	mov.w	r3, #2
 8004f04:	d014      	beq.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f06:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004f0c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f0e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f10:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f12:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f1c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f20:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f22:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004f30:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004f32:	bd30      	pop	{r4, r5, pc}

08004f34 <HAL_TIMEx_CommutCallback>:
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	4770      	bx	lr

08004f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	6803      	ldr	r3, [r0, #0]
 8004f3e:	68c1      	ldr	r1, [r0, #12]
 8004f40:	691a      	ldr	r2, [r3, #16]
 8004f42:	2419      	movs	r4, #25
 8004f44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f4c:	6882      	ldr	r2, [r0, #8]
 8004f4e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004f50:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f52:	4302      	orrs	r2, r0
 8004f54:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004f56:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004f5a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f5e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004f60:	430a      	orrs	r2, r1
 8004f62:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	69a9      	ldr	r1, [r5, #24]
 8004f68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004f70:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <UART_SetConfig+0x70>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d114      	bne.n	8004fa0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f76:	f7ff fd67 	bl	8004a48 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f7a:	4360      	muls	r0, r4
 8004f7c:	686c      	ldr	r4, [r5, #4]
 8004f7e:	2264      	movs	r2, #100	; 0x64
 8004f80:	00a4      	lsls	r4, r4, #2
 8004f82:	fbb0 f0f4 	udiv	r0, r0, r4
 8004f86:	fbb0 f4f2 	udiv	r4, r0, r2
 8004f8a:	fb02 0314 	mls	r3, r2, r4, r0
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	3332      	adds	r3, #50	; 0x32
 8004f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f96:	6829      	ldr	r1, [r5, #0]
 8004f98:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004f9c:	608b      	str	r3, [r1, #8]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7ff fd42 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	e7e9      	b.n	8004f7a <UART_SetConfig+0x42>
 8004fa6:	bf00      	nop
 8004fa8:	40013800 	.word	0x40013800

08004fac <HAL_UART_Init>:
{
 8004fac:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004fae:	4604      	mov	r4, r0
 8004fb0:	b340      	cbz	r0, 8005004 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004fb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004fba:	b91b      	cbnz	r3, 8004fc4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004fbc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004fc0:	f7fe f9ca 	bl	8003358 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004fc4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004fc6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004fc8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004fcc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004fce:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004fd6:	f7ff ffaf 	bl	8004f38 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fda:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fec:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ff4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004ff6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ffa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8005002:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005004:	2001      	movs	r0, #1
}
 8005006:	bd10      	pop	{r4, pc}

08005008 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005008:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800500a:	e003      	b.n	8005014 <LoopCopyDataInit>

0800500c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800500e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005010:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005012:	3104      	adds	r1, #4

08005014 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005014:	480a      	ldr	r0, [pc, #40]	; (8005040 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005018:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800501a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800501c:	d3f6      	bcc.n	800500c <CopyDataInit>
  ldr r2, =_sbss
 800501e:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005020:	e002      	b.n	8005028 <LoopFillZerobss>

08005022 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005022:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005024:	f842 3b04 	str.w	r3, [r2], #4

08005028 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005028:	4b08      	ldr	r3, [pc, #32]	; (800504c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800502a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800502c:	d3f9      	bcc.n	8005022 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800502e:	f7fe f8e7 	bl	8003200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005032:	f001 fd49 	bl	8006ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005036:	f7fd fff1 	bl	800301c <main>
  bx lr
 800503a:	4770      	bx	lr
  ldr r3, =_sidata
 800503c:	08007184 	.word	0x08007184
  ldr r0, =_sdata
 8005040:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005044:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8005048:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 800504c:	20000408 	.word	0x20000408

08005050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005050:	e7fe      	b.n	8005050 <ADC1_2_IRQHandler>

08005052 <_ZdlPv>:
 8005052:	f001 bd5d 	b.w	8006b10 <free>

08005056 <__aeabi_atexit>:
 8005056:	460b      	mov	r3, r1
 8005058:	4601      	mov	r1, r0
 800505a:	4618      	mov	r0, r3
 800505c:	f001 bd20 	b.w	8006aa0 <__cxa_atexit>

08005060 <__cxa_end_cleanup>:
 8005060:	b41e      	push	{r1, r2, r3, r4}
 8005062:	f000 f89c 	bl	800519e <__gnu_end_cleanup>
 8005066:	bc1e      	pop	{r1, r2, r3, r4}
 8005068:	f7fc fdc0 	bl	8001bec <_Unwind_Resume>

0800506c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800506c:	7803      	ldrb	r3, [r0, #0]
 800506e:	2b47      	cmp	r3, #71	; 0x47
 8005070:	d117      	bne.n	80050a2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005072:	7843      	ldrb	r3, [r0, #1]
 8005074:	2b4e      	cmp	r3, #78	; 0x4e
 8005076:	d114      	bne.n	80050a2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005078:	7883      	ldrb	r3, [r0, #2]
 800507a:	2b55      	cmp	r3, #85	; 0x55
 800507c:	d111      	bne.n	80050a2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800507e:	78c3      	ldrb	r3, [r0, #3]
 8005080:	2b43      	cmp	r3, #67	; 0x43
 8005082:	d10e      	bne.n	80050a2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005084:	7903      	ldrb	r3, [r0, #4]
 8005086:	2b43      	cmp	r3, #67	; 0x43
 8005088:	d10b      	bne.n	80050a2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800508a:	7943      	ldrb	r3, [r0, #5]
 800508c:	2b2b      	cmp	r3, #43	; 0x2b
 800508e:	d108      	bne.n	80050a2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005090:	7983      	ldrb	r3, [r0, #6]
 8005092:	2b2b      	cmp	r3, #43	; 0x2b
 8005094:	d105      	bne.n	80050a2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005096:	79c0      	ldrb	r0, [r0, #7]
 8005098:	2801      	cmp	r0, #1
 800509a:	bf8c      	ite	hi
 800509c:	2000      	movhi	r0, #0
 800509e:	2001      	movls	r0, #1
 80050a0:	4770      	bx	lr
 80050a2:	2000      	movs	r0, #0
 80050a4:	4770      	bx	lr
	...

080050a8 <__cxa_type_match>:
 80050a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80050ac:	461e      	mov	r6, r3
 80050ae:	7803      	ldrb	r3, [r0, #0]
 80050b0:	460d      	mov	r5, r1
 80050b2:	2b47      	cmp	r3, #71	; 0x47
 80050b4:	4602      	mov	r2, r0
 80050b6:	79c1      	ldrb	r1, [r0, #7]
 80050b8:	d147      	bne.n	800514a <__cxa_type_match+0xa2>
 80050ba:	7843      	ldrb	r3, [r0, #1]
 80050bc:	2b4e      	cmp	r3, #78	; 0x4e
 80050be:	d144      	bne.n	800514a <__cxa_type_match+0xa2>
 80050c0:	7883      	ldrb	r3, [r0, #2]
 80050c2:	2b55      	cmp	r3, #85	; 0x55
 80050c4:	d141      	bne.n	800514a <__cxa_type_match+0xa2>
 80050c6:	78c3      	ldrb	r3, [r0, #3]
 80050c8:	2b43      	cmp	r3, #67	; 0x43
 80050ca:	d13e      	bne.n	800514a <__cxa_type_match+0xa2>
 80050cc:	7903      	ldrb	r3, [r0, #4]
 80050ce:	2b46      	cmp	r3, #70	; 0x46
 80050d0:	d13b      	bne.n	800514a <__cxa_type_match+0xa2>
 80050d2:	7943      	ldrb	r3, [r0, #5]
 80050d4:	2b4f      	cmp	r3, #79	; 0x4f
 80050d6:	d138      	bne.n	800514a <__cxa_type_match+0xa2>
 80050d8:	7983      	ldrb	r3, [r0, #6]
 80050da:	2b52      	cmp	r3, #82	; 0x52
 80050dc:	d135      	bne.n	800514a <__cxa_type_match+0xa2>
 80050de:	2900      	cmp	r1, #0
 80050e0:	d133      	bne.n	800514a <__cxa_type_match+0xa2>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4608      	mov	r0, r1
 80050e6:	2400      	movs	r4, #0
 80050e8:	9401      	str	r4, [sp, #4]
 80050ea:	bb33      	cbnz	r3, 800513a <__cxa_type_match+0x92>
 80050ec:	bb38      	cbnz	r0, 800513e <__cxa_type_match+0x96>
 80050ee:	2901      	cmp	r1, #1
 80050f0:	bf0a      	itet	eq
 80050f2:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 80050f6:	f1a2 0320 	subne.w	r3, r2, #32
 80050fa:	3b78      	subeq	r3, #120	; 0x78
 80050fc:	2901      	cmp	r1, #1
 80050fe:	bf0c      	ite	eq
 8005100:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005104:	3258      	addne	r2, #88	; 0x58
 8005106:	681c      	ldr	r4, [r3, #0]
 8005108:	9201      	str	r2, [sp, #4]
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	4620      	mov	r0, r4
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4798      	blx	r3
 8005112:	b1b0      	cbz	r0, 8005142 <__cxa_type_match+0x9a>
 8005114:	2702      	movs	r7, #2
 8005116:	9b01      	ldr	r3, [sp, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	aa01      	add	r2, sp, #4
 8005120:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005124:	4621      	mov	r1, r4
 8005126:	2301      	movs	r3, #1
 8005128:	4628      	mov	r0, r5
 800512a:	47c0      	blx	r8
 800512c:	b158      	cbz	r0, 8005146 <__cxa_type_match+0x9e>
 800512e:	9b01      	ldr	r3, [sp, #4]
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	4638      	mov	r0, r7
 8005134:	b002      	add	sp, #8
 8005136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800513a:	4c08      	ldr	r4, [pc, #32]	; (800515c <__cxa_type_match+0xb4>)
 800513c:	e7e5      	b.n	800510a <__cxa_type_match+0x62>
 800513e:	4c08      	ldr	r4, [pc, #32]	; (8005160 <__cxa_type_match+0xb8>)
 8005140:	e7e3      	b.n	800510a <__cxa_type_match+0x62>
 8005142:	2701      	movs	r7, #1
 8005144:	e7ea      	b.n	800511c <__cxa_type_match+0x74>
 8005146:	4607      	mov	r7, r0
 8005148:	e7f3      	b.n	8005132 <__cxa_type_match+0x8a>
 800514a:	4610      	mov	r0, r2
 800514c:	f7ff ff8e 	bl	800506c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005150:	f080 0001 	eor.w	r0, r0, #1
 8005154:	b2c0      	uxtb	r0, r0
 8005156:	2300      	movs	r3, #0
 8005158:	e7c5      	b.n	80050e6 <__cxa_type_match+0x3e>
 800515a:	bf00      	nop
 800515c:	08006d94 	.word	0x08006d94
 8005160:	08006d9c 	.word	0x08006d9c

08005164 <__cxa_begin_cleanup>:
 8005164:	b510      	push	{r4, lr}
 8005166:	4604      	mov	r4, r0
 8005168:	f000 fc7c 	bl	8005a64 <__cxa_get_globals>
 800516c:	4602      	mov	r2, r0
 800516e:	4620      	mov	r0, r4
 8005170:	f1a4 0120 	sub.w	r1, r4, #32
 8005174:	f7ff ff7a 	bl	800506c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005178:	b160      	cbz	r0, 8005194 <__cxa_begin_cleanup+0x30>
 800517a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800517e:	3301      	adds	r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	f844 3c04 	str.w	r3, [r4, #-4]
 8005186:	d103      	bne.n	8005190 <__cxa_begin_cleanup+0x2c>
 8005188:	6893      	ldr	r3, [r2, #8]
 800518a:	f844 3c08 	str.w	r3, [r4, #-8]
 800518e:	6091      	str	r1, [r2, #8]
 8005190:	2001      	movs	r0, #1
 8005192:	bd10      	pop	{r4, pc}
 8005194:	6893      	ldr	r3, [r2, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f9      	beq.n	800518e <__cxa_begin_cleanup+0x2a>
 800519a:	f000 fc4b 	bl	8005a34 <_ZSt9terminatev>

0800519e <__gnu_end_cleanup>:
 800519e:	b510      	push	{r4, lr}
 80051a0:	f000 fc60 	bl	8005a64 <__cxa_get_globals>
 80051a4:	6882      	ldr	r2, [r0, #8]
 80051a6:	4601      	mov	r1, r0
 80051a8:	b90a      	cbnz	r2, 80051ae <__gnu_end_cleanup+0x10>
 80051aa:	f000 fc43 	bl	8005a34 <_ZSt9terminatev>
 80051ae:	f102 0420 	add.w	r4, r2, #32
 80051b2:	4620      	mov	r0, r4
 80051b4:	f7ff ff5a 	bl	800506c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80051b8:	b140      	cbz	r0, 80051cc <__gnu_end_cleanup+0x2e>
 80051ba:	69d3      	ldr	r3, [r2, #28]
 80051bc:	3b01      	subs	r3, #1
 80051be:	61d3      	str	r3, [r2, #28]
 80051c0:	b913      	cbnz	r3, 80051c8 <__gnu_end_cleanup+0x2a>
 80051c2:	6990      	ldr	r0, [r2, #24]
 80051c4:	6088      	str	r0, [r1, #8]
 80051c6:	6193      	str	r3, [r2, #24]
 80051c8:	4620      	mov	r0, r4
 80051ca:	bd10      	pop	{r4, pc}
 80051cc:	6088      	str	r0, [r1, #8]
 80051ce:	e7fb      	b.n	80051c8 <__gnu_end_cleanup+0x2a>

080051d0 <_ZL12read_uleb128PKhPm>:
 80051d0:	2300      	movs	r3, #0
 80051d2:	b570      	push	{r4, r5, r6, lr}
 80051d4:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 80051d8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 80051dc:	f810 5b01 	ldrb.w	r5, [r0], #1
 80051e0:	1994      	adds	r4, r2, r6
 80051e2:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 80051e6:	40a2      	lsls	r2, r4
 80051e8:	4313      	orrs	r3, r2
 80051ea:	062a      	lsls	r2, r5, #24
 80051ec:	d4f4      	bmi.n	80051d8 <_ZL12read_uleb128PKhPm+0x8>
 80051ee:	600b      	str	r3, [r1, #0]
 80051f0:	bd70      	pop	{r4, r5, r6, pc}

080051f2 <_ZL12read_sleb128PKhPl>:
 80051f2:	2300      	movs	r3, #0
 80051f4:	461a      	mov	r2, r3
 80051f6:	b530      	push	{r4, r5, lr}
 80051f8:	f810 4b01 	ldrb.w	r4, [r0], #1
 80051fc:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8005200:	4095      	lsls	r5, r2
 8005202:	432b      	orrs	r3, r5
 8005204:	0625      	lsls	r5, r4, #24
 8005206:	f102 0207 	add.w	r2, r2, #7
 800520a:	d4f5      	bmi.n	80051f8 <_ZL12read_sleb128PKhPl+0x6>
 800520c:	2a1f      	cmp	r2, #31
 800520e:	d806      	bhi.n	800521e <_ZL12read_sleb128PKhPl+0x2c>
 8005210:	0664      	lsls	r4, r4, #25
 8005212:	bf42      	ittt	mi
 8005214:	f04f 34ff 	movmi.w	r4, #4294967295
 8005218:	fa04 f202 	lslmi.w	r2, r4, r2
 800521c:	4313      	orrmi	r3, r2
 800521e:	600b      	str	r3, [r1, #0]
 8005220:	bd30      	pop	{r4, r5, pc}

08005222 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8005222:	2850      	cmp	r0, #80	; 0x50
 8005224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005226:	4605      	mov	r5, r0
 8005228:	460e      	mov	r6, r1
 800522a:	4614      	mov	r4, r2
 800522c:	461f      	mov	r7, r3
 800522e:	d107      	bne.n	8005240 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8005230:	1cd0      	adds	r0, r2, #3
 8005232:	f020 0003 	bic.w	r0, r0, #3
 8005236:	f850 3b04 	ldr.w	r3, [r0], #4
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	b003      	add	sp, #12
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005240:	f000 030f 	and.w	r3, r0, #15
 8005244:	2b0c      	cmp	r3, #12
 8005246:	d82e      	bhi.n	80052a6 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8005248:	e8df f003 	tbb	[pc, r3]
 800524c:	251d0725 	.word	0x251d0725
 8005250:	2d2d2d29 	.word	0x2d2d2d29
 8005254:	2521182d 	.word	0x2521182d
 8005258:	29          	.byte	0x29
 8005259:	00          	.byte	0x00
 800525a:	a901      	add	r1, sp, #4
 800525c:	4620      	mov	r0, r4
 800525e:	f7ff ffb7 	bl	80051d0 <_ZL12read_uleb128PKhPm>
 8005262:	9b01      	ldr	r3, [sp, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0e8      	beq.n	800523a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8005268:	f005 0270 	and.w	r2, r5, #112	; 0x70
 800526c:	2a10      	cmp	r2, #16
 800526e:	bf08      	it	eq
 8005270:	4626      	moveq	r6, r4
 8005272:	062a      	lsls	r2, r5, #24
 8005274:	4433      	add	r3, r6
 8005276:	bf48      	it	mi
 8005278:	681b      	ldrmi	r3, [r3, #0]
 800527a:	e7de      	b.n	800523a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 800527c:	a901      	add	r1, sp, #4
 800527e:	4620      	mov	r0, r4
 8005280:	f7ff ffb7 	bl	80051f2 <_ZL12read_sleb128PKhPl>
 8005284:	e7ed      	b.n	8005262 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8005286:	4620      	mov	r0, r4
 8005288:	f830 3b02 	ldrh.w	r3, [r0], #2
 800528c:	e7ea      	b.n	8005264 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800528e:	4620      	mov	r0, r4
 8005290:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8005294:	e7e6      	b.n	8005264 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005296:	4620      	mov	r0, r4
 8005298:	f850 3b04 	ldr.w	r3, [r0], #4
 800529c:	e7e2      	b.n	8005264 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800529e:	4620      	mov	r0, r4
 80052a0:	f850 3b08 	ldr.w	r3, [r0], #8
 80052a4:	e7de      	b.n	8005264 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80052a6:	f001 fbf4 	bl	8006a92 <abort>

080052aa <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80052aa:	b508      	push	{r3, lr}
 80052ac:	4603      	mov	r3, r0
 80052ae:	2bff      	cmp	r3, #255	; 0xff
 80052b0:	4608      	mov	r0, r1
 80052b2:	d007      	beq.n	80052c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80052b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d00d      	beq.n	80052d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 80052bc:	d804      	bhi.n	80052c8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 80052be:	b10b      	cbz	r3, 80052c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d107      	bne.n	80052d4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 80052c4:	2000      	movs	r0, #0
 80052c6:	bd08      	pop	{r3, pc}
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d00d      	beq.n	80052e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 80052cc:	2b50      	cmp	r3, #80	; 0x50
 80052ce:	d0f9      	beq.n	80052c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d005      	beq.n	80052e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 80052d4:	f001 fbdd 	bl	8006a92 <abort>
 80052d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052dc:	f7fc be88 	b.w	8001ff0 <_Unwind_GetTextRelBase>
 80052e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052e4:	f7fc be88 	b.w	8001ff8 <_Unwind_GetDataRelBase>
 80052e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052ec:	f7fc be70 	b.w	8001fd0 <_Unwind_GetRegionStart>

080052f0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	460c      	mov	r4, r1
 80052f4:	4601      	mov	r1, r0
 80052f6:	4620      	mov	r0, r4
 80052f8:	4615      	mov	r5, r2
 80052fa:	461e      	mov	r6, r3
 80052fc:	f7ff ffd5 	bl	80052aa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005300:	4633      	mov	r3, r6
 8005302:	462a      	mov	r2, r5
 8005304:	4601      	mov	r1, r0
 8005306:	4620      	mov	r0, r4
 8005308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800530c:	f7ff bf89 	b.w	8005222 <_ZL28read_encoded_value_with_basehjPKhPj>

08005310 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8005310:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005312:	460e      	mov	r6, r1
 8005314:	4614      	mov	r4, r2
 8005316:	4605      	mov	r5, r0
 8005318:	b318      	cbz	r0, 8005362 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 800531a:	f7fc fe59 	bl	8001fd0 <_Unwind_GetRegionStart>
 800531e:	6020      	str	r0, [r4, #0]
 8005320:	7831      	ldrb	r1, [r6, #0]
 8005322:	1c72      	adds	r2, r6, #1
 8005324:	29ff      	cmp	r1, #255	; 0xff
 8005326:	d01d      	beq.n	8005364 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8005328:	1d23      	adds	r3, r4, #4
 800532a:	4628      	mov	r0, r5
 800532c:	f7ff ffe0 	bl	80052f0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005330:	4602      	mov	r2, r0
 8005332:	7813      	ldrb	r3, [r2, #0]
 8005334:	1c50      	adds	r0, r2, #1
 8005336:	2bff      	cmp	r3, #255	; 0xff
 8005338:	7523      	strb	r3, [r4, #20]
 800533a:	d015      	beq.n	8005368 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 800533c:	2310      	movs	r3, #16
 800533e:	a901      	add	r1, sp, #4
 8005340:	7523      	strb	r3, [r4, #20]
 8005342:	f7ff ff45 	bl	80051d0 <_ZL12read_uleb128PKhPm>
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	4403      	add	r3, r0
 800534a:	60e3      	str	r3, [r4, #12]
 800534c:	7803      	ldrb	r3, [r0, #0]
 800534e:	a901      	add	r1, sp, #4
 8005350:	7563      	strb	r3, [r4, #21]
 8005352:	3001      	adds	r0, #1
 8005354:	f7ff ff3c 	bl	80051d0 <_ZL12read_uleb128PKhPm>
 8005358:	9b01      	ldr	r3, [sp, #4]
 800535a:	4403      	add	r3, r0
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	b002      	add	sp, #8
 8005360:	bd70      	pop	{r4, r5, r6, pc}
 8005362:	e7dc      	b.n	800531e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8005364:	6060      	str	r0, [r4, #4]
 8005366:	e7e4      	b.n	8005332 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 8005368:	2300      	movs	r3, #0
 800536a:	e7ee      	b.n	800534a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

0800536c <_Unwind_GetGR>:
 800536c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800536e:	ab03      	add	r3, sp, #12
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	460a      	mov	r2, r1
 8005376:	4619      	mov	r1, r3
 8005378:	f7fc f88e 	bl	8001498 <_Unwind_VRS_Get>
 800537c:	9803      	ldr	r0, [sp, #12]
 800537e:	b005      	add	sp, #20
 8005380:	f85d fb04 	ldr.w	pc, [sp], #4

08005384 <__gxx_personality_v0>:
 8005384:	2300      	movs	r3, #0
 8005386:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	b091      	sub	sp, #68	; 0x44
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	f000 0303 	and.w	r3, r0, #3
 8005392:	2b01      	cmp	r3, #1
 8005394:	4607      	mov	r7, r0
 8005396:	460c      	mov	r4, r1
 8005398:	4616      	mov	r6, r2
 800539a:	d011      	beq.n	80053c0 <__gxx_personality_v0+0x3c>
 800539c:	d303      	bcc.n	80053a6 <__gxx_personality_v0+0x22>
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d003      	beq.n	80053aa <__gxx_personality_v0+0x26>
 80053a2:	f001 fb76 	bl	8006a92 <abort>
 80053a6:	0702      	lsls	r2, r0, #28
 80053a8:	d51a      	bpl.n	80053e0 <__gxx_personality_v0+0x5c>
 80053aa:	4631      	mov	r1, r6
 80053ac:	4620      	mov	r0, r4
 80053ae:	f7fc fdf9 	bl	8001fa4 <__gnu_unwind_frame>
 80053b2:	b118      	cbz	r0, 80053bc <__gxx_personality_v0+0x38>
 80053b4:	2009      	movs	r0, #9
 80053b6:	b011      	add	sp, #68	; 0x44
 80053b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053bc:	2008      	movs	r0, #8
 80053be:	e7fa      	b.n	80053b6 <__gxx_personality_v0+0x32>
 80053c0:	f000 0508 	and.w	r5, r0, #8
 80053c4:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 80053c8:	bb85      	cbnz	r5, 800542c <__gxx_personality_v0+0xa8>
 80053ca:	f8d1 9020 	ldr.w	r9, [r1, #32]
 80053ce:	4610      	mov	r0, r2
 80053d0:	210d      	movs	r1, #13
 80053d2:	f7ff ffcb 	bl	800536c <_Unwind_GetGR>
 80053d6:	4581      	cmp	r9, r0
 80053d8:	f040 8140 	bne.w	800565c <__gxx_personality_v0+0x2d8>
 80053dc:	2506      	movs	r5, #6
 80053de:	e000      	b.n	80053e2 <__gxx_personality_v0+0x5e>
 80053e0:	2501      	movs	r5, #1
 80053e2:	ab10      	add	r3, sp, #64	; 0x40
 80053e4:	f843 4d2c 	str.w	r4, [r3, #-44]!
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	f007 0708 	and.w	r7, r7, #8
 80053f0:	433d      	orrs	r5, r7
 80053f2:	220c      	movs	r2, #12
 80053f4:	4619      	mov	r1, r3
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7fc f874 	bl	80014e4 <_Unwind_VRS_Set>
 80053fc:	2d06      	cmp	r5, #6
 80053fe:	f040 8139 	bne.w	8005674 <__gxx_personality_v0+0x2f0>
 8005402:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8005406:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005408:	f1b8 0f00 	cmp.w	r8, #0
 800540c:	bf0c      	ite	eq
 800540e:	f04f 0a01 	moveq.w	sl, #1
 8005412:	f04f 0a03 	movne.w	sl, #3
 8005416:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005418:	f015 0508 	ands.w	r5, r5, #8
 800541c:	f000 80ce 	beq.w	80055bc <__gxx_personality_v0+0x238>
 8005420:	f1ba 0f01 	cmp.w	sl, #1
 8005424:	f040 80c6 	bne.w	80055b4 <__gxx_personality_v0+0x230>
 8005428:	f000 fb04 	bl	8005a34 <_ZSt9terminatev>
 800542c:	2502      	movs	r5, #2
 800542e:	e7d8      	b.n	80053e2 <__gxx_personality_v0+0x5e>
 8005430:	9a07      	ldr	r2, [sp, #28]
 8005432:	4413      	add	r3, r2
 8005434:	429f      	cmp	r7, r3
 8005436:	f080 8137 	bcs.w	80056a8 <__gxx_personality_v0+0x324>
 800543a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800543e:	f1b8 0f00 	cmp.w	r8, #0
 8005442:	d001      	beq.n	8005448 <__gxx_personality_v0+0xc4>
 8005444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005446:	4498      	add	r8, r3
 8005448:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800544a:	b117      	cbz	r7, 8005452 <__gxx_personality_v0+0xce>
 800544c:	1e78      	subs	r0, r7, #1
 800544e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005450:	4407      	add	r7, r0
 8005452:	f1b8 0f00 	cmp.w	r8, #0
 8005456:	d0a8      	beq.n	80053aa <__gxx_personality_v0+0x26>
 8005458:	2f00      	cmp	r7, #0
 800545a:	f000 80a1 	beq.w	80055a0 <__gxx_personality_v0+0x21c>
 800545e:	f015 0308 	ands.w	r3, r5, #8
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	d036      	beq.n	80054d4 <__gxx_personality_v0+0x150>
 8005466:	2347      	movs	r3, #71	; 0x47
 8005468:	7023      	strb	r3, [r4, #0]
 800546a:	234e      	movs	r3, #78	; 0x4e
 800546c:	7063      	strb	r3, [r4, #1]
 800546e:	2355      	movs	r3, #85	; 0x55
 8005470:	70a3      	strb	r3, [r4, #2]
 8005472:	2343      	movs	r3, #67	; 0x43
 8005474:	70e3      	strb	r3, [r4, #3]
 8005476:	2346      	movs	r3, #70	; 0x46
 8005478:	7123      	strb	r3, [r4, #4]
 800547a:	234f      	movs	r3, #79	; 0x4f
 800547c:	7163      	strb	r3, [r4, #5]
 800547e:	2352      	movs	r3, #82	; 0x52
 8005480:	71a3      	strb	r3, [r4, #6]
 8005482:	2300      	movs	r3, #0
 8005484:	71e3      	strb	r3, [r4, #7]
 8005486:	f04f 0a00 	mov.w	sl, #0
 800548a:	f06f 0b03 	mvn.w	fp, #3
 800548e:	a907      	add	r1, sp, #28
 8005490:	4638      	mov	r0, r7
 8005492:	f7ff feae 	bl	80051f2 <_ZL12read_sleb128PKhPl>
 8005496:	a908      	add	r1, sp, #32
 8005498:	9003      	str	r0, [sp, #12]
 800549a:	f7ff feaa 	bl	80051f2 <_ZL12read_sleb128PKhPl>
 800549e:	9a07      	ldr	r2, [sp, #28]
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	d076      	beq.n	8005592 <__gxx_personality_v0+0x20e>
 80054a4:	dd3d      	ble.n	8005522 <__gxx_personality_v0+0x19e>
 80054a6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80054aa:	28ff      	cmp	r0, #255	; 0xff
 80054ac:	d035      	beq.n	800551a <__gxx_personality_v0+0x196>
 80054ae:	f000 0307 	and.w	r3, r0, #7
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	f63f af75 	bhi.w	80053a2 <__gxx_personality_v0+0x1e>
 80054b8:	a101      	add	r1, pc, #4	; (adr r1, 80054c0 <__gxx_personality_v0+0x13c>)
 80054ba:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	0800551f 	.word	0x0800551f
 80054c4:	080053a3 	.word	0x080053a3
 80054c8:	080054e7 	.word	0x080054e7
 80054cc:	0800551f 	.word	0x0800551f
 80054d0:	08005517 	.word	0x08005517
 80054d4:	79e3      	ldrb	r3, [r4, #7]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	bf0c      	ite	eq
 80054da:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80054de:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 80054e2:	9304      	str	r3, [sp, #16]
 80054e4:	e7cf      	b.n	8005486 <__gxx_personality_v0+0x102>
 80054e6:	2702      	movs	r7, #2
 80054e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054ea:	ab09      	add	r3, sp, #36	; 0x24
 80054ec:	fb07 1212 	mls	r2, r7, r2, r1
 80054f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054f2:	f7ff fe96 	bl	8005222 <_ZL28read_encoded_value_with_basehjPKhPj>
 80054f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054f8:	b369      	cbz	r1, 8005556 <__gxx_personality_v0+0x1d2>
 80054fa:	b12c      	cbz	r4, 8005508 <__gxx_personality_v0+0x184>
 80054fc:	ab04      	add	r3, sp, #16
 80054fe:	2200      	movs	r2, #0
 8005500:	4620      	mov	r0, r4
 8005502:	f7ff fdd1 	bl	80050a8 <__cxa_type_match>
 8005506:	bb30      	cbnz	r0, 8005556 <__gxx_personality_v0+0x1d2>
 8005508:	9f08      	ldr	r7, [sp, #32]
 800550a:	2f00      	cmp	r7, #0
 800550c:	d044      	beq.n	8005598 <__gxx_personality_v0+0x214>
 800550e:	9b03      	ldr	r3, [sp, #12]
 8005510:	443b      	add	r3, r7
 8005512:	461f      	mov	r7, r3
 8005514:	e7bb      	b.n	800548e <__gxx_personality_v0+0x10a>
 8005516:	2708      	movs	r7, #8
 8005518:	e7e6      	b.n	80054e8 <__gxx_personality_v0+0x164>
 800551a:	2700      	movs	r7, #0
 800551c:	e7e4      	b.n	80054e8 <__gxx_personality_v0+0x164>
 800551e:	2704      	movs	r7, #4
 8005520:	e7e2      	b.n	80054e8 <__gxx_personality_v0+0x164>
 8005522:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005524:	3201      	adds	r2, #1
 8005526:	b36c      	cbz	r4, 8005584 <__gxx_personality_v0+0x200>
 8005528:	9b02      	ldr	r3, [sp, #8]
 800552a:	bb5b      	cbnz	r3, 8005584 <__gxx_personality_v0+0x200>
 800552c:	fb0b 7202 	mla	r2, fp, r2, r7
 8005530:	9b04      	ldr	r3, [sp, #16]
 8005532:	1f17      	subs	r7, r2, #4
 8005534:	9306      	str	r3, [sp, #24]
 8005536:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800553a:	b141      	cbz	r1, 800554e <__gxx_personality_v0+0x1ca>
 800553c:	ab06      	add	r3, sp, #24
 800553e:	2200      	movs	r2, #0
 8005540:	4439      	add	r1, r7
 8005542:	4620      	mov	r0, r4
 8005544:	f7ff fdb0 	bl	80050a8 <__cxa_type_match>
 8005548:	2800      	cmp	r0, #0
 800554a:	d0f4      	beq.n	8005536 <__gxx_personality_v0+0x1b2>
 800554c:	2101      	movs	r1, #1
 800554e:	f081 0101 	eor.w	r1, r1, #1
 8005552:	2900      	cmp	r1, #0
 8005554:	d0d8      	beq.n	8005508 <__gxx_personality_v0+0x184>
 8005556:	f04f 0a03 	mov.w	sl, #3
 800555a:	9f07      	ldr	r7, [sp, #28]
 800555c:	07eb      	lsls	r3, r5, #31
 800555e:	d527      	bpl.n	80055b0 <__gxx_personality_v0+0x22c>
 8005560:	f1ba 0f02 	cmp.w	sl, #2
 8005564:	f43f af21 	beq.w	80053aa <__gxx_personality_v0+0x26>
 8005568:	210d      	movs	r1, #13
 800556a:	4630      	mov	r0, r6
 800556c:	9d04      	ldr	r5, [sp, #16]
 800556e:	f7ff fefd 	bl	800536c <_Unwind_GetGR>
 8005572:	6265      	str	r5, [r4, #36]	; 0x24
 8005574:	6220      	str	r0, [r4, #32]
 8005576:	62a7      	str	r7, [r4, #40]	; 0x28
 8005578:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800557c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8005580:	2006      	movs	r0, #6
 8005582:	e718      	b.n	80053b6 <__gxx_personality_v0+0x32>
 8005584:	fb0b f202 	mul.w	r2, fp, r2
 8005588:	58b9      	ldr	r1, [r7, r2]
 800558a:	fab1 f181 	clz	r1, r1
 800558e:	0949      	lsrs	r1, r1, #5
 8005590:	e7df      	b.n	8005552 <__gxx_personality_v0+0x1ce>
 8005592:	f04f 0a01 	mov.w	sl, #1
 8005596:	e7b7      	b.n	8005508 <__gxx_personality_v0+0x184>
 8005598:	f1ba 0f00 	cmp.w	sl, #0
 800559c:	f43f af05 	beq.w	80053aa <__gxx_personality_v0+0x26>
 80055a0:	f04f 0a02 	mov.w	sl, #2
 80055a4:	e7da      	b.n	800555c <__gxx_personality_v0+0x1d8>
 80055a6:	2700      	movs	r7, #0
 80055a8:	f04f 0a01 	mov.w	sl, #1
 80055ac:	46b8      	mov	r8, r7
 80055ae:	e7d5      	b.n	800555c <__gxx_personality_v0+0x1d8>
 80055b0:	4649      	mov	r1, r9
 80055b2:	e731      	b.n	8005418 <__gxx_personality_v0+0x94>
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	da23      	bge.n	8005600 <__gxx_personality_v0+0x27c>
 80055b8:	f000 fa4e 	bl	8005a58 <_ZSt10unexpectedv>
 80055bc:	f1ba 0f01 	cmp.w	sl, #1
 80055c0:	d102      	bne.n	80055c8 <__gxx_personality_v0+0x244>
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 f9c0 	bl	8005948 <__cxa_call_terminate>
 80055c8:	2f00      	cmp	r7, #0
 80055ca:	da19      	bge.n	8005600 <__gxx_personality_v0+0x27c>
 80055cc:	aa0a      	add	r2, sp, #40	; 0x28
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7ff fe9e 	bl	8005310 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80055d4:	4631      	mov	r1, r6
 80055d6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80055da:	f7ff fe66 	bl	80052aa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80055de:	f06f 0303 	mvn.w	r3, #3
 80055e2:	fb07 3203 	mla	r2, r7, r3, r3
 80055e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055e8:	900c      	str	r0, [sp, #48]	; 0x30
 80055ea:	4413      	add	r3, r2
 80055ec:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80055f0:	b10a      	cbz	r2, 80055f6 <__gxx_personality_v0+0x272>
 80055f2:	3501      	adds	r5, #1
 80055f4:	e7fa      	b.n	80055ec <__gxx_personality_v0+0x268>
 80055f6:	2204      	movs	r2, #4
 80055f8:	62a5      	str	r5, [r4, #40]	; 0x28
 80055fa:	62e0      	str	r0, [r4, #44]	; 0x2c
 80055fc:	6322      	str	r2, [r4, #48]	; 0x30
 80055fe:	6363      	str	r3, [r4, #52]	; 0x34
 8005600:	ab10      	add	r3, sp, #64	; 0x40
 8005602:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2300      	movs	r3, #0
 800560a:	4630      	mov	r0, r6
 800560c:	461a      	mov	r2, r3
 800560e:	4619      	mov	r1, r3
 8005610:	f7fb ff68 	bl	80014e4 <_Unwind_VRS_Set>
 8005614:	ab10      	add	r3, sp, #64	; 0x40
 8005616:	f843 7d20 	str.w	r7, [r3, #-32]!
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2300      	movs	r3, #0
 800561e:	2201      	movs	r2, #1
 8005620:	4619      	mov	r1, r3
 8005622:	4630      	mov	r0, r6
 8005624:	f7fb ff5e 	bl	80014e4 <_Unwind_VRS_Set>
 8005628:	210f      	movs	r1, #15
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff fe9e 	bl	800536c <_Unwind_GetGR>
 8005630:	f000 0001 	and.w	r0, r0, #1
 8005634:	ab10      	add	r3, sp, #64	; 0x40
 8005636:	ea40 0008 	orr.w	r0, r0, r8
 800563a:	f843 0d24 	str.w	r0, [r3, #-36]!
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2300      	movs	r3, #0
 8005642:	220f      	movs	r2, #15
 8005644:	4619      	mov	r1, r3
 8005646:	4630      	mov	r0, r6
 8005648:	f7fb ff4c 	bl	80014e4 <_Unwind_VRS_Set>
 800564c:	f1ba 0f02 	cmp.w	sl, #2
 8005650:	d102      	bne.n	8005658 <__gxx_personality_v0+0x2d4>
 8005652:	4620      	mov	r0, r4
 8005654:	f7ff fd86 	bl	8005164 <__cxa_begin_cleanup>
 8005658:	2007      	movs	r0, #7
 800565a:	e6ac      	b.n	80053b6 <__gxx_personality_v0+0x32>
 800565c:	aa10      	add	r2, sp, #64	; 0x40
 800565e:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8005662:	9200      	str	r2, [sp, #0]
 8005664:	4643      	mov	r3, r8
 8005666:	220c      	movs	r2, #12
 8005668:	4641      	mov	r1, r8
 800566a:	4630      	mov	r0, r6
 800566c:	f045 0502 	orr.w	r5, r5, #2
 8005670:	f7fb ff38 	bl	80014e4 <_Unwind_VRS_Set>
 8005674:	4630      	mov	r0, r6
 8005676:	f7fc fcb1 	bl	8001fdc <_Unwind_GetLanguageSpecificData>
 800567a:	4681      	mov	r9, r0
 800567c:	2800      	cmp	r0, #0
 800567e:	f43f ae94 	beq.w	80053aa <__gxx_personality_v0+0x26>
 8005682:	aa0a      	add	r2, sp, #40	; 0x28
 8005684:	4601      	mov	r1, r0
 8005686:	4630      	mov	r0, r6
 8005688:	f7ff fe42 	bl	8005310 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800568c:	4631      	mov	r1, r6
 800568e:	4680      	mov	r8, r0
 8005690:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005694:	f7ff fe09 	bl	80052aa <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005698:	210f      	movs	r1, #15
 800569a:	900c      	str	r0, [sp, #48]	; 0x30
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff fe65 	bl	800536c <_Unwind_GetGR>
 80056a2:	f020 0001 	bic.w	r0, r0, #1
 80056a6:	1e47      	subs	r7, r0, #1
 80056a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056aa:	4598      	cmp	r8, r3
 80056ac:	f4bf af7b 	bcs.w	80055a6 <__gxx_personality_v0+0x222>
 80056b0:	4642      	mov	r2, r8
 80056b2:	ab06      	add	r3, sp, #24
 80056b4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7ff fe19 	bl	80052f0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80056be:	ab07      	add	r3, sp, #28
 80056c0:	4602      	mov	r2, r0
 80056c2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80056c6:	2000      	movs	r0, #0
 80056c8:	f7ff fe12 	bl	80052f0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80056cc:	ab08      	add	r3, sp, #32
 80056ce:	4602      	mov	r2, r0
 80056d0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80056d4:	2000      	movs	r0, #0
 80056d6:	f7ff fe0b 	bl	80052f0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80056da:	a909      	add	r1, sp, #36	; 0x24
 80056dc:	f7ff fd78 	bl	80051d0 <_ZL12read_uleb128PKhPm>
 80056e0:	9a06      	ldr	r2, [sp, #24]
 80056e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e4:	4680      	mov	r8, r0
 80056e6:	4413      	add	r3, r2
 80056e8:	429f      	cmp	r7, r3
 80056ea:	f4bf aea1 	bcs.w	8005430 <__gxx_personality_v0+0xac>
 80056ee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80056f2:	e7d9      	b.n	80056a8 <__gxx_personality_v0+0x324>

080056f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80056f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80056f6:	2310      	movs	r3, #16
 80056f8:	2400      	movs	r4, #0
 80056fa:	9302      	str	r3, [sp, #8]
 80056fc:	6803      	ldr	r3, [r0, #0]
 80056fe:	4615      	mov	r5, r2
 8005700:	699e      	ldr	r6, [r3, #24]
 8005702:	9400      	str	r4, [sp, #0]
 8005704:	466b      	mov	r3, sp
 8005706:	f88d 4004 	strb.w	r4, [sp, #4]
 800570a:	9403      	str	r4, [sp, #12]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	47b0      	blx	r6
 8005710:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005714:	f003 0306 	and.w	r3, r3, #6
 8005718:	2b06      	cmp	r3, #6
 800571a:	bf09      	itett	eq
 800571c:	2001      	moveq	r0, #1
 800571e:	4620      	movne	r0, r4
 8005720:	9b00      	ldreq	r3, [sp, #0]
 8005722:	602b      	streq	r3, [r5, #0]
 8005724:	b004      	add	sp, #16
 8005726:	bd70      	pop	{r4, r5, r6, pc}

08005728 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8005728:	9800      	ldr	r0, [sp, #0]
 800572a:	4290      	cmp	r0, r2
 800572c:	bf0c      	ite	eq
 800572e:	2006      	moveq	r0, #6
 8005730:	2001      	movne	r0, #1
 8005732:	4770      	bx	lr

08005734 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005734:	b510      	push	{r4, lr}
 8005736:	4604      	mov	r4, r0
 8005738:	4b02      	ldr	r3, [pc, #8]	; (8005744 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800573a:	6003      	str	r3, [r0, #0]
 800573c:	f000 f84b 	bl	80057d6 <_ZNSt9type_infoD1Ev>
 8005740:	4620      	mov	r0, r4
 8005742:	bd10      	pop	{r4, pc}
 8005744:	08006d58 	.word	0x08006d58

08005748 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005748:	b510      	push	{r4, lr}
 800574a:	4604      	mov	r4, r0
 800574c:	f7ff fff2 	bl	8005734 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005750:	4620      	mov	r0, r4
 8005752:	2108      	movs	r1, #8
 8005754:	f000 f98a 	bl	8005a6c <_ZdlPvj>
 8005758:	4620      	mov	r0, r4
 800575a:	bd10      	pop	{r4, pc}

0800575c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4615      	mov	r5, r2
 8005760:	461c      	mov	r4, r3
 8005762:	f000 f83b 	bl	80057dc <_ZNKSt9type_infoeqERKS_>
 8005766:	b120      	cbz	r0, 8005772 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005768:	2308      	movs	r3, #8
 800576a:	60e3      	str	r3, [r4, #12]
 800576c:	2306      	movs	r3, #6
 800576e:	6025      	str	r5, [r4, #0]
 8005770:	7123      	strb	r3, [r4, #4]
 8005772:	bd38      	pop	{r3, r4, r5, pc}

08005774 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	4605      	mov	r5, r0
 800577a:	460c      	mov	r4, r1
 800577c:	4616      	mov	r6, r2
 800577e:	461f      	mov	r7, r3
 8005780:	f000 f82c 	bl	80057dc <_ZNKSt9type_infoeqERKS_>
 8005784:	b948      	cbnz	r0, 800579a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005786:	2f03      	cmp	r7, #3
 8005788:	d807      	bhi.n	800579a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	4632      	mov	r2, r6
 800578e:	4629      	mov	r1, r5
 8005790:	4620      	mov	r0, r4
 8005792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	4718      	bx	r3
 800579a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800579e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800579e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a2:	9e06      	ldr	r6, [sp, #24]
 80057a4:	4698      	mov	r8, r3
 80057a6:	9b08      	ldr	r3, [sp, #32]
 80057a8:	4607      	mov	r7, r0
 80057aa:	429e      	cmp	r6, r3
 80057ac:	4615      	mov	r5, r2
 80057ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80057b0:	d103      	bne.n	80057ba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 80057b2:	9907      	ldr	r1, [sp, #28]
 80057b4:	f000 f812 	bl	80057dc <_ZNKSt9type_infoeqERKS_>
 80057b8:	b958      	cbnz	r0, 80057d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 80057ba:	4641      	mov	r1, r8
 80057bc:	4638      	mov	r0, r7
 80057be:	f000 f80d 	bl	80057dc <_ZNKSt9type_infoeqERKS_>
 80057c2:	b118      	cbz	r0, 80057cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 80057c4:	2301      	movs	r3, #1
 80057c6:	6026      	str	r6, [r4, #0]
 80057c8:	7125      	strb	r5, [r4, #4]
 80057ca:	71a3      	strb	r3, [r4, #6]
 80057cc:	2000      	movs	r0, #0
 80057ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d2:	7165      	strb	r5, [r4, #5]
 80057d4:	e7fa      	b.n	80057cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

080057d6 <_ZNSt9type_infoD1Ev>:
 80057d6:	4770      	bx	lr

080057d8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80057d8:	2000      	movs	r0, #0
 80057da:	4770      	bx	lr

080057dc <_ZNKSt9type_infoeqERKS_>:
 80057dc:	4281      	cmp	r1, r0
 80057de:	b508      	push	{r3, lr}
 80057e0:	d00e      	beq.n	8005800 <_ZNKSt9type_infoeqERKS_+0x24>
 80057e2:	6840      	ldr	r0, [r0, #4]
 80057e4:	7803      	ldrb	r3, [r0, #0]
 80057e6:	2b2a      	cmp	r3, #42	; 0x2a
 80057e8:	d00c      	beq.n	8005804 <_ZNKSt9type_infoeqERKS_+0x28>
 80057ea:	6849      	ldr	r1, [r1, #4]
 80057ec:	780b      	ldrb	r3, [r1, #0]
 80057ee:	2b2a      	cmp	r3, #42	; 0x2a
 80057f0:	bf08      	it	eq
 80057f2:	3101      	addeq	r1, #1
 80057f4:	f7fa fd18 	bl	8000228 <strcmp>
 80057f8:	fab0 f080 	clz	r0, r0
 80057fc:	0940      	lsrs	r0, r0, #5
 80057fe:	bd08      	pop	{r3, pc}
 8005800:	2001      	movs	r0, #1
 8005802:	bd08      	pop	{r3, pc}
 8005804:	2000      	movs	r0, #0
 8005806:	bd08      	pop	{r3, pc}

08005808 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005808:	b510      	push	{r4, lr}
 800580a:	4604      	mov	r4, r0
 800580c:	4b02      	ldr	r3, [pc, #8]	; (8005818 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800580e:	6003      	str	r3, [r0, #0]
 8005810:	f7ff ff90 	bl	8005734 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005814:	4620      	mov	r0, r4
 8005816:	bd10      	pop	{r4, pc}
 8005818:	08006e24 	.word	0x08006e24

0800581c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800581c:	b510      	push	{r4, lr}
 800581e:	4604      	mov	r4, r0
 8005820:	f7ff fff2 	bl	8005808 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005824:	4620      	mov	r0, r4
 8005826:	210c      	movs	r1, #12
 8005828:	f000 f920 	bl	8005a6c <_ZdlPvj>
 800582c:	4620      	mov	r0, r4
 800582e:	bd10      	pop	{r4, pc}

08005830 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005834:	9e06      	ldr	r6, [sp, #24]
 8005836:	4680      	mov	r8, r0
 8005838:	4296      	cmp	r6, r2
 800583a:	460f      	mov	r7, r1
 800583c:	4614      	mov	r4, r2
 800583e:	461d      	mov	r5, r3
 8005840:	d103      	bne.n	800584a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8005842:	4619      	mov	r1, r3
 8005844:	f7ff ffca 	bl	80057dc <_ZNKSt9type_infoeqERKS_>
 8005848:	b958      	cbnz	r0, 8005862 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 800584a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800584e:	4622      	mov	r2, r4
 8005850:	6803      	ldr	r3, [r0, #0]
 8005852:	9606      	str	r6, [sp, #24]
 8005854:	6a1e      	ldr	r6, [r3, #32]
 8005856:	4639      	mov	r1, r7
 8005858:	462b      	mov	r3, r5
 800585a:	46b4      	mov	ip, r6
 800585c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	4760      	bx	ip
 8005862:	2006      	movs	r0, #6
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005868 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005868:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586c:	460e      	mov	r6, r1
 800586e:	4619      	mov	r1, r3
 8005870:	4683      	mov	fp, r0
 8005872:	4617      	mov	r7, r2
 8005874:	4699      	mov	r9, r3
 8005876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005878:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800587c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005880:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005882:	f7ff ffab 	bl	80057dc <_ZNKSt9type_infoeqERKS_>
 8005886:	b190      	cbz	r0, 80058ae <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8005888:	2e00      	cmp	r6, #0
 800588a:	602c      	str	r4, [r5, #0]
 800588c:	712f      	strb	r7, [r5, #4]
 800588e:	db09      	blt.n	80058a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8005890:	4434      	add	r4, r6
 8005892:	45a0      	cmp	r8, r4
 8005894:	bf0c      	ite	eq
 8005896:	2406      	moveq	r4, #6
 8005898:	2401      	movne	r4, #1
 800589a:	71ac      	strb	r4, [r5, #6]
 800589c:	2000      	movs	r0, #0
 800589e:	b001      	add	sp, #4
 80058a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a4:	3602      	adds	r6, #2
 80058a6:	d1f9      	bne.n	800589c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80058a8:	2301      	movs	r3, #1
 80058aa:	71ab      	strb	r3, [r5, #6]
 80058ac:	e7f6      	b.n	800589c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80058ae:	4544      	cmp	r4, r8
 80058b0:	d104      	bne.n	80058bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80058b2:	4651      	mov	r1, sl
 80058b4:	4658      	mov	r0, fp
 80058b6:	f7ff ff91 	bl	80057dc <_ZNKSt9type_infoeqERKS_>
 80058ba:	b988      	cbnz	r0, 80058e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 80058bc:	f8db 0008 	ldr.w	r0, [fp, #8]
 80058c0:	463a      	mov	r2, r7
 80058c2:	6803      	ldr	r3, [r0, #0]
 80058c4:	950d      	str	r5, [sp, #52]	; 0x34
 80058c6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80058ca:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80058ce:	940a      	str	r4, [sp, #40]	; 0x28
 80058d0:	69dc      	ldr	r4, [r3, #28]
 80058d2:	4631      	mov	r1, r6
 80058d4:	464b      	mov	r3, r9
 80058d6:	46a4      	mov	ip, r4
 80058d8:	b001      	add	sp, #4
 80058da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058de:	4760      	bx	ip
 80058e0:	716f      	strb	r7, [r5, #5]
 80058e2:	e7db      	b.n	800589c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

080058e4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	4604      	mov	r4, r0
 80058ea:	460d      	mov	r5, r1
 80058ec:	4616      	mov	r6, r2
 80058ee:	461f      	mov	r7, r3
 80058f0:	f7ff ff34 	bl	800575c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80058f4:	b948      	cbnz	r0, 800590a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80058f6:	68a0      	ldr	r0, [r4, #8]
 80058f8:	4632      	mov	r2, r6
 80058fa:	6803      	ldr	r3, [r0, #0]
 80058fc:	4629      	mov	r1, r5
 80058fe:	699c      	ldr	r4, [r3, #24]
 8005900:	463b      	mov	r3, r7
 8005902:	46a4      	mov	ip, r4
 8005904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005908:	4760      	bx	ip
 800590a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800590e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800590e:	7803      	ldrb	r3, [r0, #0]
 8005910:	2b47      	cmp	r3, #71	; 0x47
 8005912:	d117      	bne.n	8005944 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005914:	7843      	ldrb	r3, [r0, #1]
 8005916:	2b4e      	cmp	r3, #78	; 0x4e
 8005918:	d114      	bne.n	8005944 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800591a:	7883      	ldrb	r3, [r0, #2]
 800591c:	2b55      	cmp	r3, #85	; 0x55
 800591e:	d111      	bne.n	8005944 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005920:	78c3      	ldrb	r3, [r0, #3]
 8005922:	2b43      	cmp	r3, #67	; 0x43
 8005924:	d10e      	bne.n	8005944 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005926:	7903      	ldrb	r3, [r0, #4]
 8005928:	2b43      	cmp	r3, #67	; 0x43
 800592a:	d10b      	bne.n	8005944 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800592c:	7943      	ldrb	r3, [r0, #5]
 800592e:	2b2b      	cmp	r3, #43	; 0x2b
 8005930:	d108      	bne.n	8005944 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005932:	7983      	ldrb	r3, [r0, #6]
 8005934:	2b2b      	cmp	r3, #43	; 0x2b
 8005936:	d105      	bne.n	8005944 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005938:	79c0      	ldrb	r0, [r0, #7]
 800593a:	2801      	cmp	r0, #1
 800593c:	bf8c      	ite	hi
 800593e:	2000      	movhi	r0, #0
 8005940:	2001      	movls	r0, #1
 8005942:	4770      	bx	lr
 8005944:	2000      	movs	r0, #0
 8005946:	4770      	bx	lr

08005948 <__cxa_call_terminate>:
 8005948:	b510      	push	{r4, lr}
 800594a:	4604      	mov	r4, r0
 800594c:	b148      	cbz	r0, 8005962 <__cxa_call_terminate+0x1a>
 800594e:	f000 f83b 	bl	80059c8 <__cxa_begin_catch>
 8005952:	4620      	mov	r0, r4
 8005954:	f7ff ffdb 	bl	800590e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005958:	b118      	cbz	r0, 8005962 <__cxa_call_terminate+0x1a>
 800595a:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800595e:	f000 f85d 	bl	8005a1c <_ZN10__cxxabiv111__terminateEPFvvE>
 8005962:	f000 f867 	bl	8005a34 <_ZSt9terminatev>

08005966 <__cxa_call_unexpected>:
 8005966:	b538      	push	{r3, r4, r5, lr}
 8005968:	4602      	mov	r2, r0
 800596a:	f7ff ffd0 	bl	800590e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800596e:	b140      	cbz	r0, 8005982 <__cxa_call_unexpected+0x1c>
 8005970:	2500      	movs	r5, #0
 8005972:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8005976:	4610      	mov	r0, r2
 8005978:	f000 f826 	bl	80059c8 <__cxa_begin_catch>
 800597c:	b125      	cbz	r5, 8005988 <__cxa_call_unexpected+0x22>
 800597e:	f000 f86b 	bl	8005a58 <_ZSt10unexpectedv>
 8005982:	4604      	mov	r4, r0
 8005984:	2501      	movs	r5, #1
 8005986:	e7f6      	b.n	8005976 <__cxa_call_unexpected+0x10>
 8005988:	4620      	mov	r0, r4
 800598a:	f000 f858 	bl	8005a3e <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800598e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800598e:	7803      	ldrb	r3, [r0, #0]
 8005990:	2b47      	cmp	r3, #71	; 0x47
 8005992:	d117      	bne.n	80059c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005994:	7843      	ldrb	r3, [r0, #1]
 8005996:	2b4e      	cmp	r3, #78	; 0x4e
 8005998:	d114      	bne.n	80059c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800599a:	7883      	ldrb	r3, [r0, #2]
 800599c:	2b55      	cmp	r3, #85	; 0x55
 800599e:	d111      	bne.n	80059c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80059a0:	78c3      	ldrb	r3, [r0, #3]
 80059a2:	2b43      	cmp	r3, #67	; 0x43
 80059a4:	d10e      	bne.n	80059c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80059a6:	7903      	ldrb	r3, [r0, #4]
 80059a8:	2b43      	cmp	r3, #67	; 0x43
 80059aa:	d10b      	bne.n	80059c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80059ac:	7943      	ldrb	r3, [r0, #5]
 80059ae:	2b2b      	cmp	r3, #43	; 0x2b
 80059b0:	d108      	bne.n	80059c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80059b2:	7983      	ldrb	r3, [r0, #6]
 80059b4:	2b2b      	cmp	r3, #43	; 0x2b
 80059b6:	d105      	bne.n	80059c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80059b8:	79c0      	ldrb	r0, [r0, #7]
 80059ba:	2801      	cmp	r0, #1
 80059bc:	bf8c      	ite	hi
 80059be:	2000      	movhi	r0, #0
 80059c0:	2001      	movls	r0, #1
 80059c2:	4770      	bx	lr
 80059c4:	2000      	movs	r0, #0
 80059c6:	4770      	bx	lr

080059c8 <__cxa_begin_catch>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4605      	mov	r5, r0
 80059cc:	f000 f84a 	bl	8005a64 <__cxa_get_globals>
 80059d0:	4601      	mov	r1, r0
 80059d2:	6802      	ldr	r2, [r0, #0]
 80059d4:	4628      	mov	r0, r5
 80059d6:	f1a5 0420 	sub.w	r4, r5, #32
 80059da:	f7ff ffd8 	bl	800598e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80059de:	b930      	cbnz	r0, 80059ee <__cxa_begin_catch+0x26>
 80059e0:	b10a      	cbz	r2, 80059e6 <__cxa_begin_catch+0x1e>
 80059e2:	f000 f827 	bl	8005a34 <_ZSt9terminatev>
 80059e6:	600c      	str	r4, [r1, #0]
 80059e8:	4614      	mov	r4, r2
 80059ea:	4620      	mov	r0, r4
 80059ec:	bd38      	pop	{r3, r4, r5, pc}
 80059ee:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 80059f2:	4628      	mov	r0, r5
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bfb4      	ite	lt
 80059f8:	f1c3 0301 	rsblt	r3, r3, #1
 80059fc:	3301      	addge	r3, #1
 80059fe:	f845 3c0c 	str.w	r3, [r5, #-12]
 8005a02:	684b      	ldr	r3, [r1, #4]
 8005a04:	42a2      	cmp	r2, r4
 8005a06:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a0a:	604b      	str	r3, [r1, #4]
 8005a0c:	bf1c      	itt	ne
 8005a0e:	f845 2c10 	strne.w	r2, [r5, #-16]
 8005a12:	600c      	strne	r4, [r1, #0]
 8005a14:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005a16:	f7fb fd37 	bl	8001488 <_Unwind_Complete>
 8005a1a:	e7e6      	b.n	80059ea <__cxa_begin_catch+0x22>

08005a1c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005a1c:	b508      	push	{r3, lr}
 8005a1e:	4780      	blx	r0
 8005a20:	f001 f837 	bl	8006a92 <abort>

08005a24 <_ZSt13get_terminatev>:
 8005a24:	4b02      	ldr	r3, [pc, #8]	; (8005a30 <_ZSt13get_terminatev+0xc>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	f3bf 8f5b 	dmb	ish
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000010 	.word	0x20000010

08005a34 <_ZSt9terminatev>:
 8005a34:	b508      	push	{r3, lr}
 8005a36:	f7ff fff5 	bl	8005a24 <_ZSt13get_terminatev>
 8005a3a:	f7ff ffef 	bl	8005a1c <_ZN10__cxxabiv111__terminateEPFvvE>

08005a3e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8005a3e:	b508      	push	{r3, lr}
 8005a40:	4780      	blx	r0
 8005a42:	f7ff fff7 	bl	8005a34 <_ZSt9terminatev>
	...

08005a48 <_ZSt14get_unexpectedv>:
 8005a48:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <_ZSt14get_unexpectedv+0xc>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	f3bf 8f5b 	dmb	ish
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000014 	.word	0x20000014

08005a58 <_ZSt10unexpectedv>:
 8005a58:	b508      	push	{r3, lr}
 8005a5a:	f7ff fff5 	bl	8005a48 <_ZSt14get_unexpectedv>
 8005a5e:	f7ff ffee 	bl	8005a3e <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08005a64 <__cxa_get_globals>:
 8005a64:	4800      	ldr	r0, [pc, #0]	; (8005a68 <__cxa_get_globals+0x4>)
 8005a66:	4770      	bx	lr
 8005a68:	2000020c 	.word	0x2000020c

08005a6c <_ZdlPvj>:
 8005a6c:	f7ff baf1 	b.w	8005052 <_ZdlPv>

08005a70 <pow>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	b08f      	sub	sp, #60	; 0x3c
 8005a76:	461d      	mov	r5, r3
 8005a78:	4680      	mov	r8, r0
 8005a7a:	4689      	mov	r9, r1
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	f000 f95b 	bl	8005d38 <__ieee754_pow>
 8005a82:	4fa5      	ldr	r7, [pc, #660]	; (8005d18 <pow+0x2a8>)
 8005a84:	e9cd 0100 	strd	r0, r1, [sp]
 8005a88:	f997 3000 	ldrsb.w	r3, [r7]
 8005a8c:	463e      	mov	r6, r7
 8005a8e:	9302      	str	r3, [sp, #8]
 8005a90:	3301      	adds	r3, #1
 8005a92:	d05f      	beq.n	8005b54 <pow+0xe4>
 8005a94:	4622      	mov	r2, r4
 8005a96:	462b      	mov	r3, r5
 8005a98:	4620      	mov	r0, r4
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f7fb f820 	bl	8000ae0 <__aeabi_dcmpun>
 8005aa0:	4682      	mov	sl, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d156      	bne.n	8005b54 <pow+0xe4>
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f7fb f817 	bl	8000ae0 <__aeabi_dcmpun>
 8005ab2:	9003      	str	r0, [sp, #12]
 8005ab4:	b1e8      	cbz	r0, 8005af2 <pow+0x82>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fa ffdd 	bl	8000a7c <__aeabi_dcmpeq>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d046      	beq.n	8005b54 <pow+0xe4>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	2200      	movs	r2, #0
 8005aca:	9304      	str	r3, [sp, #16]
 8005acc:	4b93      	ldr	r3, [pc, #588]	; (8005d1c <pow+0x2ac>)
 8005ace:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005ad2:	9305      	str	r3, [sp, #20]
 8005ad4:	4b92      	ldr	r3, [pc, #584]	; (8005d20 <pow+0x2b0>)
 8005ad6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005ada:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ade:	9b02      	ldr	r3, [sp, #8]
 8005ae0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d031      	beq.n	8005b4c <pow+0xdc>
 8005ae8:	a804      	add	r0, sp, #16
 8005aea:	f000 fecc 	bl	8006886 <matherr>
 8005aee:	bb38      	cbnz	r0, 8005b40 <pow+0xd0>
 8005af0:	e058      	b.n	8005ba4 <pow+0x134>
 8005af2:	f04f 0a00 	mov.w	sl, #0
 8005af6:	f04f 0b00 	mov.w	fp, #0
 8005afa:	4652      	mov	r2, sl
 8005afc:	465b      	mov	r3, fp
 8005afe:	4640      	mov	r0, r8
 8005b00:	4649      	mov	r1, r9
 8005b02:	f7fa ffbb 	bl	8000a7c <__aeabi_dcmpeq>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d051      	beq.n	8005bae <pow+0x13e>
 8005b0a:	4652      	mov	r2, sl
 8005b0c:	465b      	mov	r3, fp
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	f7fa ffb3 	bl	8000a7c <__aeabi_dcmpeq>
 8005b16:	4606      	mov	r6, r0
 8005b18:	b308      	cbz	r0, 8005b5e <pow+0xee>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	9304      	str	r3, [sp, #16]
 8005b1e:	4b7f      	ldr	r3, [pc, #508]	; (8005d1c <pow+0x2ac>)
 8005b20:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005b24:	9305      	str	r3, [sp, #20]
 8005b26:	9b03      	ldr	r3, [sp, #12]
 8005b28:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8005b2e:	9b02      	ldr	r3, [sp, #8]
 8005b30:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0d7      	beq.n	8005ae8 <pow+0x78>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4b79      	ldr	r3, [pc, #484]	; (8005d20 <pow+0x2b0>)
 8005b3c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b42:	b11b      	cbz	r3, 8005b4c <pow+0xdc>
 8005b44:	f000 ffba 	bl	8006abc <__errno>
 8005b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b4a:	6003      	str	r3, [r0, #0]
 8005b4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005b50:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b58:	b00f      	add	sp, #60	; 0x3c
 8005b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5e:	4620      	mov	r0, r4
 8005b60:	4629      	mov	r1, r5
 8005b62:	f000 fe8a 	bl	800687a <finite>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d0f4      	beq.n	8005b54 <pow+0xe4>
 8005b6a:	4652      	mov	r2, sl
 8005b6c:	465b      	mov	r3, fp
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa ff8d 	bl	8000a90 <__aeabi_dcmplt>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d0ec      	beq.n	8005b54 <pow+0xe4>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	4b67      	ldr	r3, [pc, #412]	; (8005d1c <pow+0x2ac>)
 8005b80:	960c      	str	r6, [sp, #48]	; 0x30
 8005b82:	9305      	str	r3, [sp, #20]
 8005b84:	f997 3000 	ldrsb.w	r3, [r7]
 8005b88:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005b8c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005b90:	b913      	cbnz	r3, 8005b98 <pow+0x128>
 8005b92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005b96:	e7a7      	b.n	8005ae8 <pow+0x78>
 8005b98:	2000      	movs	r0, #0
 8005b9a:	4962      	ldr	r1, [pc, #392]	; (8005d24 <pow+0x2b4>)
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ba2:	d1a1      	bne.n	8005ae8 <pow+0x78>
 8005ba4:	f000 ff8a 	bl	8006abc <__errno>
 8005ba8:	2321      	movs	r3, #33	; 0x21
 8005baa:	6003      	str	r3, [r0, #0]
 8005bac:	e7c8      	b.n	8005b40 <pow+0xd0>
 8005bae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bb2:	f000 fe62 	bl	800687a <finite>
 8005bb6:	9002      	str	r0, [sp, #8]
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d17f      	bne.n	8005cbc <pow+0x24c>
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	f000 fe5b 	bl	800687a <finite>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d079      	beq.n	8005cbc <pow+0x24c>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f000 fe55 	bl	800687a <finite>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d073      	beq.n	8005cbc <pow+0x24c>
 8005bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fa ff80 	bl	8000ae0 <__aeabi_dcmpun>
 8005be0:	f997 7000 	ldrsb.w	r7, [r7]
 8005be4:	4b4d      	ldr	r3, [pc, #308]	; (8005d1c <pow+0x2ac>)
 8005be6:	b1a0      	cbz	r0, 8005c12 <pow+0x1a2>
 8005be8:	2201      	movs	r2, #1
 8005bea:	9305      	str	r3, [sp, #20]
 8005bec:	9b02      	ldr	r3, [sp, #8]
 8005bee:	9204      	str	r2, [sp, #16]
 8005bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8005bf2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005bf6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005bfa:	2f00      	cmp	r7, #0
 8005bfc:	d0c9      	beq.n	8005b92 <pow+0x122>
 8005bfe:	4652      	mov	r2, sl
 8005c00:	465b      	mov	r3, fp
 8005c02:	4650      	mov	r0, sl
 8005c04:	4659      	mov	r1, fp
 8005c06:	f7fa fdfb 	bl	8000800 <__aeabi_ddiv>
 8005c0a:	2f02      	cmp	r7, #2
 8005c0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c10:	e7c7      	b.n	8005ba2 <pow+0x132>
 8005c12:	2203      	movs	r2, #3
 8005c14:	9305      	str	r3, [sp, #20]
 8005c16:	9204      	str	r2, [sp, #16]
 8005c18:	900c      	str	r0, [sp, #48]	; 0x30
 8005c1a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005c1e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005c22:	bb57      	cbnz	r7, 8005c7a <pow+0x20a>
 8005c24:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005c28:	4b3f      	ldr	r3, [pc, #252]	; (8005d28 <pow+0x2b8>)
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c30:	4649      	mov	r1, r9
 8005c32:	4652      	mov	r2, sl
 8005c34:	465b      	mov	r3, fp
 8005c36:	f7fa ff2b 	bl	8000a90 <__aeabi_dcmplt>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d064      	beq.n	8005d08 <pow+0x298>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4b3a      	ldr	r3, [pc, #232]	; (8005d2c <pow+0x2bc>)
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7fa fcb1 	bl	80005ac <__aeabi_dmul>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	f000 fe23 	bl	8006898 <rint>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa ff0f 	bl	8000a7c <__aeabi_dcmpeq>
 8005c5e:	b920      	cbnz	r0, 8005c6a <pow+0x1fa>
 8005c60:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005c64:	4b32      	ldr	r3, [pc, #200]	; (8005d30 <pow+0x2c0>)
 8005c66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c6a:	f996 3000 	ldrsb.w	r3, [r6]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d14a      	bne.n	8005d08 <pow+0x298>
 8005c72:	f000 ff23 	bl	8006abc <__errno>
 8005c76:	2322      	movs	r3, #34	; 0x22
 8005c78:	e797      	b.n	8005baa <pow+0x13a>
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4b2d      	ldr	r3, [pc, #180]	; (8005d34 <pow+0x2c4>)
 8005c7e:	4640      	mov	r0, r8
 8005c80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c84:	4649      	mov	r1, r9
 8005c86:	4652      	mov	r2, sl
 8005c88:	465b      	mov	r3, fp
 8005c8a:	f7fa ff01 	bl	8000a90 <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d0eb      	beq.n	8005c6a <pow+0x1fa>
 8005c92:	2200      	movs	r2, #0
 8005c94:	4b25      	ldr	r3, [pc, #148]	; (8005d2c <pow+0x2bc>)
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fa fc87 	bl	80005ac <__aeabi_dmul>
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	460d      	mov	r5, r1
 8005ca2:	f000 fdf9 	bl	8006898 <rint>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4620      	mov	r0, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	f7fa fee5 	bl	8000a7c <__aeabi_dcmpeq>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d1d9      	bne.n	8005c6a <pow+0x1fa>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <pow+0x2b4>)
 8005cba:	e7d4      	b.n	8005c66 <pow+0x1f6>
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f7fa feda 	bl	8000a7c <__aeabi_dcmpeq>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f43f af43 	beq.w	8005b54 <pow+0xe4>
 8005cce:	4640      	mov	r0, r8
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	f000 fdd2 	bl	800687a <finite>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f43f af3c 	beq.w	8005b54 <pow+0xe4>
 8005cdc:	4620      	mov	r0, r4
 8005cde:	4629      	mov	r1, r5
 8005ce0:	f000 fdcb 	bl	800687a <finite>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f43f af35 	beq.w	8005b54 <pow+0xe4>
 8005cea:	2304      	movs	r3, #4
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <pow+0x2ac>)
 8005cf0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005cf4:	9305      	str	r3, [sp, #20]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2400      	movs	r4, #0
 8005cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005d02:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005d06:	e7b0      	b.n	8005c6a <pow+0x1fa>
 8005d08:	a804      	add	r0, sp, #16
 8005d0a:	f000 fdbc 	bl	8006886 <matherr>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f47f af16 	bne.w	8005b40 <pow+0xd0>
 8005d14:	e7ad      	b.n	8005c72 <pow+0x202>
 8005d16:	bf00      	nop
 8005d18:	20000018 	.word	0x20000018
 8005d1c:	08006e48 	.word	0x08006e48
 8005d20:	3ff00000 	.word	0x3ff00000
 8005d24:	fff00000 	.word	0xfff00000
 8005d28:	47efffff 	.word	0x47efffff
 8005d2c:	3fe00000 	.word	0x3fe00000
 8005d30:	c7efffff 	.word	0xc7efffff
 8005d34:	7ff00000 	.word	0x7ff00000

08005d38 <__ieee754_pow>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	b093      	sub	sp, #76	; 0x4c
 8005d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d42:	9e03      	ldr	r6, [sp, #12]
 8005d44:	9a02      	ldr	r2, [sp, #8]
 8005d46:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005d4a:	ea55 0302 	orrs.w	r3, r5, r2
 8005d4e:	4607      	mov	r7, r0
 8005d50:	4688      	mov	r8, r1
 8005d52:	4682      	mov	sl, r0
 8005d54:	4689      	mov	r9, r1
 8005d56:	f000 849e 	beq.w	8006696 <__ieee754_pow+0x95e>
 8005d5a:	4b77      	ldr	r3, [pc, #476]	; (8005f38 <__ieee754_pow+0x200>)
 8005d5c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005d60:	429c      	cmp	r4, r3
 8005d62:	dc09      	bgt.n	8005d78 <__ieee754_pow+0x40>
 8005d64:	d103      	bne.n	8005d6e <__ieee754_pow+0x36>
 8005d66:	b938      	cbnz	r0, 8005d78 <__ieee754_pow+0x40>
 8005d68:	42a5      	cmp	r5, r4
 8005d6a:	dc0d      	bgt.n	8005d88 <__ieee754_pow+0x50>
 8005d6c:	e001      	b.n	8005d72 <__ieee754_pow+0x3a>
 8005d6e:	429d      	cmp	r5, r3
 8005d70:	dc02      	bgt.n	8005d78 <__ieee754_pow+0x40>
 8005d72:	429d      	cmp	r5, r3
 8005d74:	d10e      	bne.n	8005d94 <__ieee754_pow+0x5c>
 8005d76:	b16a      	cbz	r2, 8005d94 <__ieee754_pow+0x5c>
 8005d78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d80:	ea54 030a 	orrs.w	r3, r4, sl
 8005d84:	f000 8487 	beq.w	8006696 <__ieee754_pow+0x95e>
 8005d88:	486c      	ldr	r0, [pc, #432]	; (8005f3c <__ieee754_pow+0x204>)
 8005d8a:	b013      	add	sp, #76	; 0x4c
 8005d8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	f000 bd7c 	b.w	800688c <nan>
 8005d94:	f1b9 0f00 	cmp.w	r9, #0
 8005d98:	da4f      	bge.n	8005e3a <__ieee754_pow+0x102>
 8005d9a:	4b69      	ldr	r3, [pc, #420]	; (8005f40 <__ieee754_pow+0x208>)
 8005d9c:	429d      	cmp	r5, r3
 8005d9e:	dc4a      	bgt.n	8005e36 <__ieee754_pow+0xfe>
 8005da0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005da4:	429d      	cmp	r5, r3
 8005da6:	dd48      	ble.n	8005e3a <__ieee754_pow+0x102>
 8005da8:	152b      	asrs	r3, r5, #20
 8005daa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005dae:	2b14      	cmp	r3, #20
 8005db0:	dd24      	ble.n	8005dfc <__ieee754_pow+0xc4>
 8005db2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005db6:	fa22 f103 	lsr.w	r1, r2, r3
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d13b      	bne.n	8005e3a <__ieee754_pow+0x102>
 8005dc2:	f001 0101 	and.w	r1, r1, #1
 8005dc6:	f1c1 0302 	rsb	r3, r1, #2
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	2a00      	cmp	r2, #0
 8005dce:	d156      	bne.n	8005e7e <__ieee754_pow+0x146>
 8005dd0:	4b59      	ldr	r3, [pc, #356]	; (8005f38 <__ieee754_pow+0x200>)
 8005dd2:	429d      	cmp	r5, r3
 8005dd4:	d122      	bne.n	8005e1c <__ieee754_pow+0xe4>
 8005dd6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005dda:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005dde:	ea53 030a 	orrs.w	r3, r3, sl
 8005de2:	f000 8458 	beq.w	8006696 <__ieee754_pow+0x95e>
 8005de6:	4b57      	ldr	r3, [pc, #348]	; (8005f44 <__ieee754_pow+0x20c>)
 8005de8:	429c      	cmp	r4, r3
 8005dea:	dd28      	ble.n	8005e3e <__ieee754_pow+0x106>
 8005dec:	2e00      	cmp	r6, #0
 8005dee:	f280 8456 	bge.w	800669e <__ieee754_pow+0x966>
 8005df2:	2000      	movs	r0, #0
 8005df4:	2100      	movs	r1, #0
 8005df6:	b013      	add	sp, #76	; 0x4c
 8005df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	d13c      	bne.n	8005e7a <__ieee754_pow+0x142>
 8005e00:	f1c3 0314 	rsb	r3, r3, #20
 8005e04:	fa45 f103 	asr.w	r1, r5, r3
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	429d      	cmp	r5, r3
 8005e0e:	f040 844e 	bne.w	80066ae <__ieee754_pow+0x976>
 8005e12:	f001 0101 	and.w	r1, r1, #1
 8005e16:	f1c1 0302 	rsb	r3, r1, #2
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4b4a      	ldr	r3, [pc, #296]	; (8005f48 <__ieee754_pow+0x210>)
 8005e1e:	429d      	cmp	r5, r3
 8005e20:	d114      	bne.n	8005e4c <__ieee754_pow+0x114>
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	f280 843f 	bge.w	80066a6 <__ieee754_pow+0x96e>
 8005e28:	463a      	mov	r2, r7
 8005e2a:	4643      	mov	r3, r8
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	4946      	ldr	r1, [pc, #280]	; (8005f48 <__ieee754_pow+0x210>)
 8005e30:	f7fa fce6 	bl	8000800 <__aeabi_ddiv>
 8005e34:	e7df      	b.n	8005df6 <__ieee754_pow+0xbe>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e7c7      	b.n	8005dca <__ieee754_pow+0x92>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e7c5      	b.n	8005dca <__ieee754_pow+0x92>
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	dad7      	bge.n	8005df2 <__ieee754_pow+0xba>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	9802      	ldr	r0, [sp, #8]
 8005e46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e4a:	e7d4      	b.n	8005df6 <__ieee754_pow+0xbe>
 8005e4c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005e50:	d106      	bne.n	8005e60 <__ieee754_pow+0x128>
 8005e52:	463a      	mov	r2, r7
 8005e54:	4643      	mov	r3, r8
 8005e56:	4638      	mov	r0, r7
 8005e58:	4641      	mov	r1, r8
 8005e5a:	f7fa fba7 	bl	80005ac <__aeabi_dmul>
 8005e5e:	e7ca      	b.n	8005df6 <__ieee754_pow+0xbe>
 8005e60:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <__ieee754_pow+0x214>)
 8005e62:	429e      	cmp	r6, r3
 8005e64:	d10b      	bne.n	8005e7e <__ieee754_pow+0x146>
 8005e66:	f1b9 0f00 	cmp.w	r9, #0
 8005e6a:	db08      	blt.n	8005e7e <__ieee754_pow+0x146>
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	4641      	mov	r1, r8
 8005e70:	b013      	add	sp, #76	; 0x4c
 8005e72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e76:	f000 bc51 	b.w	800671c <__ieee754_sqrt>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	4638      	mov	r0, r7
 8005e80:	4641      	mov	r1, r8
 8005e82:	f000 fcf7 	bl	8006874 <fabs>
 8005e86:	f1ba 0f00 	cmp.w	sl, #0
 8005e8a:	d125      	bne.n	8005ed8 <__ieee754_pow+0x1a0>
 8005e8c:	b124      	cbz	r4, 8005e98 <__ieee754_pow+0x160>
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <__ieee754_pow+0x210>)
 8005e90:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d11f      	bne.n	8005ed8 <__ieee754_pow+0x1a0>
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	da05      	bge.n	8005ea8 <__ieee754_pow+0x170>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	4929      	ldr	r1, [pc, #164]	; (8005f48 <__ieee754_pow+0x210>)
 8005ea4:	f7fa fcac 	bl	8000800 <__aeabi_ddiv>
 8005ea8:	f1b9 0f00 	cmp.w	r9, #0
 8005eac:	daa3      	bge.n	8005df6 <__ieee754_pow+0xbe>
 8005eae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005eb8:	4323      	orrs	r3, r4
 8005eba:	d106      	bne.n	8005eca <__ieee754_pow+0x192>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	f7fa f9c0 	bl	8000244 <__aeabi_dsub>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	e7b2      	b.n	8005e30 <__ieee754_pow+0xf8>
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d192      	bne.n	8005df6 <__ieee754_pow+0xbe>
 8005ed0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	e78e      	b.n	8005df6 <__ieee754_pow+0xbe>
 8005ed8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005edc:	f109 33ff 	add.w	r3, r9, #4294967295
 8005ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d104      	bne.n	8005ef4 <__ieee754_pow+0x1bc>
 8005eea:	463a      	mov	r2, r7
 8005eec:	4643      	mov	r3, r8
 8005eee:	4638      	mov	r0, r7
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	e7e5      	b.n	8005ec0 <__ieee754_pow+0x188>
 8005ef4:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <__ieee754_pow+0x218>)
 8005ef6:	429d      	cmp	r5, r3
 8005ef8:	f340 80fc 	ble.w	80060f4 <__ieee754_pow+0x3bc>
 8005efc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005f00:	429d      	cmp	r5, r3
 8005f02:	dd0b      	ble.n	8005f1c <__ieee754_pow+0x1e4>
 8005f04:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <__ieee754_pow+0x20c>)
 8005f06:	429c      	cmp	r4, r3
 8005f08:	dc0e      	bgt.n	8005f28 <__ieee754_pow+0x1f0>
 8005f0a:	2e00      	cmp	r6, #0
 8005f0c:	f6bf af71 	bge.w	8005df2 <__ieee754_pow+0xba>
 8005f10:	a307      	add	r3, pc, #28	; (adr r3, 8005f30 <__ieee754_pow+0x1f8>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	4610      	mov	r0, r2
 8005f18:	4619      	mov	r1, r3
 8005f1a:	e79e      	b.n	8005e5a <__ieee754_pow+0x122>
 8005f1c:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <__ieee754_pow+0x21c>)
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	ddf3      	ble.n	8005f0a <__ieee754_pow+0x1d2>
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <__ieee754_pow+0x210>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	dd17      	ble.n	8005f58 <__ieee754_pow+0x220>
 8005f28:	2e00      	cmp	r6, #0
 8005f2a:	dcf1      	bgt.n	8005f10 <__ieee754_pow+0x1d8>
 8005f2c:	e761      	b.n	8005df2 <__ieee754_pow+0xba>
 8005f2e:	bf00      	nop
 8005f30:	8800759c 	.word	0x8800759c
 8005f34:	7e37e43c 	.word	0x7e37e43c
 8005f38:	7ff00000 	.word	0x7ff00000
 8005f3c:	08006e4b 	.word	0x08006e4b
 8005f40:	433fffff 	.word	0x433fffff
 8005f44:	3fefffff 	.word	0x3fefffff
 8005f48:	3ff00000 	.word	0x3ff00000
 8005f4c:	3fe00000 	.word	0x3fe00000
 8005f50:	41e00000 	.word	0x41e00000
 8005f54:	3feffffe 	.word	0x3feffffe
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4b61      	ldr	r3, [pc, #388]	; (80060e0 <__ieee754_pow+0x3a8>)
 8005f5c:	f7fa f972 	bl	8000244 <__aeabi_dsub>
 8005f60:	a355      	add	r3, pc, #340	; (adr r3, 80060b8 <__ieee754_pow+0x380>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	4604      	mov	r4, r0
 8005f68:	460d      	mov	r5, r1
 8005f6a:	f7fa fb1f 	bl	80005ac <__aeabi_dmul>
 8005f6e:	a354      	add	r3, pc, #336	; (adr r3, 80060c0 <__ieee754_pow+0x388>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	4606      	mov	r6, r0
 8005f76:	460f      	mov	r7, r1
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	f7fa fb16 	bl	80005ac <__aeabi_dmul>
 8005f80:	2200      	movs	r2, #0
 8005f82:	4682      	mov	sl, r0
 8005f84:	468b      	mov	fp, r1
 8005f86:	4b57      	ldr	r3, [pc, #348]	; (80060e4 <__ieee754_pow+0x3ac>)
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	f7fa fb0e 	bl	80005ac <__aeabi_dmul>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	a14c      	add	r1, pc, #304	; (adr r1, 80060c8 <__ieee754_pow+0x390>)
 8005f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9a:	f7fa f953 	bl	8000244 <__aeabi_dsub>
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	f7fa fb03 	bl	80005ac <__aeabi_dmul>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	2000      	movs	r0, #0
 8005fac:	494e      	ldr	r1, [pc, #312]	; (80060e8 <__ieee754_pow+0x3b0>)
 8005fae:	f7fa f949 	bl	8000244 <__aeabi_dsub>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	4689      	mov	r9, r1
 8005fba:	4620      	mov	r0, r4
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7fa faf5 	bl	80005ac <__aeabi_dmul>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa faef 	bl	80005ac <__aeabi_dmul>
 8005fce:	a340      	add	r3, pc, #256	; (adr r3, 80060d0 <__ieee754_pow+0x398>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f7fa faea 	bl	80005ac <__aeabi_dmul>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4650      	mov	r0, sl
 8005fde:	4659      	mov	r1, fp
 8005fe0:	f7fa f930 	bl	8000244 <__aeabi_dsub>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4604      	mov	r4, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	4630      	mov	r0, r6
 8005fee:	4639      	mov	r1, r7
 8005ff0:	f7fa f92a 	bl	8000248 <__adddf3>
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	468b      	mov	fp, r1
 8005ff8:	4682      	mov	sl, r0
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	f7fa f921 	bl	8000244 <__aeabi_dsub>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa f91b 	bl	8000244 <__aeabi_dsub>
 800600e:	9b00      	ldr	r3, [sp, #0]
 8006010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006012:	3b01      	subs	r3, #1
 8006014:	4313      	orrs	r3, r2
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	bf0c      	ite	eq
 800601c:	4c33      	ldreq	r4, [pc, #204]	; (80060ec <__ieee754_pow+0x3b4>)
 800601e:	4c30      	ldrne	r4, [pc, #192]	; (80060e0 <__ieee754_pow+0x3a8>)
 8006020:	4606      	mov	r6, r0
 8006022:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006026:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800602a:	2400      	movs	r4, #0
 800602c:	460f      	mov	r7, r1
 800602e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006032:	4622      	mov	r2, r4
 8006034:	462b      	mov	r3, r5
 8006036:	f7fa f905 	bl	8000244 <__aeabi_dsub>
 800603a:	4652      	mov	r2, sl
 800603c:	465b      	mov	r3, fp
 800603e:	f7fa fab5 	bl	80005ac <__aeabi_dmul>
 8006042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006046:	4680      	mov	r8, r0
 8006048:	4689      	mov	r9, r1
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa faad 	bl	80005ac <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4640      	mov	r0, r8
 8006058:	4649      	mov	r1, r9
 800605a:	f7fa f8f5 	bl	8000248 <__adddf3>
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	4680      	mov	r8, r0
 8006064:	4689      	mov	r9, r1
 8006066:	4650      	mov	r0, sl
 8006068:	4659      	mov	r1, fp
 800606a:	f7fa fa9f 	bl	80005ac <__aeabi_dmul>
 800606e:	4604      	mov	r4, r0
 8006070:	460d      	mov	r5, r1
 8006072:	460b      	mov	r3, r1
 8006074:	4602      	mov	r2, r0
 8006076:	4649      	mov	r1, r9
 8006078:	4640      	mov	r0, r8
 800607a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800607e:	f7fa f8e3 	bl	8000248 <__adddf3>
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <__ieee754_pow+0x3b8>)
 8006084:	4682      	mov	sl, r0
 8006086:	4299      	cmp	r1, r3
 8006088:	460f      	mov	r7, r1
 800608a:	460e      	mov	r6, r1
 800608c:	f340 82da 	ble.w	8006644 <__ieee754_pow+0x90c>
 8006090:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006094:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006098:	4303      	orrs	r3, r0
 800609a:	f000 81d5 	beq.w	8006448 <__ieee754_pow+0x710>
 800609e:	a30e      	add	r3, pc, #56	; (adr r3, 80060d8 <__ieee754_pow+0x3a0>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060a8:	f7fa fa80 	bl	80005ac <__aeabi_dmul>
 80060ac:	a30a      	add	r3, pc, #40	; (adr r3, 80060d8 <__ieee754_pow+0x3a0>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	e6d2      	b.n	8005e5a <__ieee754_pow+0x122>
 80060b4:	f3af 8000 	nop.w
 80060b8:	60000000 	.word	0x60000000
 80060bc:	3ff71547 	.word	0x3ff71547
 80060c0:	f85ddf44 	.word	0xf85ddf44
 80060c4:	3e54ae0b 	.word	0x3e54ae0b
 80060c8:	55555555 	.word	0x55555555
 80060cc:	3fd55555 	.word	0x3fd55555
 80060d0:	652b82fe 	.word	0x652b82fe
 80060d4:	3ff71547 	.word	0x3ff71547
 80060d8:	8800759c 	.word	0x8800759c
 80060dc:	7e37e43c 	.word	0x7e37e43c
 80060e0:	3ff00000 	.word	0x3ff00000
 80060e4:	3fd00000 	.word	0x3fd00000
 80060e8:	3fe00000 	.word	0x3fe00000
 80060ec:	bff00000 	.word	0xbff00000
 80060f0:	408fffff 	.word	0x408fffff
 80060f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	da05      	bge.n	800610a <__ieee754_pow+0x3d2>
 80060fe:	4bca      	ldr	r3, [pc, #808]	; (8006428 <__ieee754_pow+0x6f0>)
 8006100:	f7fa fa54 	bl	80005ac <__aeabi_dmul>
 8006104:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006108:	460c      	mov	r4, r1
 800610a:	1523      	asrs	r3, r4, #20
 800610c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006110:	4413      	add	r3, r2
 8006112:	9307      	str	r3, [sp, #28]
 8006114:	4bc5      	ldr	r3, [pc, #788]	; (800642c <__ieee754_pow+0x6f4>)
 8006116:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800611a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800611e:	429c      	cmp	r4, r3
 8006120:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006124:	dd08      	ble.n	8006138 <__ieee754_pow+0x400>
 8006126:	4bc2      	ldr	r3, [pc, #776]	; (8006430 <__ieee754_pow+0x6f8>)
 8006128:	429c      	cmp	r4, r3
 800612a:	f340 8154 	ble.w	80063d6 <__ieee754_pow+0x69e>
 800612e:	9b07      	ldr	r3, [sp, #28]
 8006130:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006134:	3301      	adds	r3, #1
 8006136:	9307      	str	r3, [sp, #28]
 8006138:	2600      	movs	r6, #0
 800613a:	4629      	mov	r1, r5
 800613c:	00f3      	lsls	r3, r6, #3
 800613e:	930d      	str	r3, [sp, #52]	; 0x34
 8006140:	4bbc      	ldr	r3, [pc, #752]	; (8006434 <__ieee754_pow+0x6fc>)
 8006142:	00f2      	lsls	r2, r6, #3
 8006144:	4413      	add	r3, r2
 8006146:	cb18      	ldmia	r3, {r3, r4}
 8006148:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800614c:	461a      	mov	r2, r3
 800614e:	4623      	mov	r3, r4
 8006150:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006154:	f7fa f876 	bl	8000244 <__aeabi_dsub>
 8006158:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800615c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006160:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006164:	f7fa f870 	bl	8000248 <__adddf3>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	2000      	movs	r0, #0
 800616e:	49b2      	ldr	r1, [pc, #712]	; (8006438 <__ieee754_pow+0x700>)
 8006170:	f7fa fb46 	bl	8000800 <__aeabi_ddiv>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800617c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006180:	f7fa fa14 	bl	80005ac <__aeabi_dmul>
 8006184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006188:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800618c:	f04f 0a00 	mov.w	sl, #0
 8006190:	2200      	movs	r2, #0
 8006192:	106d      	asrs	r5, r5, #1
 8006194:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006198:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800619c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80061a0:	4659      	mov	r1, fp
 80061a2:	4650      	mov	r0, sl
 80061a4:	4614      	mov	r4, r2
 80061a6:	461d      	mov	r5, r3
 80061a8:	f7fa fa00 	bl	80005ac <__aeabi_dmul>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80061b4:	f7fa f846 	bl	8000244 <__aeabi_dsub>
 80061b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061bc:	4606      	mov	r6, r0
 80061be:	460f      	mov	r7, r1
 80061c0:	4620      	mov	r0, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7fa f83e 	bl	8000244 <__aeabi_dsub>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061d0:	f7fa f838 	bl	8000244 <__aeabi_dsub>
 80061d4:	465b      	mov	r3, fp
 80061d6:	4652      	mov	r2, sl
 80061d8:	f7fa f9e8 	bl	80005ac <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7fa f82e 	bl	8000244 <__aeabi_dsub>
 80061e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061ec:	f7fa f9de 	bl	80005ac <__aeabi_dmul>
 80061f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80061f8:	4610      	mov	r0, r2
 80061fa:	4619      	mov	r1, r3
 80061fc:	f7fa f9d6 	bl	80005ac <__aeabi_dmul>
 8006200:	a377      	add	r3, pc, #476	; (adr r3, 80063e0 <__ieee754_pow+0x6a8>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	4604      	mov	r4, r0
 8006208:	460d      	mov	r5, r1
 800620a:	f7fa f9cf 	bl	80005ac <__aeabi_dmul>
 800620e:	a376      	add	r3, pc, #472	; (adr r3, 80063e8 <__ieee754_pow+0x6b0>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa f818 	bl	8000248 <__adddf3>
 8006218:	4622      	mov	r2, r4
 800621a:	462b      	mov	r3, r5
 800621c:	f7fa f9c6 	bl	80005ac <__aeabi_dmul>
 8006220:	a373      	add	r3, pc, #460	; (adr r3, 80063f0 <__ieee754_pow+0x6b8>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7fa f80f 	bl	8000248 <__adddf3>
 800622a:	4622      	mov	r2, r4
 800622c:	462b      	mov	r3, r5
 800622e:	f7fa f9bd 	bl	80005ac <__aeabi_dmul>
 8006232:	a371      	add	r3, pc, #452	; (adr r3, 80063f8 <__ieee754_pow+0x6c0>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f806 	bl	8000248 <__adddf3>
 800623c:	4622      	mov	r2, r4
 800623e:	462b      	mov	r3, r5
 8006240:	f7fa f9b4 	bl	80005ac <__aeabi_dmul>
 8006244:	a36e      	add	r3, pc, #440	; (adr r3, 8006400 <__ieee754_pow+0x6c8>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7f9 fffd 	bl	8000248 <__adddf3>
 800624e:	4622      	mov	r2, r4
 8006250:	462b      	mov	r3, r5
 8006252:	f7fa f9ab 	bl	80005ac <__aeabi_dmul>
 8006256:	a36c      	add	r3, pc, #432	; (adr r3, 8006408 <__ieee754_pow+0x6d0>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7f9 fff4 	bl	8000248 <__adddf3>
 8006260:	4622      	mov	r2, r4
 8006262:	4606      	mov	r6, r0
 8006264:	460f      	mov	r7, r1
 8006266:	462b      	mov	r3, r5
 8006268:	4620      	mov	r0, r4
 800626a:	4629      	mov	r1, r5
 800626c:	f7fa f99e 	bl	80005ac <__aeabi_dmul>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7fa f998 	bl	80005ac <__aeabi_dmul>
 800627c:	4604      	mov	r4, r0
 800627e:	460d      	mov	r5, r1
 8006280:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006284:	465b      	mov	r3, fp
 8006286:	4652      	mov	r2, sl
 8006288:	f7f9 ffde 	bl	8000248 <__adddf3>
 800628c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006290:	f7fa f98c 	bl	80005ac <__aeabi_dmul>
 8006294:	4622      	mov	r2, r4
 8006296:	462b      	mov	r3, r5
 8006298:	f7f9 ffd6 	bl	8000248 <__adddf3>
 800629c:	465b      	mov	r3, fp
 800629e:	4606      	mov	r6, r0
 80062a0:	460f      	mov	r7, r1
 80062a2:	4652      	mov	r2, sl
 80062a4:	4659      	mov	r1, fp
 80062a6:	4650      	mov	r0, sl
 80062a8:	f7fa f980 	bl	80005ac <__aeabi_dmul>
 80062ac:	2200      	movs	r2, #0
 80062ae:	4b63      	ldr	r3, [pc, #396]	; (800643c <__ieee754_pow+0x704>)
 80062b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062b4:	f7f9 ffc8 	bl	8000248 <__adddf3>
 80062b8:	4632      	mov	r2, r6
 80062ba:	463b      	mov	r3, r7
 80062bc:	f7f9 ffc4 	bl	8000248 <__adddf3>
 80062c0:	4650      	mov	r0, sl
 80062c2:	460d      	mov	r5, r1
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4650      	mov	r0, sl
 80062ca:	4659      	mov	r1, fp
 80062cc:	f7fa f96e 	bl	80005ac <__aeabi_dmul>
 80062d0:	2200      	movs	r2, #0
 80062d2:	4680      	mov	r8, r0
 80062d4:	4689      	mov	r9, r1
 80062d6:	4b59      	ldr	r3, [pc, #356]	; (800643c <__ieee754_pow+0x704>)
 80062d8:	4629      	mov	r1, r5
 80062da:	4650      	mov	r0, sl
 80062dc:	f7f9 ffb2 	bl	8000244 <__aeabi_dsub>
 80062e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062e4:	f7f9 ffae 	bl	8000244 <__aeabi_dsub>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7f9 ffa8 	bl	8000244 <__aeabi_dsub>
 80062f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f8:	f7fa f958 	bl	80005ac <__aeabi_dmul>
 80062fc:	462b      	mov	r3, r5
 80062fe:	4606      	mov	r6, r0
 8006300:	460f      	mov	r7, r1
 8006302:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006306:	4652      	mov	r2, sl
 8006308:	f7fa f950 	bl	80005ac <__aeabi_dmul>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7f9 ff98 	bl	8000248 <__adddf3>
 8006318:	4606      	mov	r6, r0
 800631a:	460f      	mov	r7, r1
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4640      	mov	r0, r8
 8006322:	4649      	mov	r1, r9
 8006324:	f7f9 ff90 	bl	8000248 <__adddf3>
 8006328:	a339      	add	r3, pc, #228	; (adr r3, 8006410 <__ieee754_pow+0x6d8>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	4650      	mov	r0, sl
 8006330:	460d      	mov	r5, r1
 8006332:	f7fa f93b 	bl	80005ac <__aeabi_dmul>
 8006336:	4642      	mov	r2, r8
 8006338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800633c:	464b      	mov	r3, r9
 800633e:	4629      	mov	r1, r5
 8006340:	4650      	mov	r0, sl
 8006342:	f7f9 ff7f 	bl	8000244 <__aeabi_dsub>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7f9 ff79 	bl	8000244 <__aeabi_dsub>
 8006352:	a331      	add	r3, pc, #196	; (adr r3, 8006418 <__ieee754_pow+0x6e0>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7fa f928 	bl	80005ac <__aeabi_dmul>
 800635c:	a330      	add	r3, pc, #192	; (adr r3, 8006420 <__ieee754_pow+0x6e8>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	4606      	mov	r6, r0
 8006364:	460f      	mov	r7, r1
 8006366:	4650      	mov	r0, sl
 8006368:	4629      	mov	r1, r5
 800636a:	f7fa f91f 	bl	80005ac <__aeabi_dmul>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	f7f9 ff67 	bl	8000248 <__adddf3>
 800637a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800637c:	4b30      	ldr	r3, [pc, #192]	; (8006440 <__ieee754_pow+0x708>)
 800637e:	4413      	add	r3, r2
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f7f9 ff60 	bl	8000248 <__adddf3>
 8006388:	4604      	mov	r4, r0
 800638a:	9807      	ldr	r0, [sp, #28]
 800638c:	460d      	mov	r5, r1
 800638e:	f7fa f8a7 	bl	80004e0 <__aeabi_i2d>
 8006392:	4606      	mov	r6, r0
 8006394:	460f      	mov	r7, r1
 8006396:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006398:	4b2a      	ldr	r3, [pc, #168]	; (8006444 <__ieee754_pow+0x70c>)
 800639a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800639e:	4413      	add	r3, r2
 80063a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	f7f9 ff4e 	bl	8000248 <__adddf3>
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	f7f9 ff4a 	bl	8000248 <__adddf3>
 80063b4:	4632      	mov	r2, r6
 80063b6:	463b      	mov	r3, r7
 80063b8:	f7f9 ff46 	bl	8000248 <__adddf3>
 80063bc:	4632      	mov	r2, r6
 80063be:	463b      	mov	r3, r7
 80063c0:	4650      	mov	r0, sl
 80063c2:	468b      	mov	fp, r1
 80063c4:	f7f9 ff3e 	bl	8000244 <__aeabi_dsub>
 80063c8:	4642      	mov	r2, r8
 80063ca:	464b      	mov	r3, r9
 80063cc:	f7f9 ff3a 	bl	8000244 <__aeabi_dsub>
 80063d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063d4:	e613      	b.n	8005ffe <__ieee754_pow+0x2c6>
 80063d6:	2601      	movs	r6, #1
 80063d8:	e6af      	b.n	800613a <__ieee754_pow+0x402>
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w
 80063e0:	4a454eef 	.word	0x4a454eef
 80063e4:	3fca7e28 	.word	0x3fca7e28
 80063e8:	93c9db65 	.word	0x93c9db65
 80063ec:	3fcd864a 	.word	0x3fcd864a
 80063f0:	a91d4101 	.word	0xa91d4101
 80063f4:	3fd17460 	.word	0x3fd17460
 80063f8:	518f264d 	.word	0x518f264d
 80063fc:	3fd55555 	.word	0x3fd55555
 8006400:	db6fabff 	.word	0xdb6fabff
 8006404:	3fdb6db6 	.word	0x3fdb6db6
 8006408:	33333303 	.word	0x33333303
 800640c:	3fe33333 	.word	0x3fe33333
 8006410:	e0000000 	.word	0xe0000000
 8006414:	3feec709 	.word	0x3feec709
 8006418:	dc3a03fd 	.word	0xdc3a03fd
 800641c:	3feec709 	.word	0x3feec709
 8006420:	145b01f5 	.word	0x145b01f5
 8006424:	be3e2fe0 	.word	0xbe3e2fe0
 8006428:	43400000 	.word	0x43400000
 800642c:	0003988e 	.word	0x0003988e
 8006430:	000bb679 	.word	0x000bb679
 8006434:	08006e50 	.word	0x08006e50
 8006438:	3ff00000 	.word	0x3ff00000
 800643c:	40080000 	.word	0x40080000
 8006440:	08006e70 	.word	0x08006e70
 8006444:	08006e60 	.word	0x08006e60
 8006448:	a39b      	add	r3, pc, #620	; (adr r3, 80066b8 <__ieee754_pow+0x980>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	4640      	mov	r0, r8
 8006450:	4649      	mov	r1, r9
 8006452:	f7f9 fef9 	bl	8000248 <__adddf3>
 8006456:	4622      	mov	r2, r4
 8006458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800645c:	462b      	mov	r3, r5
 800645e:	4650      	mov	r0, sl
 8006460:	4639      	mov	r1, r7
 8006462:	f7f9 feef 	bl	8000244 <__aeabi_dsub>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800646e:	f7fa fb2d 	bl	8000acc <__aeabi_dcmpgt>
 8006472:	2800      	cmp	r0, #0
 8006474:	f47f ae13 	bne.w	800609e <__ieee754_pow+0x366>
 8006478:	4aa3      	ldr	r2, [pc, #652]	; (8006708 <__ieee754_pow+0x9d0>)
 800647a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800647e:	4293      	cmp	r3, r2
 8006480:	f340 8104 	ble.w	800668c <__ieee754_pow+0x954>
 8006484:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006488:	2000      	movs	r0, #0
 800648a:	151b      	asrs	r3, r3, #20
 800648c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006490:	fa4a f303 	asr.w	r3, sl, r3
 8006494:	4433      	add	r3, r6
 8006496:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800649a:	4f9c      	ldr	r7, [pc, #624]	; (800670c <__ieee754_pow+0x9d4>)
 800649c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80064a0:	4117      	asrs	r7, r2
 80064a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80064a6:	ea23 0107 	bic.w	r1, r3, r7
 80064aa:	f1c2 0214 	rsb	r2, r2, #20
 80064ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80064b2:	fa4a fa02 	asr.w	sl, sl, r2
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	bfb8      	it	lt
 80064c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80064c6:	f7f9 febd 	bl	8000244 <__aeabi_dsub>
 80064ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d2:	4642      	mov	r2, r8
 80064d4:	464b      	mov	r3, r9
 80064d6:	f7f9 feb7 	bl	8000248 <__adddf3>
 80064da:	a379      	add	r3, pc, #484	; (adr r3, 80066c0 <__ieee754_pow+0x988>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	2000      	movs	r0, #0
 80064e2:	460d      	mov	r5, r1
 80064e4:	4604      	mov	r4, r0
 80064e6:	f7fa f861 	bl	80005ac <__aeabi_dmul>
 80064ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064ee:	4606      	mov	r6, r0
 80064f0:	460f      	mov	r7, r1
 80064f2:	4620      	mov	r0, r4
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7f9 fea5 	bl	8000244 <__aeabi_dsub>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7f9 fe9f 	bl	8000244 <__aeabi_dsub>
 8006506:	a370      	add	r3, pc, #448	; (adr r3, 80066c8 <__ieee754_pow+0x990>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7fa f84e 	bl	80005ac <__aeabi_dmul>
 8006510:	a36f      	add	r3, pc, #444	; (adr r3, 80066d0 <__ieee754_pow+0x998>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	4680      	mov	r8, r0
 8006518:	4689      	mov	r9, r1
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	f7fa f845 	bl	80005ac <__aeabi_dmul>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7f9 fe8d 	bl	8000248 <__adddf3>
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4630      	mov	r0, r6
 8006538:	4639      	mov	r1, r7
 800653a:	f7f9 fe85 	bl	8000248 <__adddf3>
 800653e:	4632      	mov	r2, r6
 8006540:	463b      	mov	r3, r7
 8006542:	4680      	mov	r8, r0
 8006544:	4689      	mov	r9, r1
 8006546:	f7f9 fe7d 	bl	8000244 <__aeabi_dsub>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f7f9 fe77 	bl	8000244 <__aeabi_dsub>
 8006556:	4642      	mov	r2, r8
 8006558:	4606      	mov	r6, r0
 800655a:	460f      	mov	r7, r1
 800655c:	464b      	mov	r3, r9
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7fa f823 	bl	80005ac <__aeabi_dmul>
 8006566:	a35c      	add	r3, pc, #368	; (adr r3, 80066d8 <__ieee754_pow+0x9a0>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	4604      	mov	r4, r0
 800656e:	460d      	mov	r5, r1
 8006570:	f7fa f81c 	bl	80005ac <__aeabi_dmul>
 8006574:	a35a      	add	r3, pc, #360	; (adr r3, 80066e0 <__ieee754_pow+0x9a8>)
 8006576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657a:	f7f9 fe63 	bl	8000244 <__aeabi_dsub>
 800657e:	4622      	mov	r2, r4
 8006580:	462b      	mov	r3, r5
 8006582:	f7fa f813 	bl	80005ac <__aeabi_dmul>
 8006586:	a358      	add	r3, pc, #352	; (adr r3, 80066e8 <__ieee754_pow+0x9b0>)
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f7f9 fe5c 	bl	8000248 <__adddf3>
 8006590:	4622      	mov	r2, r4
 8006592:	462b      	mov	r3, r5
 8006594:	f7fa f80a 	bl	80005ac <__aeabi_dmul>
 8006598:	a355      	add	r3, pc, #340	; (adr r3, 80066f0 <__ieee754_pow+0x9b8>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7f9 fe51 	bl	8000244 <__aeabi_dsub>
 80065a2:	4622      	mov	r2, r4
 80065a4:	462b      	mov	r3, r5
 80065a6:	f7fa f801 	bl	80005ac <__aeabi_dmul>
 80065aa:	a353      	add	r3, pc, #332	; (adr r3, 80066f8 <__ieee754_pow+0x9c0>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f7f9 fe4a 	bl	8000248 <__adddf3>
 80065b4:	4622      	mov	r2, r4
 80065b6:	462b      	mov	r3, r5
 80065b8:	f7f9 fff8 	bl	80005ac <__aeabi_dmul>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4640      	mov	r0, r8
 80065c2:	4649      	mov	r1, r9
 80065c4:	f7f9 fe3e 	bl	8000244 <__aeabi_dsub>
 80065c8:	4604      	mov	r4, r0
 80065ca:	460d      	mov	r5, r1
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4640      	mov	r0, r8
 80065d2:	4649      	mov	r1, r9
 80065d4:	f7f9 ffea 	bl	80005ac <__aeabi_dmul>
 80065d8:	2200      	movs	r2, #0
 80065da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065e2:	4620      	mov	r0, r4
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7f9 fe2d 	bl	8000244 <__aeabi_dsub>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f2:	f7fa f905 	bl	8000800 <__aeabi_ddiv>
 80065f6:	4632      	mov	r2, r6
 80065f8:	4604      	mov	r4, r0
 80065fa:	460d      	mov	r5, r1
 80065fc:	463b      	mov	r3, r7
 80065fe:	4640      	mov	r0, r8
 8006600:	4649      	mov	r1, r9
 8006602:	f7f9 ffd3 	bl	80005ac <__aeabi_dmul>
 8006606:	4632      	mov	r2, r6
 8006608:	463b      	mov	r3, r7
 800660a:	f7f9 fe1d 	bl	8000248 <__adddf3>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4620      	mov	r0, r4
 8006614:	4629      	mov	r1, r5
 8006616:	f7f9 fe15 	bl	8000244 <__aeabi_dsub>
 800661a:	4642      	mov	r2, r8
 800661c:	464b      	mov	r3, r9
 800661e:	f7f9 fe11 	bl	8000244 <__aeabi_dsub>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	2000      	movs	r0, #0
 8006628:	4939      	ldr	r1, [pc, #228]	; (8006710 <__ieee754_pow+0x9d8>)
 800662a:	f7f9 fe0b 	bl	8000244 <__aeabi_dsub>
 800662e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006632:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006636:	da2c      	bge.n	8006692 <__ieee754_pow+0x95a>
 8006638:	4652      	mov	r2, sl
 800663a:	f000 f9b5 	bl	80069a8 <scalbn>
 800663e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006642:	e40a      	b.n	8005e5a <__ieee754_pow+0x122>
 8006644:	4b33      	ldr	r3, [pc, #204]	; (8006714 <__ieee754_pow+0x9dc>)
 8006646:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800664a:	429f      	cmp	r7, r3
 800664c:	f77f af14 	ble.w	8006478 <__ieee754_pow+0x740>
 8006650:	4b31      	ldr	r3, [pc, #196]	; (8006718 <__ieee754_pow+0x9e0>)
 8006652:	440b      	add	r3, r1
 8006654:	4303      	orrs	r3, r0
 8006656:	d00b      	beq.n	8006670 <__ieee754_pow+0x938>
 8006658:	a329      	add	r3, pc, #164	; (adr r3, 8006700 <__ieee754_pow+0x9c8>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006662:	f7f9 ffa3 	bl	80005ac <__aeabi_dmul>
 8006666:	a326      	add	r3, pc, #152	; (adr r3, 8006700 <__ieee754_pow+0x9c8>)
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f7ff bbf5 	b.w	8005e5a <__ieee754_pow+0x122>
 8006670:	4622      	mov	r2, r4
 8006672:	462b      	mov	r3, r5
 8006674:	f7f9 fde6 	bl	8000244 <__aeabi_dsub>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4640      	mov	r0, r8
 800667e:	4649      	mov	r1, r9
 8006680:	f7fa fa10 	bl	8000aa4 <__aeabi_dcmple>
 8006684:	2800      	cmp	r0, #0
 8006686:	f43f aef7 	beq.w	8006478 <__ieee754_pow+0x740>
 800668a:	e7e5      	b.n	8006658 <__ieee754_pow+0x920>
 800668c:	f04f 0a00 	mov.w	sl, #0
 8006690:	e71d      	b.n	80064ce <__ieee754_pow+0x796>
 8006692:	4621      	mov	r1, r4
 8006694:	e7d3      	b.n	800663e <__ieee754_pow+0x906>
 8006696:	2000      	movs	r0, #0
 8006698:	491d      	ldr	r1, [pc, #116]	; (8006710 <__ieee754_pow+0x9d8>)
 800669a:	f7ff bbac 	b.w	8005df6 <__ieee754_pow+0xbe>
 800669e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a2:	f7ff bba8 	b.w	8005df6 <__ieee754_pow+0xbe>
 80066a6:	4638      	mov	r0, r7
 80066a8:	4641      	mov	r1, r8
 80066aa:	f7ff bba4 	b.w	8005df6 <__ieee754_pow+0xbe>
 80066ae:	9200      	str	r2, [sp, #0]
 80066b0:	f7ff bbb4 	b.w	8005e1c <__ieee754_pow+0xe4>
 80066b4:	f3af 8000 	nop.w
 80066b8:	652b82fe 	.word	0x652b82fe
 80066bc:	3c971547 	.word	0x3c971547
 80066c0:	00000000 	.word	0x00000000
 80066c4:	3fe62e43 	.word	0x3fe62e43
 80066c8:	fefa39ef 	.word	0xfefa39ef
 80066cc:	3fe62e42 	.word	0x3fe62e42
 80066d0:	0ca86c39 	.word	0x0ca86c39
 80066d4:	be205c61 	.word	0xbe205c61
 80066d8:	72bea4d0 	.word	0x72bea4d0
 80066dc:	3e663769 	.word	0x3e663769
 80066e0:	c5d26bf1 	.word	0xc5d26bf1
 80066e4:	3ebbbd41 	.word	0x3ebbbd41
 80066e8:	af25de2c 	.word	0xaf25de2c
 80066ec:	3f11566a 	.word	0x3f11566a
 80066f0:	16bebd93 	.word	0x16bebd93
 80066f4:	3f66c16c 	.word	0x3f66c16c
 80066f8:	5555553e 	.word	0x5555553e
 80066fc:	3fc55555 	.word	0x3fc55555
 8006700:	c2f8f359 	.word	0xc2f8f359
 8006704:	01a56e1f 	.word	0x01a56e1f
 8006708:	3fe00000 	.word	0x3fe00000
 800670c:	000fffff 	.word	0x000fffff
 8006710:	3ff00000 	.word	0x3ff00000
 8006714:	4090cbff 	.word	0x4090cbff
 8006718:	3f6f3400 	.word	0x3f6f3400

0800671c <__ieee754_sqrt>:
 800671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006720:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8006870 <__ieee754_sqrt+0x154>
 8006724:	4606      	mov	r6, r0
 8006726:	ea3e 0e01 	bics.w	lr, lr, r1
 800672a:	460d      	mov	r5, r1
 800672c:	4607      	mov	r7, r0
 800672e:	460a      	mov	r2, r1
 8006730:	460c      	mov	r4, r1
 8006732:	4603      	mov	r3, r0
 8006734:	d10f      	bne.n	8006756 <__ieee754_sqrt+0x3a>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	f7f9 ff37 	bl	80005ac <__aeabi_dmul>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4630      	mov	r0, r6
 8006744:	4629      	mov	r1, r5
 8006746:	f7f9 fd7f 	bl	8000248 <__adddf3>
 800674a:	4606      	mov	r6, r0
 800674c:	460d      	mov	r5, r1
 800674e:	4630      	mov	r0, r6
 8006750:	4629      	mov	r1, r5
 8006752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006756:	2900      	cmp	r1, #0
 8006758:	dc0e      	bgt.n	8006778 <__ieee754_sqrt+0x5c>
 800675a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800675e:	ea5e 0707 	orrs.w	r7, lr, r7
 8006762:	d0f4      	beq.n	800674e <__ieee754_sqrt+0x32>
 8006764:	b141      	cbz	r1, 8006778 <__ieee754_sqrt+0x5c>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	f7f9 fd6b 	bl	8000244 <__aeabi_dsub>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	f7fa f845 	bl	8000800 <__aeabi_ddiv>
 8006776:	e7e8      	b.n	800674a <__ieee754_sqrt+0x2e>
 8006778:	1512      	asrs	r2, r2, #20
 800677a:	d10c      	bne.n	8006796 <__ieee754_sqrt+0x7a>
 800677c:	2c00      	cmp	r4, #0
 800677e:	d06e      	beq.n	800685e <__ieee754_sqrt+0x142>
 8006780:	2100      	movs	r1, #0
 8006782:	02e6      	lsls	r6, r4, #11
 8006784:	d56f      	bpl.n	8006866 <__ieee754_sqrt+0x14a>
 8006786:	1e48      	subs	r0, r1, #1
 8006788:	1a12      	subs	r2, r2, r0
 800678a:	f1c1 0020 	rsb	r0, r1, #32
 800678e:	fa23 f000 	lsr.w	r0, r3, r0
 8006792:	4304      	orrs	r4, r0
 8006794:	408b      	lsls	r3, r1
 8006796:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800679a:	07d5      	lsls	r5, r2, #31
 800679c:	f04f 0500 	mov.w	r5, #0
 80067a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80067a4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80067a8:	bf42      	ittt	mi
 80067aa:	0064      	lslmi	r4, r4, #1
 80067ac:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80067b0:	005b      	lslmi	r3, r3, #1
 80067b2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80067b6:	1050      	asrs	r0, r2, #1
 80067b8:	4421      	add	r1, r4
 80067ba:	2216      	movs	r2, #22
 80067bc:	462c      	mov	r4, r5
 80067be:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	19a7      	adds	r7, r4, r6
 80067c6:	428f      	cmp	r7, r1
 80067c8:	bfde      	ittt	le
 80067ca:	1bc9      	suble	r1, r1, r7
 80067cc:	19bc      	addle	r4, r7, r6
 80067ce:	19ad      	addle	r5, r5, r6
 80067d0:	0049      	lsls	r1, r1, #1
 80067d2:	3a01      	subs	r2, #1
 80067d4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80067d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80067dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067e0:	d1f0      	bne.n	80067c4 <__ieee754_sqrt+0xa8>
 80067e2:	f04f 0e20 	mov.w	lr, #32
 80067e6:	4694      	mov	ip, r2
 80067e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80067ec:	42a1      	cmp	r1, r4
 80067ee:	eb06 070c 	add.w	r7, r6, ip
 80067f2:	dc02      	bgt.n	80067fa <__ieee754_sqrt+0xde>
 80067f4:	d112      	bne.n	800681c <__ieee754_sqrt+0x100>
 80067f6:	429f      	cmp	r7, r3
 80067f8:	d810      	bhi.n	800681c <__ieee754_sqrt+0x100>
 80067fa:	2f00      	cmp	r7, #0
 80067fc:	eb07 0c06 	add.w	ip, r7, r6
 8006800:	da34      	bge.n	800686c <__ieee754_sqrt+0x150>
 8006802:	f1bc 0f00 	cmp.w	ip, #0
 8006806:	db31      	blt.n	800686c <__ieee754_sqrt+0x150>
 8006808:	f104 0801 	add.w	r8, r4, #1
 800680c:	1b09      	subs	r1, r1, r4
 800680e:	4644      	mov	r4, r8
 8006810:	429f      	cmp	r7, r3
 8006812:	bf88      	it	hi
 8006814:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006818:	1bdb      	subs	r3, r3, r7
 800681a:	4432      	add	r2, r6
 800681c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8006820:	f1be 0e01 	subs.w	lr, lr, #1
 8006824:	4439      	add	r1, r7
 8006826:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800682a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800682e:	d1dd      	bne.n	80067ec <__ieee754_sqrt+0xd0>
 8006830:	430b      	orrs	r3, r1
 8006832:	d006      	beq.n	8006842 <__ieee754_sqrt+0x126>
 8006834:	1c54      	adds	r4, r2, #1
 8006836:	bf0b      	itete	eq
 8006838:	4672      	moveq	r2, lr
 800683a:	3201      	addne	r2, #1
 800683c:	3501      	addeq	r5, #1
 800683e:	f022 0201 	bicne.w	r2, r2, #1
 8006842:	106b      	asrs	r3, r5, #1
 8006844:	0852      	lsrs	r2, r2, #1
 8006846:	07e9      	lsls	r1, r5, #31
 8006848:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800684c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006850:	bf48      	it	mi
 8006852:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006856:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800685a:	4616      	mov	r6, r2
 800685c:	e777      	b.n	800674e <__ieee754_sqrt+0x32>
 800685e:	0adc      	lsrs	r4, r3, #11
 8006860:	3a15      	subs	r2, #21
 8006862:	055b      	lsls	r3, r3, #21
 8006864:	e78a      	b.n	800677c <__ieee754_sqrt+0x60>
 8006866:	0064      	lsls	r4, r4, #1
 8006868:	3101      	adds	r1, #1
 800686a:	e78a      	b.n	8006782 <__ieee754_sqrt+0x66>
 800686c:	46a0      	mov	r8, r4
 800686e:	e7cd      	b.n	800680c <__ieee754_sqrt+0xf0>
 8006870:	7ff00000 	.word	0x7ff00000

08006874 <fabs>:
 8006874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006878:	4770      	bx	lr

0800687a <finite>:
 800687a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800687e:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006882:	0fc0      	lsrs	r0, r0, #31
 8006884:	4770      	bx	lr

08006886 <matherr>:
 8006886:	2000      	movs	r0, #0
 8006888:	4770      	bx	lr
	...

0800688c <nan>:
 800688c:	2000      	movs	r0, #0
 800688e:	4901      	ldr	r1, [pc, #4]	; (8006894 <nan+0x8>)
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	7ff80000 	.word	0x7ff80000

08006898 <rint>:
 8006898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800689a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800689e:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 80068a2:	2f13      	cmp	r7, #19
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4684      	mov	ip, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	4605      	mov	r5, r0
 80068ae:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80068b2:	dc56      	bgt.n	8006962 <rint+0xca>
 80068b4:	2f00      	cmp	r7, #0
 80068b6:	da29      	bge.n	800690c <rint+0x74>
 80068b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80068bc:	4301      	orrs	r1, r0
 80068be:	d021      	beq.n	8006904 <rint+0x6c>
 80068c0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80068c4:	4305      	orrs	r5, r0
 80068c6:	426b      	negs	r3, r5
 80068c8:	432b      	orrs	r3, r5
 80068ca:	0b1b      	lsrs	r3, r3, #12
 80068cc:	0c64      	lsrs	r4, r4, #17
 80068ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068d2:	0464      	lsls	r4, r4, #17
 80068d4:	ea43 0104 	orr.w	r1, r3, r4
 80068d8:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <rint+0x108>)
 80068da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80068e2:	4622      	mov	r2, r4
 80068e4:	462b      	mov	r3, r5
 80068e6:	f7f9 fcaf 	bl	8000248 <__adddf3>
 80068ea:	e9cd 0100 	strd	r0, r1, [sp]
 80068ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	f7f9 fca5 	bl	8000244 <__aeabi_dsub>
 80068fa:	4602      	mov	r2, r0
 80068fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006900:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	b003      	add	sp, #12
 800690a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800690c:	4925      	ldr	r1, [pc, #148]	; (80069a4 <rint+0x10c>)
 800690e:	4139      	asrs	r1, r7
 8006910:	ea03 0001 	and.w	r0, r3, r1
 8006914:	4310      	orrs	r0, r2
 8006916:	d0f5      	beq.n	8006904 <rint+0x6c>
 8006918:	084b      	lsrs	r3, r1, #1
 800691a:	ea04 0203 	and.w	r2, r4, r3
 800691e:	ea52 050c 	orrs.w	r5, r2, ip
 8006922:	d00a      	beq.n	800693a <rint+0xa2>
 8006924:	ea24 0303 	bic.w	r3, r4, r3
 8006928:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800692c:	2f13      	cmp	r7, #19
 800692e:	bf0c      	ite	eq
 8006930:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8006934:	2500      	movne	r5, #0
 8006936:	413c      	asrs	r4, r7
 8006938:	431c      	orrs	r4, r3
 800693a:	4b19      	ldr	r3, [pc, #100]	; (80069a0 <rint+0x108>)
 800693c:	4621      	mov	r1, r4
 800693e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006942:	4628      	mov	r0, r5
 8006944:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006948:	4622      	mov	r2, r4
 800694a:	462b      	mov	r3, r5
 800694c:	f7f9 fc7c 	bl	8000248 <__adddf3>
 8006950:	e9cd 0100 	strd	r0, r1, [sp]
 8006954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	f7f9 fc72 	bl	8000244 <__aeabi_dsub>
 8006960:	e006      	b.n	8006970 <rint+0xd8>
 8006962:	2f33      	cmp	r7, #51	; 0x33
 8006964:	dd07      	ble.n	8006976 <rint+0xde>
 8006966:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800696a:	d1cb      	bne.n	8006904 <rint+0x6c>
 800696c:	f7f9 fc6c 	bl	8000248 <__adddf3>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	e7c6      	b.n	8006904 <rint+0x6c>
 8006976:	f04f 31ff 	mov.w	r1, #4294967295
 800697a:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800697e:	fa21 f10e 	lsr.w	r1, r1, lr
 8006982:	4208      	tst	r0, r1
 8006984:	d0be      	beq.n	8006904 <rint+0x6c>
 8006986:	084b      	lsrs	r3, r1, #1
 8006988:	4218      	tst	r0, r3
 800698a:	bf1f      	itttt	ne
 800698c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8006990:	ea20 0303 	bicne.w	r3, r0, r3
 8006994:	fa45 fe0e 	asrne.w	lr, r5, lr
 8006998:	ea4e 0503 	orrne.w	r5, lr, r3
 800699c:	e7cd      	b.n	800693a <rint+0xa2>
 800699e:	bf00      	nop
 80069a0:	08006e80 	.word	0x08006e80
 80069a4:	000fffff 	.word	0x000fffff

080069a8 <scalbn>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	4616      	mov	r6, r2
 80069ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80069b0:	4604      	mov	r4, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	460b      	mov	r3, r1
 80069b6:	b98a      	cbnz	r2, 80069dc <scalbn+0x34>
 80069b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80069bc:	4303      	orrs	r3, r0
 80069be:	d035      	beq.n	8006a2c <scalbn+0x84>
 80069c0:	2200      	movs	r2, #0
 80069c2:	4b2d      	ldr	r3, [pc, #180]	; (8006a78 <scalbn+0xd0>)
 80069c4:	f7f9 fdf2 	bl	80005ac <__aeabi_dmul>
 80069c8:	4a2c      	ldr	r2, [pc, #176]	; (8006a7c <scalbn+0xd4>)
 80069ca:	4604      	mov	r4, r0
 80069cc:	4296      	cmp	r6, r2
 80069ce:	460d      	mov	r5, r1
 80069d0:	460b      	mov	r3, r1
 80069d2:	da0e      	bge.n	80069f2 <scalbn+0x4a>
 80069d4:	a324      	add	r3, pc, #144	; (adr r3, 8006a68 <scalbn+0xc0>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	e01c      	b.n	8006a16 <scalbn+0x6e>
 80069dc:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80069e0:	42ba      	cmp	r2, r7
 80069e2:	d109      	bne.n	80069f8 <scalbn+0x50>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	f7f9 fc2e 	bl	8000248 <__adddf3>
 80069ec:	4604      	mov	r4, r0
 80069ee:	460d      	mov	r5, r1
 80069f0:	e01c      	b.n	8006a2c <scalbn+0x84>
 80069f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80069f6:	3a36      	subs	r2, #54	; 0x36
 80069f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80069fc:	4432      	add	r2, r6
 80069fe:	428a      	cmp	r2, r1
 8006a00:	dd0c      	ble.n	8006a1c <scalbn+0x74>
 8006a02:	4622      	mov	r2, r4
 8006a04:	462b      	mov	r3, r5
 8006a06:	a11a      	add	r1, pc, #104	; (adr r1, 8006a70 <scalbn+0xc8>)
 8006a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a0c:	f000 f83a 	bl	8006a84 <copysign>
 8006a10:	a317      	add	r3, pc, #92	; (adr r3, 8006a70 <scalbn+0xc8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 fdc9 	bl	80005ac <__aeabi_dmul>
 8006a1a:	e7e7      	b.n	80069ec <scalbn+0x44>
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	dd08      	ble.n	8006a32 <scalbn+0x8a>
 8006a20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a32:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006a36:	da0b      	bge.n	8006a50 <scalbn+0xa8>
 8006a38:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a3c:	429e      	cmp	r6, r3
 8006a3e:	4622      	mov	r2, r4
 8006a40:	462b      	mov	r3, r5
 8006a42:	dce0      	bgt.n	8006a06 <scalbn+0x5e>
 8006a44:	a108      	add	r1, pc, #32	; (adr r1, 8006a68 <scalbn+0xc0>)
 8006a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a4a:	f000 f81b 	bl	8006a84 <copysign>
 8006a4e:	e7c1      	b.n	80069d4 <scalbn+0x2c>
 8006a50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a54:	3236      	adds	r2, #54	; 0x36
 8006a56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4629      	mov	r1, r5
 8006a62:	2200      	movs	r2, #0
 8006a64:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <scalbn+0xd8>)
 8006a66:	e7d6      	b.n	8006a16 <scalbn+0x6e>
 8006a68:	c2f8f359 	.word	0xc2f8f359
 8006a6c:	01a56e1f 	.word	0x01a56e1f
 8006a70:	8800759c 	.word	0x8800759c
 8006a74:	7e37e43c 	.word	0x7e37e43c
 8006a78:	43500000 	.word	0x43500000
 8006a7c:	ffff3cb0 	.word	0xffff3cb0
 8006a80:	3c900000 	.word	0x3c900000

08006a84 <copysign>:
 8006a84:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a8c:	ea42 0103 	orr.w	r1, r2, r3
 8006a90:	4770      	bx	lr

08006a92 <abort>:
 8006a92:	b508      	push	{r3, lr}
 8006a94:	2006      	movs	r0, #6
 8006a96:	f000 f8bf 	bl	8006c18 <raise>
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	f7fc fbaa 	bl	80031f4 <_exit>

08006aa0 <__cxa_atexit>:
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	4c05      	ldr	r4, [pc, #20]	; (8006ab8 <__cxa_atexit+0x18>)
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	b12c      	cbz	r4, 8006ab4 <__cxa_atexit+0x14>
 8006aa8:	460a      	mov	r2, r1
 8006aaa:	4601      	mov	r1, r0
 8006aac:	2002      	movs	r0, #2
 8006aae:	f3af 8000 	nop.w
 8006ab2:	bd10      	pop	{r4, pc}
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	bd10      	pop	{r4, pc}
 8006ab8:	00000000 	.word	0x00000000

08006abc <__errno>:
 8006abc:	4b01      	ldr	r3, [pc, #4]	; (8006ac4 <__errno+0x8>)
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	2000001c 	.word	0x2000001c

08006ac8 <__libc_init_array>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	2500      	movs	r5, #0
 8006acc:	4e0c      	ldr	r6, [pc, #48]	; (8006b00 <__libc_init_array+0x38>)
 8006ace:	4c0d      	ldr	r4, [pc, #52]	; (8006b04 <__libc_init_array+0x3c>)
 8006ad0:	1ba4      	subs	r4, r4, r6
 8006ad2:	10a4      	asrs	r4, r4, #2
 8006ad4:	42a5      	cmp	r5, r4
 8006ad6:	d109      	bne.n	8006aec <__libc_init_array+0x24>
 8006ad8:	f000 f8c8 	bl	8006c6c <_init>
 8006adc:	2500      	movs	r5, #0
 8006ade:	4e0a      	ldr	r6, [pc, #40]	; (8006b08 <__libc_init_array+0x40>)
 8006ae0:	4c0a      	ldr	r4, [pc, #40]	; (8006b0c <__libc_init_array+0x44>)
 8006ae2:	1ba4      	subs	r4, r4, r6
 8006ae4:	10a4      	asrs	r4, r4, #2
 8006ae6:	42a5      	cmp	r5, r4
 8006ae8:	d105      	bne.n	8006af6 <__libc_init_array+0x2e>
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006af0:	4798      	blx	r3
 8006af2:	3501      	adds	r5, #1
 8006af4:	e7ee      	b.n	8006ad4 <__libc_init_array+0xc>
 8006af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006afa:	4798      	blx	r3
 8006afc:	3501      	adds	r5, #1
 8006afe:	e7f2      	b.n	8006ae6 <__libc_init_array+0x1e>
 8006b00:	08007170 	.word	0x08007170
 8006b04:	08007170 	.word	0x08007170
 8006b08:	08007170 	.word	0x08007170
 8006b0c:	08007180 	.word	0x08007180

08006b10 <free>:
 8006b10:	4b02      	ldr	r3, [pc, #8]	; (8006b1c <free+0xc>)
 8006b12:	4601      	mov	r1, r0
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	f000 b80b 	b.w	8006b30 <_free_r>
 8006b1a:	bf00      	nop
 8006b1c:	2000001c 	.word	0x2000001c

08006b20 <memset>:
 8006b20:	4603      	mov	r3, r0
 8006b22:	4402      	add	r2, r0
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d100      	bne.n	8006b2a <memset+0xa>
 8006b28:	4770      	bx	lr
 8006b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b2e:	e7f9      	b.n	8006b24 <memset+0x4>

08006b30 <_free_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4605      	mov	r5, r0
 8006b34:	2900      	cmp	r1, #0
 8006b36:	d043      	beq.n	8006bc0 <_free_r+0x90>
 8006b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b3c:	1f0c      	subs	r4, r1, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bfb8      	it	lt
 8006b42:	18e4      	addlt	r4, r4, r3
 8006b44:	f000 f884 	bl	8006c50 <__malloc_lock>
 8006b48:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <_free_r+0x94>)
 8006b4a:	6813      	ldr	r3, [r2, #0]
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	b933      	cbnz	r3, 8006b5e <_free_r+0x2e>
 8006b50:	6063      	str	r3, [r4, #4]
 8006b52:	6014      	str	r4, [r2, #0]
 8006b54:	4628      	mov	r0, r5
 8006b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b5a:	f000 b87a 	b.w	8006c52 <__malloc_unlock>
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	d90b      	bls.n	8006b7a <_free_r+0x4a>
 8006b62:	6821      	ldr	r1, [r4, #0]
 8006b64:	1862      	adds	r2, r4, r1
 8006b66:	4293      	cmp	r3, r2
 8006b68:	bf01      	itttt	eq
 8006b6a:	681a      	ldreq	r2, [r3, #0]
 8006b6c:	685b      	ldreq	r3, [r3, #4]
 8006b6e:	1852      	addeq	r2, r2, r1
 8006b70:	6022      	streq	r2, [r4, #0]
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	6004      	str	r4, [r0, #0]
 8006b76:	e7ed      	b.n	8006b54 <_free_r+0x24>
 8006b78:	4613      	mov	r3, r2
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	b10a      	cbz	r2, 8006b82 <_free_r+0x52>
 8006b7e:	42a2      	cmp	r2, r4
 8006b80:	d9fa      	bls.n	8006b78 <_free_r+0x48>
 8006b82:	6819      	ldr	r1, [r3, #0]
 8006b84:	1858      	adds	r0, r3, r1
 8006b86:	42a0      	cmp	r0, r4
 8006b88:	d10b      	bne.n	8006ba2 <_free_r+0x72>
 8006b8a:	6820      	ldr	r0, [r4, #0]
 8006b8c:	4401      	add	r1, r0
 8006b8e:	1858      	adds	r0, r3, r1
 8006b90:	4282      	cmp	r2, r0
 8006b92:	6019      	str	r1, [r3, #0]
 8006b94:	d1de      	bne.n	8006b54 <_free_r+0x24>
 8006b96:	6810      	ldr	r0, [r2, #0]
 8006b98:	6852      	ldr	r2, [r2, #4]
 8006b9a:	4401      	add	r1, r0
 8006b9c:	6019      	str	r1, [r3, #0]
 8006b9e:	605a      	str	r2, [r3, #4]
 8006ba0:	e7d8      	b.n	8006b54 <_free_r+0x24>
 8006ba2:	d902      	bls.n	8006baa <_free_r+0x7a>
 8006ba4:	230c      	movs	r3, #12
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	e7d4      	b.n	8006b54 <_free_r+0x24>
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	1821      	adds	r1, r4, r0
 8006bae:	428a      	cmp	r2, r1
 8006bb0:	bf01      	itttt	eq
 8006bb2:	6811      	ldreq	r1, [r2, #0]
 8006bb4:	6852      	ldreq	r2, [r2, #4]
 8006bb6:	1809      	addeq	r1, r1, r0
 8006bb8:	6021      	streq	r1, [r4, #0]
 8006bba:	6062      	str	r2, [r4, #4]
 8006bbc:	605c      	str	r4, [r3, #4]
 8006bbe:	e7c9      	b.n	8006b54 <_free_r+0x24>
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000218 	.word	0x20000218

08006bc8 <_raise_r>:
 8006bc8:	291f      	cmp	r1, #31
 8006bca:	b538      	push	{r3, r4, r5, lr}
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	d904      	bls.n	8006bdc <_raise_r+0x14>
 8006bd2:	2316      	movs	r3, #22
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bde:	b112      	cbz	r2, 8006be6 <_raise_r+0x1e>
 8006be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006be4:	b94b      	cbnz	r3, 8006bfa <_raise_r+0x32>
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f830 	bl	8006c4c <_getpid_r>
 8006bec:	462a      	mov	r2, r5
 8006bee:	4601      	mov	r1, r0
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf6:	f000 b817 	b.w	8006c28 <_kill_r>
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d00a      	beq.n	8006c14 <_raise_r+0x4c>
 8006bfe:	1c59      	adds	r1, r3, #1
 8006c00:	d103      	bne.n	8006c0a <_raise_r+0x42>
 8006c02:	2316      	movs	r3, #22
 8006c04:	6003      	str	r3, [r0, #0]
 8006c06:	2001      	movs	r0, #1
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
 8006c0a:	2400      	movs	r4, #0
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c12:	4798      	blx	r3
 8006c14:	2000      	movs	r0, #0
 8006c16:	bd38      	pop	{r3, r4, r5, pc}

08006c18 <raise>:
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <raise+0xc>)
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f7ff bfd3 	b.w	8006bc8 <_raise_r>
 8006c22:	bf00      	nop
 8006c24:	2000001c 	.word	0x2000001c

08006c28 <_kill_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	4c06      	ldr	r4, [pc, #24]	; (8006c48 <_kill_r+0x20>)
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	f7fc fad5 	bl	80031e4 <_kill>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d102      	bne.n	8006c44 <_kill_r+0x1c>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	b103      	cbz	r3, 8006c44 <_kill_r+0x1c>
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	bd38      	pop	{r3, r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	20000404 	.word	0x20000404

08006c4c <_getpid_r>:
 8006c4c:	f7fc bac8 	b.w	80031e0 <_getpid>

08006c50 <__malloc_lock>:
 8006c50:	4770      	bx	lr

08006c52 <__malloc_unlock>:
 8006c52:	4770      	bx	lr

08006c54 <memcpy>:
 8006c54:	b510      	push	{r4, lr}
 8006c56:	1e43      	subs	r3, r0, #1
 8006c58:	440a      	add	r2, r1
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	d100      	bne.n	8006c60 <memcpy+0xc>
 8006c5e:	bd10      	pop	{r4, pc}
 8006c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c68:	e7f7      	b.n	8006c5a <memcpy+0x6>
	...

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr
