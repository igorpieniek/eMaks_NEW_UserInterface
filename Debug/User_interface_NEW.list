
User_interface_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000014c  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001d8  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000010  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000007c  20000000  08005c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000394  2000007c  08005d10  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000500  20000410  08005d10  00020410  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018c7f  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000430a  00000000  00000000  00038d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e88  00000000  00000000  0003d030  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001118  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008a82  00000000  00000000  0003efd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000057d5  00000000  00000000  00047a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d227  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003b7c  00000000  00000000  0004d2a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00007d47  00000000  00000000  00050e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	00000000 	.word	0x00000000
 8000204:	08005784 	.word	0x08005784

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000080 	.word	0x20000080
 8000220:	08005784 	.word	0x08005784

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <__aeabi_frsub>:
 8000238:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__addsf3>
 800023e:	bf00      	nop

08000240 <__aeabi_fsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000244 <__addsf3>:
 8000244:	0042      	lsls	r2, r0, #1
 8000246:	bf1f      	itttt	ne
 8000248:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800024c:	ea92 0f03 	teqne	r2, r3
 8000250:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000254:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000258:	d06a      	beq.n	8000330 <__addsf3+0xec>
 800025a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000262:	bfc1      	itttt	gt
 8000264:	18d2      	addgt	r2, r2, r3
 8000266:	4041      	eorgt	r1, r0
 8000268:	4048      	eorgt	r0, r1
 800026a:	4041      	eorgt	r1, r0
 800026c:	bfb8      	it	lt
 800026e:	425b      	neglt	r3, r3
 8000270:	2b19      	cmp	r3, #25
 8000272:	bf88      	it	hi
 8000274:	4770      	bxhi	lr
 8000276:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800027a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000282:	bf18      	it	ne
 8000284:	4240      	negne	r0, r0
 8000286:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000292:	bf18      	it	ne
 8000294:	4249      	negne	r1, r1
 8000296:	ea92 0f03 	teq	r2, r3
 800029a:	d03f      	beq.n	800031c <__addsf3+0xd8>
 800029c:	f1a2 0201 	sub.w	r2, r2, #1
 80002a0:	fa41 fc03 	asr.w	ip, r1, r3
 80002a4:	eb10 000c 	adds.w	r0, r0, ip
 80002a8:	f1c3 0320 	rsb	r3, r3, #32
 80002ac:	fa01 f103 	lsl.w	r1, r1, r3
 80002b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b4:	d502      	bpl.n	80002bc <__addsf3+0x78>
 80002b6:	4249      	negs	r1, r1
 80002b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002c0:	d313      	bcc.n	80002ea <__addsf3+0xa6>
 80002c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c6:	d306      	bcc.n	80002d6 <__addsf3+0x92>
 80002c8:	0840      	lsrs	r0, r0, #1
 80002ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ce:	f102 0201 	add.w	r2, r2, #1
 80002d2:	2afe      	cmp	r2, #254	; 0xfe
 80002d4:	d251      	bcs.n	800037a <__addsf3+0x136>
 80002d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002de:	bf08      	it	eq
 80002e0:	f020 0001 	biceq.w	r0, r0, #1
 80002e4:	ea40 0003 	orr.w	r0, r0, r3
 80002e8:	4770      	bx	lr
 80002ea:	0049      	lsls	r1, r1, #1
 80002ec:	eb40 0000 	adc.w	r0, r0, r0
 80002f0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002f4:	f1a2 0201 	sub.w	r2, r2, #1
 80002f8:	d1ed      	bne.n	80002d6 <__addsf3+0x92>
 80002fa:	fab0 fc80 	clz	ip, r0
 80002fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000302:	ebb2 020c 	subs.w	r2, r2, ip
 8000306:	fa00 f00c 	lsl.w	r0, r0, ip
 800030a:	bfaa      	itet	ge
 800030c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000310:	4252      	neglt	r2, r2
 8000312:	4318      	orrge	r0, r3
 8000314:	bfbc      	itt	lt
 8000316:	40d0      	lsrlt	r0, r2
 8000318:	4318      	orrlt	r0, r3
 800031a:	4770      	bx	lr
 800031c:	f092 0f00 	teq	r2, #0
 8000320:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000324:	bf06      	itte	eq
 8000326:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800032a:	3201      	addeq	r2, #1
 800032c:	3b01      	subne	r3, #1
 800032e:	e7b5      	b.n	800029c <__addsf3+0x58>
 8000330:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000334:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000338:	bf18      	it	ne
 800033a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033e:	d021      	beq.n	8000384 <__addsf3+0x140>
 8000340:	ea92 0f03 	teq	r2, r3
 8000344:	d004      	beq.n	8000350 <__addsf3+0x10c>
 8000346:	f092 0f00 	teq	r2, #0
 800034a:	bf08      	it	eq
 800034c:	4608      	moveq	r0, r1
 800034e:	4770      	bx	lr
 8000350:	ea90 0f01 	teq	r0, r1
 8000354:	bf1c      	itt	ne
 8000356:	2000      	movne	r0, #0
 8000358:	4770      	bxne	lr
 800035a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035e:	d104      	bne.n	800036a <__addsf3+0x126>
 8000360:	0040      	lsls	r0, r0, #1
 8000362:	bf28      	it	cs
 8000364:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000368:	4770      	bx	lr
 800036a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036e:	bf3c      	itt	cc
 8000370:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000374:	4770      	bxcc	lr
 8000376:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800037a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000382:	4770      	bx	lr
 8000384:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000388:	bf16      	itet	ne
 800038a:	4608      	movne	r0, r1
 800038c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000390:	4601      	movne	r1, r0
 8000392:	0242      	lsls	r2, r0, #9
 8000394:	bf06      	itte	eq
 8000396:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800039a:	ea90 0f01 	teqeq	r0, r1
 800039e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_ui2f>:
 80003a4:	f04f 0300 	mov.w	r3, #0
 80003a8:	e004      	b.n	80003b4 <__aeabi_i2f+0x8>
 80003aa:	bf00      	nop

080003ac <__aeabi_i2f>:
 80003ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003b0:	bf48      	it	mi
 80003b2:	4240      	negmi	r0, r0
 80003b4:	ea5f 0c00 	movs.w	ip, r0
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003c0:	4601      	mov	r1, r0
 80003c2:	f04f 0000 	mov.w	r0, #0
 80003c6:	e01c      	b.n	8000402 <__aeabi_l2f+0x2a>

080003c8 <__aeabi_ul2f>:
 80003c8:	ea50 0201 	orrs.w	r2, r0, r1
 80003cc:	bf08      	it	eq
 80003ce:	4770      	bxeq	lr
 80003d0:	f04f 0300 	mov.w	r3, #0
 80003d4:	e00a      	b.n	80003ec <__aeabi_l2f+0x14>
 80003d6:	bf00      	nop

080003d8 <__aeabi_l2f>:
 80003d8:	ea50 0201 	orrs.w	r2, r0, r1
 80003dc:	bf08      	it	eq
 80003de:	4770      	bxeq	lr
 80003e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e4:	d502      	bpl.n	80003ec <__aeabi_l2f+0x14>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	ea5f 0c01 	movs.w	ip, r1
 80003f0:	bf02      	ittt	eq
 80003f2:	4684      	moveq	ip, r0
 80003f4:	4601      	moveq	r1, r0
 80003f6:	2000      	moveq	r0, #0
 80003f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003fc:	bf08      	it	eq
 80003fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000402:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000406:	fabc f28c 	clz	r2, ip
 800040a:	3a08      	subs	r2, #8
 800040c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000410:	db10      	blt.n	8000434 <__aeabi_l2f+0x5c>
 8000412:	fa01 fc02 	lsl.w	ip, r1, r2
 8000416:	4463      	add	r3, ip
 8000418:	fa00 fc02 	lsl.w	ip, r0, r2
 800041c:	f1c2 0220 	rsb	r2, r2, #32
 8000420:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000424:	fa20 f202 	lsr.w	r2, r0, r2
 8000428:	eb43 0002 	adc.w	r0, r3, r2
 800042c:	bf08      	it	eq
 800042e:	f020 0001 	biceq.w	r0, r0, #1
 8000432:	4770      	bx	lr
 8000434:	f102 0220 	add.w	r2, r2, #32
 8000438:	fa01 fc02 	lsl.w	ip, r1, r2
 800043c:	f1c2 0220 	rsb	r2, r2, #32
 8000440:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000444:	fa21 f202 	lsr.w	r2, r1, r2
 8000448:	eb43 0002 	adc.w	r0, r3, r2
 800044c:	bf08      	it	eq
 800044e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000452:	4770      	bx	lr

08000454 <__aeabi_fmul>:
 8000454:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000458:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800045c:	bf1e      	ittt	ne
 800045e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000462:	ea92 0f0c 	teqne	r2, ip
 8000466:	ea93 0f0c 	teqne	r3, ip
 800046a:	d06f      	beq.n	800054c <__aeabi_fmul+0xf8>
 800046c:	441a      	add	r2, r3
 800046e:	ea80 0c01 	eor.w	ip, r0, r1
 8000472:	0240      	lsls	r0, r0, #9
 8000474:	bf18      	it	ne
 8000476:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800047a:	d01e      	beq.n	80004ba <__aeabi_fmul+0x66>
 800047c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000480:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000484:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000488:	fba0 3101 	umull	r3, r1, r0, r1
 800048c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000490:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000494:	bf3e      	ittt	cc
 8000496:	0049      	lslcc	r1, r1, #1
 8000498:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800049c:	005b      	lslcc	r3, r3, #1
 800049e:	ea40 0001 	orr.w	r0, r0, r1
 80004a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004a6:	2afd      	cmp	r2, #253	; 0xfd
 80004a8:	d81d      	bhi.n	80004e6 <__aeabi_fmul+0x92>
 80004aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004b2:	bf08      	it	eq
 80004b4:	f020 0001 	biceq.w	r0, r0, #1
 80004b8:	4770      	bx	lr
 80004ba:	f090 0f00 	teq	r0, #0
 80004be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004c2:	bf08      	it	eq
 80004c4:	0249      	lsleq	r1, r1, #9
 80004c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ce:	3a7f      	subs	r2, #127	; 0x7f
 80004d0:	bfc2      	ittt	gt
 80004d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004da:	4770      	bxgt	lr
 80004dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e0:	f04f 0300 	mov.w	r3, #0
 80004e4:	3a01      	subs	r2, #1
 80004e6:	dc5d      	bgt.n	80005a4 <__aeabi_fmul+0x150>
 80004e8:	f112 0f19 	cmn.w	r2, #25
 80004ec:	bfdc      	itt	le
 80004ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004f2:	4770      	bxle	lr
 80004f4:	f1c2 0200 	rsb	r2, r2, #0
 80004f8:	0041      	lsls	r1, r0, #1
 80004fa:	fa21 f102 	lsr.w	r1, r1, r2
 80004fe:	f1c2 0220 	rsb	r2, r2, #32
 8000502:	fa00 fc02 	lsl.w	ip, r0, r2
 8000506:	ea5f 0031 	movs.w	r0, r1, rrx
 800050a:	f140 0000 	adc.w	r0, r0, #0
 800050e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000512:	bf08      	it	eq
 8000514:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000518:	4770      	bx	lr
 800051a:	f092 0f00 	teq	r2, #0
 800051e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000522:	bf02      	ittt	eq
 8000524:	0040      	lsleq	r0, r0, #1
 8000526:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800052a:	3a01      	subeq	r2, #1
 800052c:	d0f9      	beq.n	8000522 <__aeabi_fmul+0xce>
 800052e:	ea40 000c 	orr.w	r0, r0, ip
 8000532:	f093 0f00 	teq	r3, #0
 8000536:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800053a:	bf02      	ittt	eq
 800053c:	0049      	lsleq	r1, r1, #1
 800053e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000542:	3b01      	subeq	r3, #1
 8000544:	d0f9      	beq.n	800053a <__aeabi_fmul+0xe6>
 8000546:	ea41 010c 	orr.w	r1, r1, ip
 800054a:	e78f      	b.n	800046c <__aeabi_fmul+0x18>
 800054c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000550:	ea92 0f0c 	teq	r2, ip
 8000554:	bf18      	it	ne
 8000556:	ea93 0f0c 	teqne	r3, ip
 800055a:	d00a      	beq.n	8000572 <__aeabi_fmul+0x11e>
 800055c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000560:	bf18      	it	ne
 8000562:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000566:	d1d8      	bne.n	800051a <__aeabi_fmul+0xc6>
 8000568:	ea80 0001 	eor.w	r0, r0, r1
 800056c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000570:	4770      	bx	lr
 8000572:	f090 0f00 	teq	r0, #0
 8000576:	bf17      	itett	ne
 8000578:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800057c:	4608      	moveq	r0, r1
 800057e:	f091 0f00 	teqne	r1, #0
 8000582:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000586:	d014      	beq.n	80005b2 <__aeabi_fmul+0x15e>
 8000588:	ea92 0f0c 	teq	r2, ip
 800058c:	d101      	bne.n	8000592 <__aeabi_fmul+0x13e>
 800058e:	0242      	lsls	r2, r0, #9
 8000590:	d10f      	bne.n	80005b2 <__aeabi_fmul+0x15e>
 8000592:	ea93 0f0c 	teq	r3, ip
 8000596:	d103      	bne.n	80005a0 <__aeabi_fmul+0x14c>
 8000598:	024b      	lsls	r3, r1, #9
 800059a:	bf18      	it	ne
 800059c:	4608      	movne	r0, r1
 800059e:	d108      	bne.n	80005b2 <__aeabi_fmul+0x15e>
 80005a0:	ea80 0001 	eor.w	r0, r0, r1
 80005a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b0:	4770      	bx	lr
 80005b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005ba:	4770      	bx	lr

080005bc <__aeabi_fdiv>:
 80005bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c4:	bf1e      	ittt	ne
 80005c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005ca:	ea92 0f0c 	teqne	r2, ip
 80005ce:	ea93 0f0c 	teqne	r3, ip
 80005d2:	d069      	beq.n	80006a8 <__aeabi_fdiv+0xec>
 80005d4:	eba2 0203 	sub.w	r2, r2, r3
 80005d8:	ea80 0c01 	eor.w	ip, r0, r1
 80005dc:	0249      	lsls	r1, r1, #9
 80005de:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005e2:	d037      	beq.n	8000654 <__aeabi_fdiv+0x98>
 80005e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005f4:	428b      	cmp	r3, r1
 80005f6:	bf38      	it	cc
 80005f8:	005b      	lslcc	r3, r3, #1
 80005fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000602:	428b      	cmp	r3, r1
 8000604:	bf24      	itt	cs
 8000606:	1a5b      	subcs	r3, r3, r1
 8000608:	ea40 000c 	orrcs.w	r0, r0, ip
 800060c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000610:	bf24      	itt	cs
 8000612:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000616:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800061a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061e:	bf24      	itt	cs
 8000620:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000624:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000628:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800062c:	bf24      	itt	cs
 800062e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000632:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000636:	011b      	lsls	r3, r3, #4
 8000638:	bf18      	it	ne
 800063a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063e:	d1e0      	bne.n	8000602 <__aeabi_fdiv+0x46>
 8000640:	2afd      	cmp	r2, #253	; 0xfd
 8000642:	f63f af50 	bhi.w	80004e6 <__aeabi_fmul+0x92>
 8000646:	428b      	cmp	r3, r1
 8000648:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800064c:	bf08      	it	eq
 800064e:	f020 0001 	biceq.w	r0, r0, #1
 8000652:	4770      	bx	lr
 8000654:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000658:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800065c:	327f      	adds	r2, #127	; 0x7f
 800065e:	bfc2      	ittt	gt
 8000660:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000664:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000668:	4770      	bxgt	lr
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	3a01      	subs	r2, #1
 8000674:	e737      	b.n	80004e6 <__aeabi_fmul+0x92>
 8000676:	f092 0f00 	teq	r2, #0
 800067a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800067e:	bf02      	ittt	eq
 8000680:	0040      	lsleq	r0, r0, #1
 8000682:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000686:	3a01      	subeq	r2, #1
 8000688:	d0f9      	beq.n	800067e <__aeabi_fdiv+0xc2>
 800068a:	ea40 000c 	orr.w	r0, r0, ip
 800068e:	f093 0f00 	teq	r3, #0
 8000692:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000696:	bf02      	ittt	eq
 8000698:	0049      	lsleq	r1, r1, #1
 800069a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800069e:	3b01      	subeq	r3, #1
 80006a0:	d0f9      	beq.n	8000696 <__aeabi_fdiv+0xda>
 80006a2:	ea41 010c 	orr.w	r1, r1, ip
 80006a6:	e795      	b.n	80005d4 <__aeabi_fdiv+0x18>
 80006a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006ac:	ea92 0f0c 	teq	r2, ip
 80006b0:	d108      	bne.n	80006c4 <__aeabi_fdiv+0x108>
 80006b2:	0242      	lsls	r2, r0, #9
 80006b4:	f47f af7d 	bne.w	80005b2 <__aeabi_fmul+0x15e>
 80006b8:	ea93 0f0c 	teq	r3, ip
 80006bc:	f47f af70 	bne.w	80005a0 <__aeabi_fmul+0x14c>
 80006c0:	4608      	mov	r0, r1
 80006c2:	e776      	b.n	80005b2 <__aeabi_fmul+0x15e>
 80006c4:	ea93 0f0c 	teq	r3, ip
 80006c8:	d104      	bne.n	80006d4 <__aeabi_fdiv+0x118>
 80006ca:	024b      	lsls	r3, r1, #9
 80006cc:	f43f af4c 	beq.w	8000568 <__aeabi_fmul+0x114>
 80006d0:	4608      	mov	r0, r1
 80006d2:	e76e      	b.n	80005b2 <__aeabi_fmul+0x15e>
 80006d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d8:	bf18      	it	ne
 80006da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006de:	d1ca      	bne.n	8000676 <__aeabi_fdiv+0xba>
 80006e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006e4:	f47f af5c 	bne.w	80005a0 <__aeabi_fmul+0x14c>
 80006e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006ec:	f47f af3c 	bne.w	8000568 <__aeabi_fmul+0x114>
 80006f0:	e75f      	b.n	80005b2 <__aeabi_fmul+0x15e>
 80006f2:	bf00      	nop

080006f4 <__gesf2>:
 80006f4:	f04f 3cff 	mov.w	ip, #4294967295
 80006f8:	e006      	b.n	8000708 <__cmpsf2+0x4>
 80006fa:	bf00      	nop

080006fc <__lesf2>:
 80006fc:	f04f 0c01 	mov.w	ip, #1
 8000700:	e002      	b.n	8000708 <__cmpsf2+0x4>
 8000702:	bf00      	nop

08000704 <__cmpsf2>:
 8000704:	f04f 0c01 	mov.w	ip, #1
 8000708:	f84d cd04 	str.w	ip, [sp, #-4]!
 800070c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000710:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000714:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000718:	bf18      	it	ne
 800071a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800071e:	d011      	beq.n	8000744 <__cmpsf2+0x40>
 8000720:	b001      	add	sp, #4
 8000722:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000726:	bf18      	it	ne
 8000728:	ea90 0f01 	teqne	r0, r1
 800072c:	bf58      	it	pl
 800072e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000732:	bf88      	it	hi
 8000734:	17c8      	asrhi	r0, r1, #31
 8000736:	bf38      	it	cc
 8000738:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800073c:	bf18      	it	ne
 800073e:	f040 0001 	orrne.w	r0, r0, #1
 8000742:	4770      	bx	lr
 8000744:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000748:	d102      	bne.n	8000750 <__cmpsf2+0x4c>
 800074a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800074e:	d105      	bne.n	800075c <__cmpsf2+0x58>
 8000750:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000754:	d1e4      	bne.n	8000720 <__cmpsf2+0x1c>
 8000756:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800075a:	d0e1      	beq.n	8000720 <__cmpsf2+0x1c>
 800075c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <__aeabi_cfrcmple>:
 8000764:	4684      	mov	ip, r0
 8000766:	4608      	mov	r0, r1
 8000768:	4661      	mov	r1, ip
 800076a:	e7ff      	b.n	800076c <__aeabi_cfcmpeq>

0800076c <__aeabi_cfcmpeq>:
 800076c:	b50f      	push	{r0, r1, r2, r3, lr}
 800076e:	f7ff ffc9 	bl	8000704 <__cmpsf2>
 8000772:	2800      	cmp	r0, #0
 8000774:	bf48      	it	mi
 8000776:	f110 0f00 	cmnmi.w	r0, #0
 800077a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800077c <__aeabi_fcmpeq>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff fff4 	bl	800076c <__aeabi_cfcmpeq>
 8000784:	bf0c      	ite	eq
 8000786:	2001      	moveq	r0, #1
 8000788:	2000      	movne	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmplt>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffea 	bl	800076c <__aeabi_cfcmpeq>
 8000798:	bf34      	ite	cc
 800079a:	2001      	movcc	r0, #1
 800079c:	2000      	movcs	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmple>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffe0 	bl	800076c <__aeabi_cfcmpeq>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpge>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffd2 	bl	8000764 <__aeabi_cfrcmple>
 80007c0:	bf94      	ite	ls
 80007c2:	2001      	movls	r0, #1
 80007c4:	2000      	movhi	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_fcmpgt>:
 80007cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007d0:	f7ff ffc8 	bl	8000764 <__aeabi_cfrcmple>
 80007d4:	bf34      	ite	cc
 80007d6:	2001      	movcc	r0, #1
 80007d8:	2000      	movcs	r0, #0
 80007da:	f85d fb08 	ldr.w	pc, [sp], #8
 80007de:	bf00      	nop

080007e0 <__aeabi_f2uiz>:
 80007e0:	0042      	lsls	r2, r0, #1
 80007e2:	d20e      	bcs.n	8000802 <__aeabi_f2uiz+0x22>
 80007e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007e8:	d30b      	bcc.n	8000802 <__aeabi_f2uiz+0x22>
 80007ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007f2:	d409      	bmi.n	8000808 <__aeabi_f2uiz+0x28>
 80007f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000800:	4770      	bx	lr
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	4770      	bx	lr
 8000808:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800080c:	d101      	bne.n	8000812 <__aeabi_f2uiz+0x32>
 800080e:	0242      	lsls	r2, r0, #9
 8000810:	d102      	bne.n	8000818 <__aeabi_f2uiz+0x38>
 8000812:	f04f 30ff 	mov.w	r0, #4294967295
 8000816:	4770      	bx	lr
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <selfrel_offset31>:
 8000820:	6803      	ldr	r3, [r0, #0]
 8000822:	005a      	lsls	r2, r3, #1
 8000824:	bf4c      	ite	mi
 8000826:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800082a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800082e:	4418      	add	r0, r3
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <search_EIT_table>:
 8000834:	b361      	cbz	r1, 8000890 <search_EIT_table+0x5c>
 8000836:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800083a:	f101 3aff 	add.w	sl, r1, #4294967295
 800083e:	4690      	mov	r8, r2
 8000840:	4606      	mov	r6, r0
 8000842:	46d1      	mov	r9, sl
 8000844:	2700      	movs	r7, #0
 8000846:	eb07 0409 	add.w	r4, r7, r9
 800084a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800084e:	1064      	asrs	r4, r4, #1
 8000850:	00e5      	lsls	r5, r4, #3
 8000852:	1971      	adds	r1, r6, r5
 8000854:	4608      	mov	r0, r1
 8000856:	f7ff ffe3 	bl	8000820 <selfrel_offset31>
 800085a:	45a2      	cmp	sl, r4
 800085c:	4683      	mov	fp, r0
 800085e:	f105 0008 	add.w	r0, r5, #8
 8000862:	4430      	add	r0, r6
 8000864:	d009      	beq.n	800087a <search_EIT_table+0x46>
 8000866:	f7ff ffdb 	bl	8000820 <selfrel_offset31>
 800086a:	45c3      	cmp	fp, r8
 800086c:	f100 30ff 	add.w	r0, r0, #4294967295
 8000870:	d805      	bhi.n	800087e <search_EIT_table+0x4a>
 8000872:	4540      	cmp	r0, r8
 8000874:	d209      	bcs.n	800088a <search_EIT_table+0x56>
 8000876:	1c67      	adds	r7, r4, #1
 8000878:	e7e5      	b.n	8000846 <search_EIT_table+0x12>
 800087a:	45c3      	cmp	fp, r8
 800087c:	d905      	bls.n	800088a <search_EIT_table+0x56>
 800087e:	42a7      	cmp	r7, r4
 8000880:	d002      	beq.n	8000888 <search_EIT_table+0x54>
 8000882:	f104 39ff 	add.w	r9, r4, #4294967295
 8000886:	e7de      	b.n	8000846 <search_EIT_table+0x12>
 8000888:	2100      	movs	r1, #0
 800088a:	4608      	mov	r0, r1
 800088c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000890:	4608      	mov	r0, r1
 8000892:	4770      	bx	lr

08000894 <__gnu_unwind_get_pr_addr>:
 8000894:	2801      	cmp	r0, #1
 8000896:	d007      	beq.n	80008a8 <__gnu_unwind_get_pr_addr+0x14>
 8000898:	2802      	cmp	r0, #2
 800089a:	d007      	beq.n	80008ac <__gnu_unwind_get_pr_addr+0x18>
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__gnu_unwind_get_pr_addr+0x1c>)
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf0c      	ite	eq
 80008a2:	4618      	moveq	r0, r3
 80008a4:	2000      	movne	r0, #0
 80008a6:	4770      	bx	lr
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <__gnu_unwind_get_pr_addr+0x20>)
 80008aa:	4770      	bx	lr
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <__gnu_unwind_get_pr_addr+0x24>)
 80008ae:	4770      	bx	lr
 80008b0:	08000fa5 	.word	0x08000fa5
 80008b4:	08000fa9 	.word	0x08000fa9
 80008b8:	08000fad 	.word	0x08000fad

080008bc <get_eit_entry>:
 80008bc:	b530      	push	{r4, r5, lr}
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <get_eit_entry+0x98>)
 80008c0:	b083      	sub	sp, #12
 80008c2:	4604      	mov	r4, r0
 80008c4:	1e8d      	subs	r5, r1, #2
 80008c6:	b373      	cbz	r3, 8000926 <get_eit_entry+0x6a>
 80008c8:	a901      	add	r1, sp, #4
 80008ca:	4628      	mov	r0, r5
 80008cc:	f3af 8000 	nop.w
 80008d0:	b318      	cbz	r0, 800091a <get_eit_entry+0x5e>
 80008d2:	9901      	ldr	r1, [sp, #4]
 80008d4:	462a      	mov	r2, r5
 80008d6:	f7ff ffad 	bl	8000834 <search_EIT_table>
 80008da:	4601      	mov	r1, r0
 80008dc:	b1e8      	cbz	r0, 800091a <get_eit_entry+0x5e>
 80008de:	f7ff ff9f 	bl	8000820 <selfrel_offset31>
 80008e2:	684b      	ldr	r3, [r1, #4]
 80008e4:	64a0      	str	r0, [r4, #72]	; 0x48
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d011      	beq.n	800090e <get_eit_entry+0x52>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db22      	blt.n	8000934 <get_eit_entry+0x78>
 80008ee:	1d08      	adds	r0, r1, #4
 80008f0:	f7ff ff96 	bl	8000820 <selfrel_offset31>
 80008f4:	2300      	movs	r3, #0
 80008f6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80008f8:	6523      	str	r3, [r4, #80]	; 0x50
 80008fa:	6803      	ldr	r3, [r0, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db1e      	blt.n	800093e <get_eit_entry+0x82>
 8000900:	f7ff ff8e 	bl	8000820 <selfrel_offset31>
 8000904:	2300      	movs	r3, #0
 8000906:	6120      	str	r0, [r4, #16]
 8000908:	4618      	mov	r0, r3
 800090a:	b003      	add	sp, #12
 800090c:	bd30      	pop	{r4, r5, pc}
 800090e:	2305      	movs	r3, #5
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	6122      	str	r2, [r4, #16]
 8000916:	b003      	add	sp, #12
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	2309      	movs	r3, #9
 800091c:	2200      	movs	r2, #0
 800091e:	4618      	mov	r0, r3
 8000920:	6122      	str	r2, [r4, #16]
 8000922:	b003      	add	sp, #12
 8000924:	bd30      	pop	{r4, r5, pc}
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <get_eit_entry+0x9c>)
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <get_eit_entry+0xa0>)
 800092a:	4618      	mov	r0, r3
 800092c:	1ac9      	subs	r1, r1, r3
 800092e:	10c9      	asrs	r1, r1, #3
 8000930:	9101      	str	r1, [sp, #4]
 8000932:	e7cf      	b.n	80008d4 <get_eit_entry+0x18>
 8000934:	2301      	movs	r3, #1
 8000936:	1d08      	adds	r0, r1, #4
 8000938:	64e0      	str	r0, [r4, #76]	; 0x4c
 800093a:	6523      	str	r3, [r4, #80]	; 0x50
 800093c:	e7dd      	b.n	80008fa <get_eit_entry+0x3e>
 800093e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000942:	f7ff ffa7 	bl	8000894 <__gnu_unwind_get_pr_addr>
 8000946:	2800      	cmp	r0, #0
 8000948:	6120      	str	r0, [r4, #16]
 800094a:	bf14      	ite	ne
 800094c:	2300      	movne	r3, #0
 800094e:	2309      	moveq	r3, #9
 8000950:	e7da      	b.n	8000908 <get_eit_entry+0x4c>
 8000952:	bf00      	nop
 8000954:	00000000 	.word	0x00000000
 8000958:	08005aa8 	.word	0x08005aa8
 800095c:	08005c80 	.word	0x08005c80

08000960 <restore_non_core_regs>:
 8000960:	6803      	ldr	r3, [r0, #0]
 8000962:	b510      	push	{r4, lr}
 8000964:	07da      	lsls	r2, r3, #31
 8000966:	4604      	mov	r4, r0
 8000968:	d406      	bmi.n	8000978 <restore_non_core_regs+0x18>
 800096a:	079b      	lsls	r3, r3, #30
 800096c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000970:	d509      	bpl.n	8000986 <restore_non_core_regs+0x26>
 8000972:	f000 fc57 	bl	8001224 <__gnu_Unwind_Restore_VFP_D>
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	0759      	lsls	r1, r3, #29
 800097a:	d509      	bpl.n	8000990 <restore_non_core_regs+0x30>
 800097c:	071a      	lsls	r2, r3, #28
 800097e:	d50e      	bpl.n	800099e <restore_non_core_regs+0x3e>
 8000980:	06db      	lsls	r3, r3, #27
 8000982:	d513      	bpl.n	80009ac <restore_non_core_regs+0x4c>
 8000984:	bd10      	pop	{r4, pc}
 8000986:	f000 fc45 	bl	8001214 <__gnu_Unwind_Restore_VFP>
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	0759      	lsls	r1, r3, #29
 800098e:	d4f5      	bmi.n	800097c <restore_non_core_regs+0x1c>
 8000990:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000994:	f000 fc4e 	bl	8001234 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	071a      	lsls	r2, r3, #28
 800099c:	d4f0      	bmi.n	8000980 <restore_non_core_regs+0x20>
 800099e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80009a2:	f000 fc4f 	bl	8001244 <__gnu_Unwind_Restore_WMMXD>
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	06db      	lsls	r3, r3, #27
 80009aa:	d4eb      	bmi.n	8000984 <restore_non_core_regs+0x24>
 80009ac:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80009b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009b4:	f000 bc8a 	b.w	80012cc <__gnu_Unwind_Restore_WMMXC>

080009b8 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80009b8:	6803      	ldr	r3, [r0, #0]
 80009ba:	b103      	cbz	r3, 80009be <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80009bc:	4403      	add	r3, r0
 80009be:	4618      	mov	r0, r3
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__gnu_unwind_24bit.isra.1>:
 80009c4:	2009      	movs	r0, #9
 80009c6:	4770      	bx	lr

080009c8 <_Unwind_DebugHook>:
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <unwind_phase2>:
 80009cc:	b570      	push	{r4, r5, r6, lr}
 80009ce:	4604      	mov	r4, r0
 80009d0:	460d      	mov	r5, r1
 80009d2:	e008      	b.n	80009e6 <unwind_phase2+0x1a>
 80009d4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80009d6:	6923      	ldr	r3, [r4, #16]
 80009d8:	6162      	str	r2, [r4, #20]
 80009da:	4621      	mov	r1, r4
 80009dc:	462a      	mov	r2, r5
 80009de:	2001      	movs	r0, #1
 80009e0:	4798      	blx	r3
 80009e2:	2808      	cmp	r0, #8
 80009e4:	d108      	bne.n	80009f8 <unwind_phase2+0x2c>
 80009e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80009e8:	4620      	mov	r0, r4
 80009ea:	f7ff ff67 	bl	80008bc <get_eit_entry>
 80009ee:	4606      	mov	r6, r0
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d0ef      	beq.n	80009d4 <unwind_phase2+0x8>
 80009f4:	f004 fd4c 	bl	8005490 <abort>
 80009f8:	2807      	cmp	r0, #7
 80009fa:	d1fb      	bne.n	80009f4 <unwind_phase2+0x28>
 80009fc:	4630      	mov	r0, r6
 80009fe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a00:	f7ff ffe2 	bl	80009c8 <_Unwind_DebugHook>
 8000a04:	1d28      	adds	r0, r5, #4
 8000a06:	f000 fbf9 	bl	80011fc <__restore_core_regs>
 8000a0a:	bf00      	nop

08000a0c <unwind_phase2_forced>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	4605      	mov	r5, r0
 8000a12:	2700      	movs	r7, #0
 8000a14:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000a18:	ac03      	add	r4, sp, #12
 8000a1a:	1d0e      	adds	r6, r1, #4
 8000a1c:	4692      	mov	sl, r2
 8000a1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a2e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000a32:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000a36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a3a:	ac02      	add	r4, sp, #8
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000a40:	6027      	str	r7, [r4, #0]
 8000a42:	f7ff ff3b 	bl	80008bc <get_eit_entry>
 8000a46:	f1ba 0f00 	cmp.w	sl, #0
 8000a4a:	4607      	mov	r7, r0
 8000a4c:	bf14      	ite	ne
 8000a4e:	260a      	movne	r6, #10
 8000a50:	2609      	moveq	r6, #9
 8000a52:	b17f      	cbz	r7, 8000a74 <unwind_phase2_forced+0x68>
 8000a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a56:	f046 0110 	orr.w	r1, r6, #16
 8000a5a:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000a5e:	462a      	mov	r2, r5
 8000a60:	6463      	str	r3, [r4, #68]	; 0x44
 8000a62:	2001      	movs	r0, #1
 8000a64:	462b      	mov	r3, r5
 8000a66:	47c0      	blx	r8
 8000a68:	bb78      	cbnz	r0, 8000aca <unwind_phase2_forced+0xbe>
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a7a:	616b      	str	r3, [r5, #20]
 8000a7c:	4621      	mov	r1, r4
 8000a7e:	a87a      	add	r0, sp, #488	; 0x1e8
 8000a80:	f004 fe74 	bl	800576c <memcpy>
 8000a84:	692b      	ldr	r3, [r5, #16]
 8000a86:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000a88:	4629      	mov	r1, r5
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	4798      	blx	r3
 8000a8e:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000a90:	4682      	mov	sl, r0
 8000a92:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000a96:	4631      	mov	r1, r6
 8000a98:	6463      	str	r3, [r4, #68]	; 0x44
 8000a9a:	462a      	mov	r2, r5
 8000a9c:	462b      	mov	r3, r5
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	47c0      	blx	r8
 8000aa2:	b990      	cbnz	r0, 8000aca <unwind_phase2_forced+0xbe>
 8000aa4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000aa8:	a97a      	add	r1, sp, #488	; 0x1e8
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f004 fe5e 	bl	800576c <memcpy>
 8000ab0:	f1ba 0f08 	cmp.w	sl, #8
 8000ab4:	d106      	bne.n	8000ac4 <unwind_phase2_forced+0xb8>
 8000ab6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000ab8:	4628      	mov	r0, r5
 8000aba:	f7ff feff 	bl	80008bc <get_eit_entry>
 8000abe:	2609      	movs	r6, #9
 8000ac0:	4607      	mov	r7, r0
 8000ac2:	e7c6      	b.n	8000a52 <unwind_phase2_forced+0x46>
 8000ac4:	f1ba 0f07 	cmp.w	sl, #7
 8000ac8:	d005      	beq.n	8000ad6 <unwind_phase2_forced+0xca>
 8000aca:	2709      	movs	r7, #9
 8000acc:	4638      	mov	r0, r7
 8000ace:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	4638      	mov	r0, r7
 8000ad8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000ada:	f7ff ff75 	bl	80009c8 <_Unwind_DebugHook>
 8000ade:	a803      	add	r0, sp, #12
 8000ae0:	f000 fb8c 	bl	80011fc <__restore_core_regs>

08000ae4 <_Unwind_GetCFA>:
 8000ae4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000ae6:	4770      	bx	lr

08000ae8 <__gnu_Unwind_RaiseException>:
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	f04f 3eff 	mov.w	lr, #4294967295
 8000aee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000af0:	b0f9      	sub	sp, #484	; 0x1e4
 8000af2:	640b      	str	r3, [r1, #64]	; 0x40
 8000af4:	1d0e      	adds	r6, r1, #4
 8000af6:	ad01      	add	r5, sp, #4
 8000af8:	460f      	mov	r7, r1
 8000afa:	4604      	mov	r4, r0
 8000afc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b10:	f8cd e000 	str.w	lr, [sp]
 8000b14:	e006      	b.n	8000b24 <__gnu_Unwind_RaiseException+0x3c>
 8000b16:	6923      	ldr	r3, [r4, #16]
 8000b18:	466a      	mov	r2, sp
 8000b1a:	4621      	mov	r1, r4
 8000b1c:	4798      	blx	r3
 8000b1e:	2808      	cmp	r0, #8
 8000b20:	4605      	mov	r5, r0
 8000b22:	d108      	bne.n	8000b36 <__gnu_Unwind_RaiseException+0x4e>
 8000b24:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000b26:	4620      	mov	r0, r4
 8000b28:	f7ff fec8 	bl	80008bc <get_eit_entry>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d0f2      	beq.n	8000b16 <__gnu_Unwind_RaiseException+0x2e>
 8000b30:	2009      	movs	r0, #9
 8000b32:	b079      	add	sp, #484	; 0x1e4
 8000b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b36:	4668      	mov	r0, sp
 8000b38:	f7ff ff12 	bl	8000960 <restore_non_core_regs>
 8000b3c:	2d06      	cmp	r5, #6
 8000b3e:	d1f7      	bne.n	8000b30 <__gnu_Unwind_RaiseException+0x48>
 8000b40:	4639      	mov	r1, r7
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff ff42 	bl	80009cc <unwind_phase2>

08000b48 <__gnu_Unwind_ForcedUnwind>:
 8000b48:	b430      	push	{r4, r5}
 8000b4a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000b4c:	60c1      	str	r1, [r0, #12]
 8000b4e:	6182      	str	r2, [r0, #24]
 8000b50:	4619      	mov	r1, r3
 8000b52:	641d      	str	r5, [r3, #64]	; 0x40
 8000b54:	2200      	movs	r2, #0
 8000b56:	bc30      	pop	{r4, r5}
 8000b58:	e758      	b.n	8000a0c <unwind_phase2_forced>
 8000b5a:	bf00      	nop

08000b5c <__gnu_Unwind_Resume>:
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	6943      	ldr	r3, [r0, #20]
 8000b60:	68c6      	ldr	r6, [r0, #12]
 8000b62:	640b      	str	r3, [r1, #64]	; 0x40
 8000b64:	b126      	cbz	r6, 8000b70 <__gnu_Unwind_Resume+0x14>
 8000b66:	2201      	movs	r2, #1
 8000b68:	f7ff ff50 	bl	8000a0c <unwind_phase2_forced>
 8000b6c:	f004 fc90 	bl	8005490 <abort>
 8000b70:	6903      	ldr	r3, [r0, #16]
 8000b72:	460a      	mov	r2, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	460d      	mov	r5, r1
 8000b78:	4601      	mov	r1, r0
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	4798      	blx	r3
 8000b7e:	2807      	cmp	r0, #7
 8000b80:	d007      	beq.n	8000b92 <__gnu_Unwind_Resume+0x36>
 8000b82:	2808      	cmp	r0, #8
 8000b84:	d103      	bne.n	8000b8e <__gnu_Unwind_Resume+0x32>
 8000b86:	4629      	mov	r1, r5
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f7ff ff1f 	bl	80009cc <unwind_phase2>
 8000b8e:	f004 fc7f 	bl	8005490 <abort>
 8000b92:	4630      	mov	r0, r6
 8000b94:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b96:	f7ff ff17 	bl	80009c8 <_Unwind_DebugHook>
 8000b9a:	1d28      	adds	r0, r5, #4
 8000b9c:	f000 fb2e 	bl	80011fc <__restore_core_regs>

08000ba0 <__gnu_Unwind_Resume_or_Rethrow>:
 8000ba0:	68c2      	ldr	r2, [r0, #12]
 8000ba2:	b12a      	cbz	r2, 8000bb0 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000ba4:	b410      	push	{r4}
 8000ba6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000ba8:	2200      	movs	r2, #0
 8000baa:	640c      	str	r4, [r1, #64]	; 0x40
 8000bac:	bc10      	pop	{r4}
 8000bae:	e72d      	b.n	8000a0c <unwind_phase2_forced>
 8000bb0:	e79a      	b.n	8000ae8 <__gnu_Unwind_RaiseException>
 8000bb2:	bf00      	nop

08000bb4 <_Unwind_Complete>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <_Unwind_DeleteException>:
 8000bb8:	6883      	ldr	r3, [r0, #8]
 8000bba:	b113      	cbz	r3, 8000bc2 <_Unwind_DeleteException+0xa>
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	4718      	bx	r3
 8000bc2:	4770      	bx	lr

08000bc4 <_Unwind_VRS_Get>:
 8000bc4:	b500      	push	{lr}
 8000bc6:	2904      	cmp	r1, #4
 8000bc8:	d807      	bhi.n	8000bda <_Unwind_VRS_Get+0x16>
 8000bca:	e8df f001 	tbb	[pc, r1]
 8000bce:	0903      	.short	0x0903
 8000bd0:	0906      	.short	0x0906
 8000bd2:	09          	.byte	0x09
 8000bd3:	00          	.byte	0x00
 8000bd4:	b90b      	cbnz	r3, 8000bda <_Unwind_VRS_Get+0x16>
 8000bd6:	2a0f      	cmp	r2, #15
 8000bd8:	d905      	bls.n	8000be6 <_Unwind_VRS_Get+0x22>
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000be0:	2001      	movs	r0, #1
 8000be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000be6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000bea:	6852      	ldr	r2, [r2, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bf6:	bf00      	nop

08000bf8 <_Unwind_GetGR>:
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	b510      	push	{r4, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	ac03      	add	r4, sp, #12
 8000c00:	460a      	mov	r2, r1
 8000c02:	9400      	str	r4, [sp, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f7ff ffdd 	bl	8000bc4 <_Unwind_VRS_Get>
 8000c0a:	9803      	ldr	r0, [sp, #12]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	bd10      	pop	{r4, pc}

08000c10 <_Unwind_VRS_Set>:
 8000c10:	b500      	push	{lr}
 8000c12:	2904      	cmp	r1, #4
 8000c14:	d807      	bhi.n	8000c26 <_Unwind_VRS_Set+0x16>
 8000c16:	e8df f001 	tbb	[pc, r1]
 8000c1a:	0903      	.short	0x0903
 8000c1c:	0906      	.short	0x0906
 8000c1e:	09          	.byte	0x09
 8000c1f:	00          	.byte	0x00
 8000c20:	b90b      	cbnz	r3, 8000c26 <_Unwind_VRS_Set+0x16>
 8000c22:	2a0f      	cmp	r2, #15
 8000c24:	d905      	bls.n	8000c32 <_Unwind_VRS_Set+0x22>
 8000c26:	2002      	movs	r0, #2
 8000c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c32:	9901      	ldr	r1, [sp, #4]
 8000c34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000c38:	6809      	ldr	r1, [r1, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	6051      	str	r1, [r2, #4]
 8000c3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c42:	bf00      	nop

08000c44 <_Unwind_SetGR>:
 8000c44:	2300      	movs	r3, #0
 8000c46:	b510      	push	{r4, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	ac04      	add	r4, sp, #16
 8000c4c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000c50:	9400      	str	r4, [sp, #0]
 8000c52:	460a      	mov	r2, r1
 8000c54:	4619      	mov	r1, r3
 8000c56:	f7ff ffdb 	bl	8000c10 <_Unwind_VRS_Set>
 8000c5a:	b004      	add	sp, #16
 8000c5c:	bd10      	pop	{r4, pc}
 8000c5e:	bf00      	nop

08000c60 <__gnu_Unwind_Backtrace>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	f04f 3eff 	mov.w	lr, #4294967295
 8000c66:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000c68:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	1d15      	adds	r5, r2, #4
 8000c70:	ac17      	add	r4, sp, #92	; 0x5c
 8000c72:	4607      	mov	r7, r0
 8000c74:	460e      	mov	r6, r1
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c8a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8000c8e:	e012      	b.n	8000cb6 <__gnu_Unwind_Backtrace+0x56>
 8000c90:	210c      	movs	r1, #12
 8000c92:	a816      	add	r0, sp, #88	; 0x58
 8000c94:	466a      	mov	r2, sp
 8000c96:	f7ff ffd5 	bl	8000c44 <_Unwind_SetGR>
 8000c9a:	4631      	mov	r1, r6
 8000c9c:	a816      	add	r0, sp, #88	; 0x58
 8000c9e:	47b8      	blx	r7
 8000ca0:	b978      	cbnz	r0, 8000cc2 <__gnu_Unwind_Backtrace+0x62>
 8000ca2:	9b04      	ldr	r3, [sp, #16]
 8000ca4:	aa16      	add	r2, sp, #88	; 0x58
 8000ca6:	4669      	mov	r1, sp
 8000ca8:	2008      	movs	r0, #8
 8000caa:	4798      	blx	r3
 8000cac:	2805      	cmp	r0, #5
 8000cae:	4604      	mov	r4, r0
 8000cb0:	d008      	beq.n	8000cc4 <__gnu_Unwind_Backtrace+0x64>
 8000cb2:	2809      	cmp	r0, #9
 8000cb4:	d005      	beq.n	8000cc2 <__gnu_Unwind_Backtrace+0x62>
 8000cb6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000cb8:	4668      	mov	r0, sp
 8000cba:	f7ff fdff 	bl	80008bc <get_eit_entry>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d0e6      	beq.n	8000c90 <__gnu_Unwind_Backtrace+0x30>
 8000cc2:	2409      	movs	r4, #9
 8000cc4:	a816      	add	r0, sp, #88	; 0x58
 8000cc6:	f7ff fe4b 	bl	8000960 <restore_non_core_regs>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd2:	bf00      	nop

08000cd4 <__gnu_unwind_pr_common>:
 8000cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000cda:	4691      	mov	r9, r2
 8000cdc:	6822      	ldr	r2, [r4, #0]
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	3404      	adds	r4, #4
 8000ce2:	460d      	mov	r5, r1
 8000ce4:	9207      	str	r2, [sp, #28]
 8000ce6:	9408      	str	r4, [sp, #32]
 8000ce8:	f000 0b03 	and.w	fp, r0, #3
 8000cec:	461e      	mov	r6, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d160      	bne.n	8000db4 <__gnu_unwind_pr_common+0xe0>
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	0212      	lsls	r2, r2, #8
 8000cf6:	9207      	str	r2, [sp, #28]
 8000cf8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000cfc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000d00:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000d02:	f1bb 0f02 	cmp.w	fp, #2
 8000d06:	bf08      	it	eq
 8000d08:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000d0a:	f013 0301 	ands.w	r3, r3, #1
 8000d0e:	d140      	bne.n	8000d92 <__gnu_unwind_pr_common+0xbe>
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	f000 0308 	and.w	r3, r0, #8
 8000d16:	9303      	str	r3, [sp, #12]
 8000d18:	f8d4 8000 	ldr.w	r8, [r4]
 8000d1c:	f1b8 0f00 	cmp.w	r8, #0
 8000d20:	d039      	beq.n	8000d96 <__gnu_unwind_pr_common+0xc2>
 8000d22:	2e02      	cmp	r6, #2
 8000d24:	d043      	beq.n	8000dae <__gnu_unwind_pr_common+0xda>
 8000d26:	f8b4 8000 	ldrh.w	r8, [r4]
 8000d2a:	8867      	ldrh	r7, [r4, #2]
 8000d2c:	3404      	adds	r4, #4
 8000d2e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000d30:	f027 0a01 	bic.w	sl, r7, #1
 8000d34:	210f      	movs	r1, #15
 8000d36:	4648      	mov	r0, r9
 8000d38:	449a      	add	sl, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <_Unwind_GetGR>
 8000d3e:	4582      	cmp	sl, r0
 8000d40:	d833      	bhi.n	8000daa <__gnu_unwind_pr_common+0xd6>
 8000d42:	f028 0301 	bic.w	r3, r8, #1
 8000d46:	449a      	add	sl, r3
 8000d48:	4550      	cmp	r0, sl
 8000d4a:	bf2c      	ite	cs
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	2001      	movcc	r0, #1
 8000d50:	007f      	lsls	r7, r7, #1
 8000d52:	f007 0702 	and.w	r7, r7, #2
 8000d56:	f008 0801 	and.w	r8, r8, #1
 8000d5a:	ea47 0708 	orr.w	r7, r7, r8
 8000d5e:	2f01      	cmp	r7, #1
 8000d60:	d03e      	beq.n	8000de0 <__gnu_unwind_pr_common+0x10c>
 8000d62:	d335      	bcc.n	8000dd0 <__gnu_unwind_pr_common+0xfc>
 8000d64:	2f02      	cmp	r7, #2
 8000d66:	d11c      	bne.n	8000da2 <__gnu_unwind_pr_common+0xce>
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d6e:	9202      	str	r2, [sp, #8]
 8000d70:	f1bb 0f00 	cmp.w	fp, #0
 8000d74:	d176      	bne.n	8000e64 <__gnu_unwind_pr_common+0x190>
 8000d76:	b128      	cbz	r0, 8000d84 <__gnu_unwind_pr_common+0xb0>
 8000d78:	9903      	ldr	r1, [sp, #12]
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d07e      	beq.n	8000e7c <__gnu_unwind_pr_common+0x1a8>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	f000 80a6 	beq.w	8000ed0 <__gnu_unwind_pr_common+0x1fc>
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db77      	blt.n	8000e78 <__gnu_unwind_pr_common+0x1a4>
 8000d88:	9b02      	ldr	r3, [sp, #8]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000d90:	e7c2      	b.n	8000d18 <__gnu_unwind_pr_common+0x44>
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2e02      	cmp	r6, #2
 8000d98:	dd3e      	ble.n	8000e18 <__gnu_unwind_pr_common+0x144>
 8000d9a:	f7ff fe13 	bl	80009c4 <__gnu_unwind_24bit.isra.1>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d040      	beq.n	8000e24 <__gnu_unwind_pr_common+0x150>
 8000da2:	2009      	movs	r0, #9
 8000da4:	b00b      	add	sp, #44	; 0x2c
 8000da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000daa:	2000      	movs	r0, #0
 8000dac:	e7d0      	b.n	8000d50 <__gnu_unwind_pr_common+0x7c>
 8000dae:	6867      	ldr	r7, [r4, #4]
 8000db0:	3408      	adds	r4, #8
 8000db2:	e7bc      	b.n	8000d2e <__gnu_unwind_pr_common+0x5a>
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	dca3      	bgt.n	8000d00 <__gnu_unwind_pr_common+0x2c>
 8000db8:	2102      	movs	r1, #2
 8000dba:	0c13      	lsrs	r3, r2, #16
 8000dbc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000dc0:	0412      	lsls	r2, r2, #16
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000dc8:	9207      	str	r2, [sp, #28]
 8000dca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8000dce:	e797      	b.n	8000d00 <__gnu_unwind_pr_common+0x2c>
 8000dd0:	f1bb 0f00 	cmp.w	fp, #0
 8000dd4:	d002      	beq.n	8000ddc <__gnu_unwind_pr_common+0x108>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	f040 80bd 	bne.w	8000f56 <__gnu_unwind_pr_common+0x282>
 8000ddc:	3404      	adds	r4, #4
 8000dde:	e79b      	b.n	8000d18 <__gnu_unwind_pr_common+0x44>
 8000de0:	f1bb 0f00 	cmp.w	fp, #0
 8000de4:	d125      	bne.n	8000e32 <__gnu_unwind_pr_common+0x15e>
 8000de6:	b1a8      	cbz	r0, 8000e14 <__gnu_unwind_pr_common+0x140>
 8000de8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000dec:	1c99      	adds	r1, r3, #2
 8000dee:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000df2:	d0d6      	beq.n	8000da2 <__gnu_unwind_pr_common+0xce>
 8000df4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000df8:	3301      	adds	r3, #1
 8000dfa:	9106      	str	r1, [sp, #24]
 8000dfc:	f000 80a3 	beq.w	8000f46 <__gnu_unwind_pr_common+0x272>
 8000e00:	1d20      	adds	r0, r4, #4
 8000e02:	f7ff fdd9 	bl	80009b8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000e06:	ab06      	add	r3, sp, #24
 8000e08:	4601      	mov	r1, r0
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	f003 fe44 	bl	8004a98 <__cxa_type_match>
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d177      	bne.n	8000f04 <__gnu_unwind_pr_common+0x230>
 8000e14:	3408      	adds	r4, #8
 8000e16:	e77f      	b.n	8000d18 <__gnu_unwind_pr_common+0x44>
 8000e18:	a907      	add	r1, sp, #28
 8000e1a:	4648      	mov	r0, r9
 8000e1c:	f000 faf0 	bl	8001400 <__gnu_unwind_execute>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d1be      	bne.n	8000da2 <__gnu_unwind_pr_common+0xce>
 8000e24:	9b01      	ldr	r3, [sp, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d15c      	bne.n	8000ee4 <__gnu_unwind_pr_common+0x210>
 8000e2a:	2008      	movs	r0, #8
 8000e2c:	b00b      	add	sp, #44	; 0x2c
 8000e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e32:	210d      	movs	r1, #13
 8000e34:	4648      	mov	r0, r9
 8000e36:	6a2f      	ldr	r7, [r5, #32]
 8000e38:	f7ff fede 	bl	8000bf8 <_Unwind_GetGR>
 8000e3c:	4287      	cmp	r7, r0
 8000e3e:	d1e9      	bne.n	8000e14 <__gnu_unwind_pr_common+0x140>
 8000e40:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e42:	429c      	cmp	r4, r3
 8000e44:	d1e6      	bne.n	8000e14 <__gnu_unwind_pr_common+0x140>
 8000e46:	4620      	mov	r0, r4
 8000e48:	f7ff fcea 	bl	8000820 <selfrel_offset31>
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4648      	mov	r0, r9
 8000e52:	f7ff fef7 	bl	8000c44 <_Unwind_SetGR>
 8000e56:	4648      	mov	r0, r9
 8000e58:	462a      	mov	r2, r5
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f7ff fef2 	bl	8000c44 <_Unwind_SetGR>
 8000e60:	2007      	movs	r0, #7
 8000e62:	e79f      	b.n	8000da4 <__gnu_unwind_pr_common+0xd0>
 8000e64:	210d      	movs	r1, #13
 8000e66:	4648      	mov	r0, r9
 8000e68:	6a2f      	ldr	r7, [r5, #32]
 8000e6a:	f7ff fec5 	bl	8000bf8 <_Unwind_GetGR>
 8000e6e:	4287      	cmp	r7, r0
 8000e70:	d058      	beq.n	8000f24 <__gnu_unwind_pr_common+0x250>
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da87      	bge.n	8000d88 <__gnu_unwind_pr_common+0xb4>
 8000e78:	3404      	adds	r4, #4
 8000e7a:	e785      	b.n	8000d88 <__gnu_unwind_pr_common+0xb4>
 8000e7c:	9b02      	ldr	r3, [sp, #8]
 8000e7e:	b33b      	cbz	r3, 8000ed0 <__gnu_unwind_pr_common+0x1fc>
 8000e80:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000e84:	1d27      	adds	r7, r4, #4
 8000e86:	f8cd b010 	str.w	fp, [sp, #16]
 8000e8a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000e8e:	46a3      	mov	fp, r4
 8000e90:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000e94:	461c      	mov	r4, r3
 8000e96:	9605      	str	r6, [sp, #20]
 8000e98:	e002      	b.n	8000ea0 <__gnu_unwind_pr_common+0x1cc>
 8000e9a:	45b2      	cmp	sl, r6
 8000e9c:	46b0      	mov	r8, r6
 8000e9e:	d016      	beq.n	8000ece <__gnu_unwind_pr_common+0x1fa>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	9406      	str	r4, [sp, #24]
 8000ea4:	f7ff fd88 	bl	80009b8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ea8:	ab06      	add	r3, sp, #24
 8000eaa:	4601      	mov	r1, r0
 8000eac:	2200      	movs	r2, #0
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f003 fdf2 	bl	8004a98 <__cxa_type_match>
 8000eb4:	f108 0601 	add.w	r6, r8, #1
 8000eb8:	3704      	adds	r7, #4
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d0ed      	beq.n	8000e9a <__gnu_unwind_pr_common+0x1c6>
 8000ebe:	9b02      	ldr	r3, [sp, #8]
 8000ec0:	465c      	mov	r4, fp
 8000ec2:	4543      	cmp	r3, r8
 8000ec4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000ec8:	9e05      	ldr	r6, [sp, #20]
 8000eca:	d1d2      	bne.n	8000e72 <__gnu_unwind_pr_common+0x19e>
 8000ecc:	e000      	b.n	8000ed0 <__gnu_unwind_pr_common+0x1fc>
 8000ece:	465c      	mov	r4, fp
 8000ed0:	4648      	mov	r0, r9
 8000ed2:	210d      	movs	r1, #13
 8000ed4:	f7ff fe90 	bl	8000bf8 <_Unwind_GetGR>
 8000ed8:	9b06      	ldr	r3, [sp, #24]
 8000eda:	6228      	str	r0, [r5, #32]
 8000edc:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ede:	626b      	str	r3, [r5, #36]	; 0x24
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	e75f      	b.n	8000da4 <__gnu_unwind_pr_common+0xd0>
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	4648      	mov	r0, r9
 8000ee8:	f7ff fe86 	bl	8000bf8 <_Unwind_GetGR>
 8000eec:	210e      	movs	r1, #14
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4648      	mov	r0, r9
 8000ef2:	f7ff fea7 	bl	8000c44 <_Unwind_SetGR>
 8000ef6:	4648      	mov	r0, r9
 8000ef8:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <__gnu_unwind_pr_common+0x2cc>)
 8000efa:	210f      	movs	r1, #15
 8000efc:	f7ff fea2 	bl	8000c44 <_Unwind_SetGR>
 8000f00:	2007      	movs	r0, #7
 8000f02:	e74f      	b.n	8000da4 <__gnu_unwind_pr_common+0xd0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	210d      	movs	r1, #13
 8000f08:	4648      	mov	r0, r9
 8000f0a:	f7ff fe75 	bl	8000bf8 <_Unwind_GetGR>
 8000f0e:	2f02      	cmp	r7, #2
 8000f10:	6228      	str	r0, [r5, #32]
 8000f12:	d11d      	bne.n	8000f50 <__gnu_unwind_pr_common+0x27c>
 8000f14:	462b      	mov	r3, r5
 8000f16:	9a06      	ldr	r2, [sp, #24]
 8000f18:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000f1c:	626b      	str	r3, [r5, #36]	; 0x24
 8000f1e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000f20:	2006      	movs	r0, #6
 8000f22:	e73f      	b.n	8000da4 <__gnu_unwind_pr_common+0xd0>
 8000f24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f26:	429c      	cmp	r4, r3
 8000f28:	d1a3      	bne.n	8000e72 <__gnu_unwind_pr_common+0x19e>
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	2700      	movs	r7, #0
 8000f2e:	9902      	ldr	r1, [sp, #8]
 8000f30:	18a3      	adds	r3, r4, r2
 8000f32:	62a9      	str	r1, [r5, #40]	; 0x28
 8000f34:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000f36:	632a      	str	r2, [r5, #48]	; 0x30
 8000f38:	636b      	str	r3, [r5, #52]	; 0x34
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	42bb      	cmp	r3, r7
 8000f3e:	db1d      	blt.n	8000f7c <__gnu_unwind_pr_common+0x2a8>
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	e720      	b.n	8000d88 <__gnu_unwind_pr_common+0xb4>
 8000f46:	4648      	mov	r0, r9
 8000f48:	210d      	movs	r1, #13
 8000f4a:	f7ff fe55 	bl	8000bf8 <_Unwind_GetGR>
 8000f4e:	6228      	str	r0, [r5, #32]
 8000f50:	9b06      	ldr	r3, [sp, #24]
 8000f52:	626b      	str	r3, [r5, #36]	; 0x24
 8000f54:	e7e3      	b.n	8000f1e <__gnu_unwind_pr_common+0x24a>
 8000f56:	4620      	mov	r0, r4
 8000f58:	f7ff fc62 	bl	8000820 <selfrel_offset31>
 8000f5c:	3404      	adds	r4, #4
 8000f5e:	4606      	mov	r6, r0
 8000f60:	63ac      	str	r4, [r5, #56]	; 0x38
 8000f62:	4628      	mov	r0, r5
 8000f64:	f003 fdf6 	bl	8004b54 <__cxa_begin_cleanup>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	f43f af1a 	beq.w	8000da2 <__gnu_unwind_pr_common+0xce>
 8000f6e:	4648      	mov	r0, r9
 8000f70:	4632      	mov	r2, r6
 8000f72:	210f      	movs	r1, #15
 8000f74:	f7ff fe66 	bl	8000c44 <_Unwind_SetGR>
 8000f78:	2007      	movs	r0, #7
 8000f7a:	e713      	b.n	8000da4 <__gnu_unwind_pr_common+0xd0>
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	3001      	adds	r0, #1
 8000f80:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000f84:	f7ff fc4c 	bl	8000820 <selfrel_offset31>
 8000f88:	210f      	movs	r1, #15
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4648      	mov	r0, r9
 8000f8e:	f7ff fe59 	bl	8000c44 <_Unwind_SetGR>
 8000f92:	4648      	mov	r0, r9
 8000f94:	462a      	mov	r2, r5
 8000f96:	4639      	mov	r1, r7
 8000f98:	f7ff fe54 	bl	8000c44 <_Unwind_SetGR>
 8000f9c:	2007      	movs	r0, #7
 8000f9e:	e701      	b.n	8000da4 <__gnu_unwind_pr_common+0xd0>
 8000fa0:	08005357 	.word	0x08005357

08000fa4 <__aeabi_unwind_cpp_pr0>:
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e695      	b.n	8000cd4 <__gnu_unwind_pr_common>

08000fa8 <__aeabi_unwind_cpp_pr1>:
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e693      	b.n	8000cd4 <__gnu_unwind_pr_common>

08000fac <__aeabi_unwind_cpp_pr2>:
 8000fac:	2302      	movs	r3, #2
 8000fae:	e691      	b.n	8000cd4 <__gnu_unwind_pr_common>

08000fb0 <_Unwind_VRS_Pop>:
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	b0c5      	sub	sp, #276	; 0x114
 8000fb6:	2904      	cmp	r1, #4
 8000fb8:	d80d      	bhi.n	8000fd6 <_Unwind_VRS_Pop+0x26>
 8000fba:	e8df f001 	tbb	[pc, r1]
 8000fbe:	0355      	.short	0x0355
 8000fc0:	310c      	.short	0x310c
 8000fc2:	0f          	.byte	0x0f
 8000fc3:	00          	.byte	0x00
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000fca:	b295      	uxth	r5, r2
 8000fcc:	d164      	bne.n	8001098 <_Unwind_VRS_Pop+0xe8>
 8000fce:	1972      	adds	r2, r6, r5
 8000fd0:	2a10      	cmp	r2, #16
 8000fd2:	f240 809d 	bls.w	8001110 <_Unwind_VRS_Pop+0x160>
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	b045      	add	sp, #276	; 0x114
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1fa      	bne.n	8000fd6 <_Unwind_VRS_Pop+0x26>
 8000fe0:	2a10      	cmp	r2, #16
 8000fe2:	d8f8      	bhi.n	8000fd6 <_Unwind_VRS_Pop+0x26>
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	06d8      	lsls	r0, r3, #27
 8000fe8:	f100 80c8 	bmi.w	800117c <_Unwind_VRS_Pop+0x1cc>
 8000fec:	ae22      	add	r6, sp, #136	; 0x88
 8000fee:	4630      	mov	r0, r6
 8000ff0:	9201      	str	r2, [sp, #4]
 8000ff2:	2501      	movs	r5, #1
 8000ff4:	f000 f974 	bl	80012e0 <__gnu_Unwind_Save_WMMXC>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ffc:	9a01      	ldr	r2, [sp, #4]
 8000ffe:	fa05 f103 	lsl.w	r1, r5, r3
 8001002:	4211      	tst	r1, r2
 8001004:	d003      	beq.n	800100e <_Unwind_VRS_Pop+0x5e>
 8001006:	6801      	ldr	r1, [r0, #0]
 8001008:	3004      	adds	r0, #4
 800100a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800100e:	3301      	adds	r3, #1
 8001010:	2b04      	cmp	r3, #4
 8001012:	d1f4      	bne.n	8000ffe <_Unwind_VRS_Pop+0x4e>
 8001014:	63a0      	str	r0, [r4, #56]	; 0x38
 8001016:	4630      	mov	r0, r6
 8001018:	f000 f958 	bl	80012cc <__gnu_Unwind_Restore_WMMXC>
 800101c:	2000      	movs	r0, #0
 800101e:	e7db      	b.n	8000fd8 <_Unwind_VRS_Pop+0x28>
 8001020:	2b03      	cmp	r3, #3
 8001022:	d1d8      	bne.n	8000fd6 <_Unwind_VRS_Pop+0x26>
 8001024:	0c15      	lsrs	r5, r2, #16
 8001026:	b297      	uxth	r7, r2
 8001028:	19eb      	adds	r3, r5, r7
 800102a:	2b10      	cmp	r3, #16
 800102c:	d8d3      	bhi.n	8000fd6 <_Unwind_VRS_Pop+0x26>
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	071e      	lsls	r6, r3, #28
 8001032:	f100 80b7 	bmi.w	80011a4 <_Unwind_VRS_Pop+0x1f4>
 8001036:	ae22      	add	r6, sp, #136	; 0x88
 8001038:	4630      	mov	r0, r6
 800103a:	f000 f925 	bl	8001288 <__gnu_Unwind_Save_WMMXD>
 800103e:	00ed      	lsls	r5, r5, #3
 8001040:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001042:	b15f      	cbz	r7, 800105c <_Unwind_VRS_Pop+0xac>
 8001044:	3d04      	subs	r5, #4
 8001046:	4603      	mov	r3, r0
 8001048:	1971      	adds	r1, r6, r5
 800104a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800104e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001052:	4283      	cmp	r3, r0
 8001054:	f841 2f04 	str.w	r2, [r1, #4]!
 8001058:	d1f9      	bne.n	800104e <_Unwind_VRS_Pop+0x9e>
 800105a:	4618      	mov	r0, r3
 800105c:	63a0      	str	r0, [r4, #56]	; 0x38
 800105e:	4630      	mov	r0, r6
 8001060:	f000 f8f0 	bl	8001244 <__gnu_Unwind_Restore_WMMXD>
 8001064:	2000      	movs	r0, #0
 8001066:	e7b7      	b.n	8000fd8 <_Unwind_VRS_Pop+0x28>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1b4      	bne.n	8000fd6 <_Unwind_VRS_Pop+0x26>
 800106c:	2701      	movs	r7, #1
 800106e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001070:	b296      	uxth	r6, r2
 8001072:	1d20      	adds	r0, r4, #4
 8001074:	fa07 f103 	lsl.w	r1, r7, r3
 8001078:	4231      	tst	r1, r6
 800107a:	f103 0301 	add.w	r3, r3, #1
 800107e:	d002      	beq.n	8001086 <_Unwind_VRS_Pop+0xd6>
 8001080:	6829      	ldr	r1, [r5, #0]
 8001082:	3504      	adds	r5, #4
 8001084:	6001      	str	r1, [r0, #0]
 8001086:	2b10      	cmp	r3, #16
 8001088:	f100 0004 	add.w	r0, r0, #4
 800108c:	d1f2      	bne.n	8001074 <_Unwind_VRS_Pop+0xc4>
 800108e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8001092:	d13b      	bne.n	800110c <_Unwind_VRS_Pop+0x15c>
 8001094:	63a5      	str	r5, [r4, #56]	; 0x38
 8001096:	e79f      	b.n	8000fd8 <_Unwind_VRS_Pop+0x28>
 8001098:	2b05      	cmp	r3, #5
 800109a:	d19c      	bne.n	8000fd6 <_Unwind_VRS_Pop+0x26>
 800109c:	1977      	adds	r7, r6, r5
 800109e:	2f20      	cmp	r7, #32
 80010a0:	d899      	bhi.n	8000fd6 <_Unwind_VRS_Pop+0x26>
 80010a2:	2e0f      	cmp	r6, #15
 80010a4:	d966      	bls.n	8001174 <_Unwind_VRS_Pop+0x1c4>
 80010a6:	462f      	mov	r7, r5
 80010a8:	2d00      	cmp	r5, #0
 80010aa:	d13a      	bne.n	8001122 <_Unwind_VRS_Pop+0x172>
 80010ac:	462a      	mov	r2, r5
 80010ae:	2700      	movs	r7, #0
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80010b4:	dd72      	ble.n	800119c <_Unwind_VRS_Pop+0x1ec>
 80010b6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80010ba:	4601      	mov	r1, r0
 80010bc:	a844      	add	r0, sp, #272	; 0x110
 80010be:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80010c2:	388c      	subs	r0, #140	; 0x8c
 80010c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80010c8:	4291      	cmp	r1, r2
 80010ca:	f840 5f04 	str.w	r5, [r0, #4]!
 80010ce:	d1f9      	bne.n	80010c4 <_Unwind_VRS_Pop+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	b197      	cbz	r7, 80010fa <_Unwind_VRS_Pop+0x14a>
 80010d4:	2e10      	cmp	r6, #16
 80010d6:	4632      	mov	r2, r6
 80010d8:	bf38      	it	cc
 80010da:	2210      	movcc	r2, #16
 80010dc:	a944      	add	r1, sp, #272	; 0x110
 80010de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80010e2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80010e6:	0079      	lsls	r1, r7, #1
 80010e8:	3a04      	subs	r2, #4
 80010ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80010ee:	f850 5b04 	ldr.w	r5, [r0], #4
 80010f2:	4288      	cmp	r0, r1
 80010f4:	f842 5f04 	str.w	r5, [r2, #4]!
 80010f8:	d1f9      	bne.n	80010ee <_Unwind_VRS_Pop+0x13e>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d048      	beq.n	8001190 <_Unwind_VRS_Pop+0x1e0>
 80010fe:	2e0f      	cmp	r6, #15
 8001100:	63a1      	str	r1, [r4, #56]	; 0x38
 8001102:	d933      	bls.n	800116c <_Unwind_VRS_Pop+0x1bc>
 8001104:	b117      	cbz	r7, 800110c <_Unwind_VRS_Pop+0x15c>
 8001106:	a802      	add	r0, sp, #8
 8001108:	f000 f894 	bl	8001234 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800110c:	2000      	movs	r0, #0
 800110e:	e763      	b.n	8000fd8 <_Unwind_VRS_Pop+0x28>
 8001110:	2e0f      	cmp	r6, #15
 8001112:	f63f af60 	bhi.w	8000fd6 <_Unwind_VRS_Pop+0x26>
 8001116:	2700      	movs	r7, #0
 8001118:	6822      	ldr	r2, [r4, #0]
 800111a:	07d1      	lsls	r1, r2, #31
 800111c:	d417      	bmi.n	800114e <_Unwind_VRS_Pop+0x19e>
 800111e:	2f00      	cmp	r7, #0
 8001120:	d060      	beq.n	80011e4 <_Unwind_VRS_Pop+0x234>
 8001122:	6822      	ldr	r2, [r4, #0]
 8001124:	0751      	lsls	r1, r2, #29
 8001126:	d445      	bmi.n	80011b4 <_Unwind_VRS_Pop+0x204>
 8001128:	2b01      	cmp	r3, #1
 800112a:	d04d      	beq.n	80011c8 <_Unwind_VRS_Pop+0x218>
 800112c:	2e0f      	cmp	r6, #15
 800112e:	d806      	bhi.n	800113e <_Unwind_VRS_Pop+0x18e>
 8001130:	a822      	add	r0, sp, #136	; 0x88
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	f000 f87a 	bl	800122c <__gnu_Unwind_Save_VFP_D>
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	2f00      	cmp	r7, #0
 800113c:	d0b6      	beq.n	80010ac <_Unwind_VRS_Pop+0xfc>
 800113e:	a802      	add	r0, sp, #8
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f000 f87b 	bl	800123c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001146:	9b01      	ldr	r3, [sp, #4]
 8001148:	f1c6 0210 	rsb	r2, r6, #16
 800114c:	e7b0      	b.n	80010b0 <_Unwind_VRS_Pop+0x100>
 800114e:	f022 0101 	bic.w	r1, r2, #1
 8001152:	2b05      	cmp	r3, #5
 8001154:	6021      	str	r1, [r4, #0]
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	4620      	mov	r0, r4
 800115a:	d03b      	beq.n	80011d4 <_Unwind_VRS_Pop+0x224>
 800115c:	f022 0203 	bic.w	r2, r2, #3
 8001160:	f840 2b48 	str.w	r2, [r0], #72
 8001164:	f000 f85a 	bl	800121c <__gnu_Unwind_Save_VFP>
 8001168:	9b01      	ldr	r3, [sp, #4]
 800116a:	e7d8      	b.n	800111e <_Unwind_VRS_Pop+0x16e>
 800116c:	a822      	add	r0, sp, #136	; 0x88
 800116e:	f000 f859 	bl	8001224 <__gnu_Unwind_Restore_VFP_D>
 8001172:	e7c7      	b.n	8001104 <_Unwind_VRS_Pop+0x154>
 8001174:	2f10      	cmp	r7, #16
 8001176:	d9ce      	bls.n	8001116 <_Unwind_VRS_Pop+0x166>
 8001178:	3f10      	subs	r7, #16
 800117a:	e7cd      	b.n	8001118 <_Unwind_VRS_Pop+0x168>
 800117c:	f023 0310 	bic.w	r3, r3, #16
 8001180:	6023      	str	r3, [r4, #0]
 8001182:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001186:	9201      	str	r2, [sp, #4]
 8001188:	f000 f8aa 	bl	80012e0 <__gnu_Unwind_Save_WMMXC>
 800118c:	9a01      	ldr	r2, [sp, #4]
 800118e:	e72d      	b.n	8000fec <_Unwind_VRS_Pop+0x3c>
 8001190:	3104      	adds	r1, #4
 8001192:	63a1      	str	r1, [r4, #56]	; 0x38
 8001194:	a822      	add	r0, sp, #136	; 0x88
 8001196:	f000 f83d 	bl	8001214 <__gnu_Unwind_Restore_VFP>
 800119a:	e7b7      	b.n	800110c <_Unwind_VRS_Pop+0x15c>
 800119c:	2f00      	cmp	r7, #0
 800119e:	d199      	bne.n	80010d4 <_Unwind_VRS_Pop+0x124>
 80011a0:	4601      	mov	r1, r0
 80011a2:	e7aa      	b.n	80010fa <_Unwind_VRS_Pop+0x14a>
 80011a4:	f023 0308 	bic.w	r3, r3, #8
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80011ae:	f000 f86b 	bl	8001288 <__gnu_Unwind_Save_WMMXD>
 80011b2:	e740      	b.n	8001036 <_Unwind_VRS_Pop+0x86>
 80011b4:	4620      	mov	r0, r4
 80011b6:	f022 0204 	bic.w	r2, r2, #4
 80011ba:	f840 2bd0 	str.w	r2, [r0], #208
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	f000 f83c 	bl	800123c <__gnu_Unwind_Save_VFP_D_16_to_31>
 80011c4:	9b01      	ldr	r3, [sp, #4]
 80011c6:	e7af      	b.n	8001128 <_Unwind_VRS_Pop+0x178>
 80011c8:	a822      	add	r0, sp, #136	; 0x88
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	f000 f826 	bl	800121c <__gnu_Unwind_Save_VFP>
 80011d0:	9b01      	ldr	r3, [sp, #4]
 80011d2:	e7b9      	b.n	8001148 <_Unwind_VRS_Pop+0x198>
 80011d4:	f041 0102 	orr.w	r1, r1, #2
 80011d8:	f840 1b48 	str.w	r1, [r0], #72
 80011dc:	f000 f826 	bl	800122c <__gnu_Unwind_Save_VFP_D>
 80011e0:	9b01      	ldr	r3, [sp, #4]
 80011e2:	e79c      	b.n	800111e <_Unwind_VRS_Pop+0x16e>
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d003      	beq.n	80011f0 <_Unwind_VRS_Pop+0x240>
 80011e8:	2e0f      	cmp	r6, #15
 80011ea:	f63f af5f 	bhi.w	80010ac <_Unwind_VRS_Pop+0xfc>
 80011ee:	e79f      	b.n	8001130 <_Unwind_VRS_Pop+0x180>
 80011f0:	a822      	add	r0, sp, #136	; 0x88
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	f000 f812 	bl	800121c <__gnu_Unwind_Save_VFP>
 80011f8:	9b01      	ldr	r3, [sp, #4]
 80011fa:	e757      	b.n	80010ac <_Unwind_VRS_Pop+0xfc>

080011fc <__restore_core_regs>:
 80011fc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001200:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001204:	469c      	mov	ip, r3
 8001206:	46a6      	mov	lr, r4
 8001208:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800120c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001210:	46e5      	mov	sp, ip
 8001212:	bd00      	pop	{pc}

08001214 <__gnu_Unwind_Restore_VFP>:
 8001214:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <__gnu_Unwind_Save_VFP>:
 800121c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop

08001224 <__gnu_Unwind_Restore_VFP_D>:
 8001224:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <__gnu_Unwind_Save_VFP_D>:
 800122c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001234:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800123c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <__gnu_Unwind_Restore_WMMXD>:
 8001244:	ecf0 0102 	ldfe	f0, [r0], #8
 8001248:	ecf0 1102 	ldfe	f1, [r0], #8
 800124c:	ecf0 2102 	ldfe	f2, [r0], #8
 8001250:	ecf0 3102 	ldfe	f3, [r0], #8
 8001254:	ecf0 4102 	ldfe	f4, [r0], #8
 8001258:	ecf0 5102 	ldfe	f5, [r0], #8
 800125c:	ecf0 6102 	ldfe	f6, [r0], #8
 8001260:	ecf0 7102 	ldfe	f7, [r0], #8
 8001264:	ecf0 8102 	ldfp	f0, [r0], #8
 8001268:	ecf0 9102 	ldfp	f1, [r0], #8
 800126c:	ecf0 a102 	ldfp	f2, [r0], #8
 8001270:	ecf0 b102 	ldfp	f3, [r0], #8
 8001274:	ecf0 c102 	ldfp	f4, [r0], #8
 8001278:	ecf0 d102 	ldfp	f5, [r0], #8
 800127c:	ecf0 e102 	ldfp	f6, [r0], #8
 8001280:	ecf0 f102 	ldfp	f7, [r0], #8
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <__gnu_Unwind_Save_WMMXD>:
 8001288:	ece0 0102 	stfe	f0, [r0], #8
 800128c:	ece0 1102 	stfe	f1, [r0], #8
 8001290:	ece0 2102 	stfe	f2, [r0], #8
 8001294:	ece0 3102 	stfe	f3, [r0], #8
 8001298:	ece0 4102 	stfe	f4, [r0], #8
 800129c:	ece0 5102 	stfe	f5, [r0], #8
 80012a0:	ece0 6102 	stfe	f6, [r0], #8
 80012a4:	ece0 7102 	stfe	f7, [r0], #8
 80012a8:	ece0 8102 	stfp	f0, [r0], #8
 80012ac:	ece0 9102 	stfp	f1, [r0], #8
 80012b0:	ece0 a102 	stfp	f2, [r0], #8
 80012b4:	ece0 b102 	stfp	f3, [r0], #8
 80012b8:	ece0 c102 	stfp	f4, [r0], #8
 80012bc:	ece0 d102 	stfp	f5, [r0], #8
 80012c0:	ece0 e102 	stfp	f6, [r0], #8
 80012c4:	ece0 f102 	stfp	f7, [r0], #8
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <__gnu_Unwind_Restore_WMMXC>:
 80012cc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80012d0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80012d4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80012d8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <__gnu_Unwind_Save_WMMXC>:
 80012e0:	fca0 8101 	stc2	1, cr8, [r0], #4
 80012e4:	fca0 9101 	stc2	1, cr9, [r0], #4
 80012e8:	fca0 a101 	stc2	1, cr10, [r0], #4
 80012ec:	fca0 b101 	stc2	1, cr11, [r0], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <_Unwind_RaiseException>:
 80012f4:	46ec      	mov	ip, sp
 80012f6:	b500      	push	{lr}
 80012f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001308:	a901      	add	r1, sp, #4
 800130a:	f7ff fbed 	bl	8000ae8 <__gnu_Unwind_RaiseException>
 800130e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001312:	b012      	add	sp, #72	; 0x48
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <_Unwind_Resume>:
 8001318:	46ec      	mov	ip, sp
 800131a:	b500      	push	{lr}
 800131c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001320:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e92d 000c 	stmdb	sp!, {r2, r3}
 800132c:	a901      	add	r1, sp, #4
 800132e:	f7ff fc15 	bl	8000b5c <__gnu_Unwind_Resume>
 8001332:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001336:	b012      	add	sp, #72	; 0x48
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <_Unwind_Resume_or_Rethrow>:
 800133c:	46ec      	mov	ip, sp
 800133e:	b500      	push	{lr}
 8001340:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001344:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001350:	a901      	add	r1, sp, #4
 8001352:	f7ff fc25 	bl	8000ba0 <__gnu_Unwind_Resume_or_Rethrow>
 8001356:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800135a:	b012      	add	sp, #72	; 0x48
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <_Unwind_ForcedUnwind>:
 8001360:	46ec      	mov	ip, sp
 8001362:	b500      	push	{lr}
 8001364:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001368:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001374:	ab01      	add	r3, sp, #4
 8001376:	f7ff fbe7 	bl	8000b48 <__gnu_Unwind_ForcedUnwind>
 800137a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800137e:	b012      	add	sp, #72	; 0x48
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <_Unwind_Backtrace>:
 8001384:	46ec      	mov	ip, sp
 8001386:	b500      	push	{lr}
 8001388:	e92d 5000 	stmdb	sp!, {ip, lr}
 800138c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001398:	aa01      	add	r2, sp, #4
 800139a:	f7ff fc61 	bl	8000c60 <__gnu_Unwind_Backtrace>
 800139e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80013a2:	b012      	add	sp, #72	; 0x48
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <next_unwind_byte>:
 80013a8:	7a02      	ldrb	r2, [r0, #8]
 80013aa:	b91a      	cbnz	r2, 80013b4 <next_unwind_byte+0xc>
 80013ac:	7a43      	ldrb	r3, [r0, #9]
 80013ae:	b943      	cbnz	r3, 80013c2 <next_unwind_byte+0x1a>
 80013b0:	20b0      	movs	r0, #176	; 0xb0
 80013b2:	4770      	bx	lr
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	3a01      	subs	r2, #1
 80013b8:	7202      	strb	r2, [r0, #8]
 80013ba:	021a      	lsls	r2, r3, #8
 80013bc:	6002      	str	r2, [r0, #0]
 80013be:	0e18      	lsrs	r0, r3, #24
 80013c0:	4770      	bx	lr
 80013c2:	2103      	movs	r1, #3
 80013c4:	6842      	ldr	r2, [r0, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b410      	push	{r4}
 80013ca:	7243      	strb	r3, [r0, #9]
 80013cc:	6813      	ldr	r3, [r2, #0]
 80013ce:	1d14      	adds	r4, r2, #4
 80013d0:	7201      	strb	r1, [r0, #8]
 80013d2:	021a      	lsls	r2, r3, #8
 80013d4:	6044      	str	r4, [r0, #4]
 80013d6:	6002      	str	r2, [r0, #0]
 80013d8:	bc10      	pop	{r4}
 80013da:	0e18      	lsrs	r0, r3, #24
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <_Unwind_GetGR.constprop.0>:
 80013e0:	2300      	movs	r3, #0
 80013e2:	b500      	push	{lr}
 80013e4:	b085      	sub	sp, #20
 80013e6:	aa03      	add	r2, sp, #12
 80013e8:	9200      	str	r2, [sp, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	220c      	movs	r2, #12
 80013ee:	f7ff fbe9 	bl	8000bc4 <_Unwind_VRS_Get>
 80013f2:	9803      	ldr	r0, [sp, #12]
 80013f4:	b005      	add	sp, #20
 80013f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80013fa:	bf00      	nop

080013fc <unwind_UCB_from_context>:
 80013fc:	e7f0      	b.n	80013e0 <_Unwind_GetGR.constprop.0>
 80013fe:	bf00      	nop

08001400 <__gnu_unwind_execute>:
 8001400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001404:	4606      	mov	r6, r0
 8001406:	460f      	mov	r7, r1
 8001408:	f04f 0800 	mov.w	r8, #0
 800140c:	b085      	sub	sp, #20
 800140e:	4638      	mov	r0, r7
 8001410:	f7ff ffca 	bl	80013a8 <next_unwind_byte>
 8001414:	28b0      	cmp	r0, #176	; 0xb0
 8001416:	4604      	mov	r4, r0
 8001418:	d023      	beq.n	8001462 <__gnu_unwind_execute+0x62>
 800141a:	0605      	lsls	r5, r0, #24
 800141c:	d427      	bmi.n	800146e <__gnu_unwind_execute+0x6e>
 800141e:	2300      	movs	r3, #0
 8001420:	f10d 090c 	add.w	r9, sp, #12
 8001424:	4619      	mov	r1, r3
 8001426:	0085      	lsls	r5, r0, #2
 8001428:	220d      	movs	r2, #13
 800142a:	f8cd 9000 	str.w	r9, [sp]
 800142e:	4630      	mov	r0, r6
 8001430:	f7ff fbc8 	bl	8000bc4 <_Unwind_VRS_Get>
 8001434:	b2ed      	uxtb	r5, r5
 8001436:	9b03      	ldr	r3, [sp, #12]
 8001438:	0660      	lsls	r0, r4, #25
 800143a:	f105 0504 	add.w	r5, r5, #4
 800143e:	bf4c      	ite	mi
 8001440:	1b5d      	submi	r5, r3, r5
 8001442:	18ed      	addpl	r5, r5, r3
 8001444:	2300      	movs	r3, #0
 8001446:	220d      	movs	r2, #13
 8001448:	4619      	mov	r1, r3
 800144a:	f8cd 9000 	str.w	r9, [sp]
 800144e:	4630      	mov	r0, r6
 8001450:	9503      	str	r5, [sp, #12]
 8001452:	f7ff fbdd 	bl	8000c10 <_Unwind_VRS_Set>
 8001456:	4638      	mov	r0, r7
 8001458:	f7ff ffa6 	bl	80013a8 <next_unwind_byte>
 800145c:	28b0      	cmp	r0, #176	; 0xb0
 800145e:	4604      	mov	r4, r0
 8001460:	d1db      	bne.n	800141a <__gnu_unwind_execute+0x1a>
 8001462:	f1b8 0f00 	cmp.w	r8, #0
 8001466:	f000 8094 	beq.w	8001592 <__gnu_unwind_execute+0x192>
 800146a:	2000      	movs	r0, #0
 800146c:	e01c      	b.n	80014a8 <__gnu_unwind_execute+0xa8>
 800146e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001472:	2b80      	cmp	r3, #128	; 0x80
 8001474:	d05c      	beq.n	8001530 <__gnu_unwind_execute+0x130>
 8001476:	2b90      	cmp	r3, #144	; 0x90
 8001478:	d019      	beq.n	80014ae <__gnu_unwind_execute+0xae>
 800147a:	2ba0      	cmp	r3, #160	; 0xa0
 800147c:	d02c      	beq.n	80014d8 <__gnu_unwind_execute+0xd8>
 800147e:	2bb0      	cmp	r3, #176	; 0xb0
 8001480:	d03e      	beq.n	8001500 <__gnu_unwind_execute+0x100>
 8001482:	2bc0      	cmp	r3, #192	; 0xc0
 8001484:	d06b      	beq.n	800155e <__gnu_unwind_execute+0x15e>
 8001486:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800148a:	2bd0      	cmp	r3, #208	; 0xd0
 800148c:	d10b      	bne.n	80014a6 <__gnu_unwind_execute+0xa6>
 800148e:	f000 0207 	and.w	r2, r0, #7
 8001492:	3201      	adds	r2, #1
 8001494:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001498:	2305      	movs	r3, #5
 800149a:	2101      	movs	r1, #1
 800149c:	4630      	mov	r0, r6
 800149e:	f7ff fd87 	bl	8000fb0 <_Unwind_VRS_Pop>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d0b3      	beq.n	800140e <__gnu_unwind_execute+0xe>
 80014a6:	2009      	movs	r0, #9
 80014a8:	b005      	add	sp, #20
 80014aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014ae:	f000 030d 	and.w	r3, r0, #13
 80014b2:	2b0d      	cmp	r3, #13
 80014b4:	d0f7      	beq.n	80014a6 <__gnu_unwind_execute+0xa6>
 80014b6:	2300      	movs	r3, #0
 80014b8:	ad03      	add	r5, sp, #12
 80014ba:	f000 020f 	and.w	r2, r0, #15
 80014be:	4619      	mov	r1, r3
 80014c0:	9500      	str	r5, [sp, #0]
 80014c2:	4630      	mov	r0, r6
 80014c4:	f7ff fb7e 	bl	8000bc4 <_Unwind_VRS_Get>
 80014c8:	2300      	movs	r3, #0
 80014ca:	9500      	str	r5, [sp, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	220d      	movs	r2, #13
 80014d0:	4630      	mov	r0, r6
 80014d2:	f7ff fb9d 	bl	8000c10 <_Unwind_VRS_Set>
 80014d6:	e79a      	b.n	800140e <__gnu_unwind_execute+0xe>
 80014d8:	43c3      	mvns	r3, r0
 80014da:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	411a      	asrs	r2, r3
 80014e4:	2300      	movs	r3, #0
 80014e6:	0701      	lsls	r1, r0, #28
 80014e8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80014ec:	bf48      	it	mi
 80014ee:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80014f2:	4619      	mov	r1, r3
 80014f4:	4630      	mov	r0, r6
 80014f6:	f7ff fd5b 	bl	8000fb0 <_Unwind_VRS_Pop>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d1d3      	bne.n	80014a6 <__gnu_unwind_execute+0xa6>
 80014fe:	e786      	b.n	800140e <__gnu_unwind_execute+0xe>
 8001500:	28b1      	cmp	r0, #177	; 0xb1
 8001502:	d057      	beq.n	80015b4 <__gnu_unwind_execute+0x1b4>
 8001504:	28b2      	cmp	r0, #178	; 0xb2
 8001506:	d068      	beq.n	80015da <__gnu_unwind_execute+0x1da>
 8001508:	28b3      	cmp	r0, #179	; 0xb3
 800150a:	f000 8095 	beq.w	8001638 <__gnu_unwind_execute+0x238>
 800150e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001512:	2bb4      	cmp	r3, #180	; 0xb4
 8001514:	d0c7      	beq.n	80014a6 <__gnu_unwind_execute+0xa6>
 8001516:	2301      	movs	r3, #1
 8001518:	f000 0207 	and.w	r2, r0, #7
 800151c:	441a      	add	r2, r3
 800151e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001522:	4619      	mov	r1, r3
 8001524:	4630      	mov	r0, r6
 8001526:	f7ff fd43 	bl	8000fb0 <_Unwind_VRS_Pop>
 800152a:	2800      	cmp	r0, #0
 800152c:	d1bb      	bne.n	80014a6 <__gnu_unwind_execute+0xa6>
 800152e:	e76e      	b.n	800140e <__gnu_unwind_execute+0xe>
 8001530:	4638      	mov	r0, r7
 8001532:	f7ff ff39 	bl	80013a8 <next_unwind_byte>
 8001536:	0224      	lsls	r4, r4, #8
 8001538:	4304      	orrs	r4, r0
 800153a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800153e:	d0b2      	beq.n	80014a6 <__gnu_unwind_execute+0xa6>
 8001540:	2300      	movs	r3, #0
 8001542:	0124      	lsls	r4, r4, #4
 8001544:	b2a2      	uxth	r2, r4
 8001546:	4619      	mov	r1, r3
 8001548:	4630      	mov	r0, r6
 800154a:	f7ff fd31 	bl	8000fb0 <_Unwind_VRS_Pop>
 800154e:	2800      	cmp	r0, #0
 8001550:	d1a9      	bne.n	80014a6 <__gnu_unwind_execute+0xa6>
 8001552:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001556:	bf18      	it	ne
 8001558:	f04f 0801 	movne.w	r8, #1
 800155c:	e757      	b.n	800140e <__gnu_unwind_execute+0xe>
 800155e:	28c6      	cmp	r0, #198	; 0xc6
 8001560:	d07d      	beq.n	800165e <__gnu_unwind_execute+0x25e>
 8001562:	28c7      	cmp	r0, #199	; 0xc7
 8001564:	f000 8086 	beq.w	8001674 <__gnu_unwind_execute+0x274>
 8001568:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800156c:	2bc0      	cmp	r3, #192	; 0xc0
 800156e:	f000 8094 	beq.w	800169a <__gnu_unwind_execute+0x29a>
 8001572:	28c8      	cmp	r0, #200	; 0xc8
 8001574:	f000 809f 	beq.w	80016b6 <__gnu_unwind_execute+0x2b6>
 8001578:	28c9      	cmp	r0, #201	; 0xc9
 800157a:	d194      	bne.n	80014a6 <__gnu_unwind_execute+0xa6>
 800157c:	4638      	mov	r0, r7
 800157e:	f7ff ff13 	bl	80013a8 <next_unwind_byte>
 8001582:	0302      	lsls	r2, r0, #12
 8001584:	f000 000f 	and.w	r0, r0, #15
 8001588:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800158c:	3001      	adds	r0, #1
 800158e:	4302      	orrs	r2, r0
 8001590:	e782      	b.n	8001498 <__gnu_unwind_execute+0x98>
 8001592:	ac03      	add	r4, sp, #12
 8001594:	4643      	mov	r3, r8
 8001596:	220e      	movs	r2, #14
 8001598:	4641      	mov	r1, r8
 800159a:	9400      	str	r4, [sp, #0]
 800159c:	4630      	mov	r0, r6
 800159e:	f7ff fb11 	bl	8000bc4 <_Unwind_VRS_Get>
 80015a2:	9400      	str	r4, [sp, #0]
 80015a4:	4630      	mov	r0, r6
 80015a6:	4643      	mov	r3, r8
 80015a8:	220f      	movs	r2, #15
 80015aa:	4641      	mov	r1, r8
 80015ac:	f7ff fb30 	bl	8000c10 <_Unwind_VRS_Set>
 80015b0:	4640      	mov	r0, r8
 80015b2:	e779      	b.n	80014a8 <__gnu_unwind_execute+0xa8>
 80015b4:	4638      	mov	r0, r7
 80015b6:	f7ff fef7 	bl	80013a8 <next_unwind_byte>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	f43f af73 	beq.w	80014a6 <__gnu_unwind_execute+0xa6>
 80015c0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80015c4:	f47f af6f 	bne.w	80014a6 <__gnu_unwind_execute+0xa6>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4630      	mov	r0, r6
 80015ce:	f7ff fcef 	bl	8000fb0 <_Unwind_VRS_Pop>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	f47f af67 	bne.w	80014a6 <__gnu_unwind_execute+0xa6>
 80015d8:	e719      	b.n	800140e <__gnu_unwind_execute+0xe>
 80015da:	2300      	movs	r3, #0
 80015dc:	f10d 090c 	add.w	r9, sp, #12
 80015e0:	220d      	movs	r2, #13
 80015e2:	4619      	mov	r1, r3
 80015e4:	f8cd 9000 	str.w	r9, [sp]
 80015e8:	4630      	mov	r0, r6
 80015ea:	f7ff faeb 	bl	8000bc4 <_Unwind_VRS_Get>
 80015ee:	4638      	mov	r0, r7
 80015f0:	f7ff feda 	bl	80013a8 <next_unwind_byte>
 80015f4:	0602      	lsls	r2, r0, #24
 80015f6:	f04f 0402 	mov.w	r4, #2
 80015fa:	d50c      	bpl.n	8001616 <__gnu_unwind_execute+0x216>
 80015fc:	9b03      	ldr	r3, [sp, #12]
 80015fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001602:	40a0      	lsls	r0, r4
 8001604:	4403      	add	r3, r0
 8001606:	4638      	mov	r0, r7
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	f7ff fecd 	bl	80013a8 <next_unwind_byte>
 800160e:	0603      	lsls	r3, r0, #24
 8001610:	f104 0407 	add.w	r4, r4, #7
 8001614:	d4f2      	bmi.n	80015fc <__gnu_unwind_execute+0x1fc>
 8001616:	2300      	movs	r3, #0
 8001618:	9903      	ldr	r1, [sp, #12]
 800161a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800161e:	40a2      	lsls	r2, r4
 8001620:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001624:	188c      	adds	r4, r1, r2
 8001626:	f8cd 9000 	str.w	r9, [sp]
 800162a:	4619      	mov	r1, r3
 800162c:	220d      	movs	r2, #13
 800162e:	4630      	mov	r0, r6
 8001630:	9403      	str	r4, [sp, #12]
 8001632:	f7ff faed 	bl	8000c10 <_Unwind_VRS_Set>
 8001636:	e6ea      	b.n	800140e <__gnu_unwind_execute+0xe>
 8001638:	4638      	mov	r0, r7
 800163a:	f7ff feb5 	bl	80013a8 <next_unwind_byte>
 800163e:	2301      	movs	r3, #1
 8001640:	0301      	lsls	r1, r0, #12
 8001642:	f000 000f 	and.w	r0, r0, #15
 8001646:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800164a:	18c2      	adds	r2, r0, r3
 800164c:	430a      	orrs	r2, r1
 800164e:	4630      	mov	r0, r6
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fcad 	bl	8000fb0 <_Unwind_VRS_Pop>
 8001656:	2800      	cmp	r0, #0
 8001658:	f47f af25 	bne.w	80014a6 <__gnu_unwind_execute+0xa6>
 800165c:	e6d7      	b.n	800140e <__gnu_unwind_execute+0xe>
 800165e:	4638      	mov	r0, r7
 8001660:	f7ff fea2 	bl	80013a8 <next_unwind_byte>
 8001664:	0301      	lsls	r1, r0, #12
 8001666:	f000 000f 	and.w	r0, r0, #15
 800166a:	2303      	movs	r3, #3
 800166c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001670:	1c42      	adds	r2, r0, #1
 8001672:	e7eb      	b.n	800164c <__gnu_unwind_execute+0x24c>
 8001674:	4638      	mov	r0, r7
 8001676:	f7ff fe97 	bl	80013a8 <next_unwind_byte>
 800167a:	2800      	cmp	r0, #0
 800167c:	f43f af13 	beq.w	80014a6 <__gnu_unwind_execute+0xa6>
 8001680:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001684:	f47f af0f 	bne.w	80014a6 <__gnu_unwind_execute+0xa6>
 8001688:	4602      	mov	r2, r0
 800168a:	2104      	movs	r1, #4
 800168c:	4630      	mov	r0, r6
 800168e:	f7ff fc8f 	bl	8000fb0 <_Unwind_VRS_Pop>
 8001692:	2800      	cmp	r0, #0
 8001694:	f47f af07 	bne.w	80014a6 <__gnu_unwind_execute+0xa6>
 8001698:	e6b9      	b.n	800140e <__gnu_unwind_execute+0xe>
 800169a:	2303      	movs	r3, #3
 800169c:	f000 020f 	and.w	r2, r0, #15
 80016a0:	3201      	adds	r2, #1
 80016a2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80016a6:	4619      	mov	r1, r3
 80016a8:	4630      	mov	r0, r6
 80016aa:	f7ff fc81 	bl	8000fb0 <_Unwind_VRS_Pop>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	f47f aef9 	bne.w	80014a6 <__gnu_unwind_execute+0xa6>
 80016b4:	e6ab      	b.n	800140e <__gnu_unwind_execute+0xe>
 80016b6:	4638      	mov	r0, r7
 80016b8:	f7ff fe76 	bl	80013a8 <next_unwind_byte>
 80016bc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80016c0:	f000 030f 	and.w	r3, r0, #15
 80016c4:	3210      	adds	r2, #16
 80016c6:	3301      	adds	r3, #1
 80016c8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80016cc:	e6e4      	b.n	8001498 <__gnu_unwind_execute+0x98>
 80016ce:	bf00      	nop

080016d0 <__gnu_unwind_frame>:
 80016d0:	b530      	push	{r4, r5, lr}
 80016d2:	2403      	movs	r4, #3
 80016d4:	460d      	mov	r5, r1
 80016d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80016d8:	b085      	sub	sp, #20
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	f88d 400c 	strb.w	r4, [sp, #12]
 80016e0:	79dc      	ldrb	r4, [r3, #7]
 80016e2:	0212      	lsls	r2, r2, #8
 80016e4:	3308      	adds	r3, #8
 80016e6:	a901      	add	r1, sp, #4
 80016e8:	4628      	mov	r0, r5
 80016ea:	9201      	str	r2, [sp, #4]
 80016ec:	f88d 400d 	strb.w	r4, [sp, #13]
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	f7ff fe85 	bl	8001400 <__gnu_unwind_execute>
 80016f6:	b005      	add	sp, #20
 80016f8:	bd30      	pop	{r4, r5, pc}
 80016fa:	bf00      	nop

080016fc <_Unwind_GetRegionStart>:
 80016fc:	b508      	push	{r3, lr}
 80016fe:	f7ff fe7d 	bl	80013fc <unwind_UCB_from_context>
 8001702:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001704:	bd08      	pop	{r3, pc}
 8001706:	bf00      	nop

08001708 <_Unwind_GetLanguageSpecificData>:
 8001708:	b508      	push	{r3, lr}
 800170a:	f7ff fe77 	bl	80013fc <unwind_UCB_from_context>
 800170e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001710:	79c3      	ldrb	r3, [r0, #7]
 8001712:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001716:	3008      	adds	r0, #8
 8001718:	bd08      	pop	{r3, pc}
 800171a:	bf00      	nop

0800171c <_Unwind_GetTextRelBase>:
 800171c:	b508      	push	{r3, lr}
 800171e:	f003 feb7 	bl	8005490 <abort>
 8001722:	bf00      	nop

08001724 <_Unwind_GetDataRelBase>:
 8001724:	b508      	push	{r3, lr}
 8001726:	f7ff fff9 	bl	800171c <_Unwind_GetTextRelBase>
 800172a:	bf00      	nop

0800172c <HAL_TIM_PeriodElapsedCallback>:
#include "CanManager.h"
#include "ModeManager.h"
#include "Joystick.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d105      	bne.n	800174a <HAL_TIM_PeriodElapsedCallback+0x1e>
	  canManager.stopAllMotors();
 800173e:	4811      	ldr	r0, [pc, #68]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001740:	f000 fa96 	bl	8001c70 <_ZN10CanManager13stopAllMotorsEv>
	  modeManager.stopIdleTimer();
 8001744:	4810      	ldr	r0, [pc, #64]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001746:	f000 fe99 	bl	800247c <_ZN11ModeManager13stopIdleTimerEv>
  }
  if (htim->Instance == TIM3) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d110      	bne.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x4a>
	  if (modeManager.isJoystickMode()){
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001756:	f000 fed1 	bl	80024fc <_ZN11ModeManager14isJoystickModeEv>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x4a>
		  joystick.update_measurments();
 800176a:	4809      	ldr	r0, [pc, #36]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800176c:	f000 fd10 	bl	8002190 <_ZN8Joystick18update_measurmentsEv>
		  canManager.joystickSendProcess();
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001772:	f000 f855 	bl	8001820 <_ZN10CanManager19joystickSendProcessEv>
	  }
  }
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40000800 	.word	0x40000800
 8001784:	20000098 	.word	0x20000098
 8001788:	20000200 	.word	0x20000200
 800178c:	40000400 	.word	0x40000400
 8001790:	20000110 	.word	0x20000110

08001794 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef* hcan ){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800179c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80017a2:	f002 fbb6 	bl	8003f12 <HAL_GPIO_TogglePin>
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
			&canManager.canMsgRx.header,
			canManager.canMsgRx.data );
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f001 ff69 	bl	8003684 <HAL_CAN_GetRxMessage>

	canManager.rewriteFrameProcess(canManager.canMsgRx.header.StdId, canManager.canMsgRx.data);
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80017bc:	f000 f880 	bl	80018c0 <_ZN10CanManager19rewriteFrameProcessEmPh>

}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40011000 	.word	0x40011000
 80017cc:	200000e4 	.word	0x200000e4
 80017d0:	200000c4 	.word	0x200000c4
 80017d4:	20000098 	.word	0x20000098

080017d8 <_ZN10CanManager4initEv>:
#include "CanManager.h"
#include <math.h>

CanManager canManager;

void CanManager::init(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	canMsgTx.header.RTR = CAN_RTR_DATA;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	661a      	str	r2, [r3, #96]	; 0x60
	canMsgTx.header.IDE  = CAN_ID_STD;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	65da      	str	r2, [r3, #92]	; 0x5c
	canMsgTx.header.ExtId = 0x01;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58
	canMsgTx.header.TransmitGlobalTime = DISABLE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68



	hal_can_filter_init();
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fa72 	bl	8001ce4 <_ZN10CanManager19hal_can_filter_initEv>
	HAL_CAN_Start(&hcan);
 8001800:	4806      	ldr	r0, [pc, #24]	; (800181c <_ZN10CanManager4initEv+0x44>)
 8001802:	f001 fec6 	bl	8003592 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8001806:	2102      	movs	r1, #2
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <_ZN10CanManager4initEv+0x44>)
 800180a:	f001 ffb1 	bl	8003770 <HAL_CAN_ActivateNotification>


	clearTxBuff();
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f983 	bl	8001b1a <_ZN10CanManager11clearTxBuffEv>

}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000298 	.word	0x20000298

08001820 <_ZN10CanManager19joystickSendProcessEv>:
void CanManager::joystickSendProcess(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	if(modeManager.isJoystickMode()){
 8001828:	4823      	ldr	r0, [pc, #140]	; (80018b8 <_ZN10CanManager19joystickSendProcessEv+0x98>)
 800182a:	f000 fe67 	bl	80024fc <_ZN11ModeManager14isJoystickModeEv>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d037      	beq.n	80018ae <_ZN10CanManager19joystickSendProcessEv+0x8e>
		uint8_t signX = joystick.getSign(Joystick::X_AXIS_INDEX);
 800183e:	2100      	movs	r1, #0
 8001840:	481e      	ldr	r0, [pc, #120]	; (80018bc <_ZN10CanManager19joystickSendProcessEv+0x9c>)
 8001842:	f000 fcbf 	bl	80021c4 <_ZN8Joystick7getSignENS_8Axis_numE>
 8001846:	4603      	mov	r3, r0
 8001848:	75fb      	strb	r3, [r7, #23]
		uint8_t signY = joystick.getSign(Joystick::Y_AXIS_INDEX);
 800184a:	2101      	movs	r1, #1
 800184c:	481b      	ldr	r0, [pc, #108]	; (80018bc <_ZN10CanManager19joystickSendProcessEv+0x9c>)
 800184e:	f000 fcb9 	bl	80021c4 <_ZN8Joystick7getSignENS_8Axis_numE>
 8001852:	4603      	mov	r3, r0
 8001854:	75bb      	strb	r3, [r7, #22]
		float   perX = joystick.getPercentage(Joystick::X_AXIS_INDEX);
 8001856:	2100      	movs	r1, #0
 8001858:	4818      	ldr	r0, [pc, #96]	; (80018bc <_ZN10CanManager19joystickSendProcessEv+0x9c>)
 800185a:	f000 fcc8 	bl	80021ee <_ZN8Joystick13getPercentageENS_8Axis_numE>
 800185e:	4603      	mov	r3, r0
 8001860:	613b      	str	r3, [r7, #16]
		float   perY = joystick.getPercentage(Joystick::Y_AXIS_INDEX);
 8001862:	2101      	movs	r1, #1
 8001864:	4815      	ldr	r0, [pc, #84]	; (80018bc <_ZN10CanManager19joystickSendProcessEv+0x9c>)
 8001866:	f000 fcc2 	bl	80021ee <_ZN8Joystick13getPercentageENS_8Axis_numE>
 800186a:	4603      	mov	r3, r0
 800186c:	60fb      	str	r3, [r7, #12]

		uint16_t uperX = convertFloatToUint16t(perX);
 800186e:	6939      	ldr	r1, [r7, #16]
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f96b 	bl	8001b4c <_ZN10CanManager21convertFloatToUint16tEf>
 8001876:	4603      	mov	r3, r0
 8001878:	817b      	strh	r3, [r7, #10]
		uint16_t uperY = convertFloatToUint16t(perY);
 800187a:	68f9      	ldr	r1, [r7, #12]
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f965 	bl	8001b4c <_ZN10CanManager21convertFloatToUint16tEf>
 8001882:	4603      	mov	r3, r0
 8001884:	813b      	strh	r3, [r7, #8]


		// X conversion and sending (VELOCITY)
		convertToFrame_Tx(signX, uperX);
 8001886:	897a      	ldrh	r2, [r7, #10]
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f987 	bl	8001ba0 <_ZN10CanManager17convertToFrame_TxEht>
		sendMsg(JOYSTICK_X);
 8001892:	2103      	movs	r1, #3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f90c 	bl	8001ab2 <_ZN10CanManager7sendMsgENS_9SEND_MODEE>

		// X conversion and sending (TURN)
		convertToFrame_Tx(signY, uperY);
 800189a:	893a      	ldrh	r2, [r7, #8]
 800189c:	7dbb      	ldrb	r3, [r7, #22]
 800189e:	4619      	mov	r1, r3
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f97d 	bl	8001ba0 <_ZN10CanManager17convertToFrame_TxEht>
		sendMsg(JOYSTICK_Y);
 80018a6:	2104      	movs	r1, #4
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f902 	bl	8001ab2 <_ZN10CanManager7sendMsgENS_9SEND_MODEE>

	}

}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000200 	.word	0x20000200
 80018bc:	20000110 	.word	0x20000110

080018c0 <_ZN10CanManager19rewriteFrameProcessEmPh>:
/////////////////////////RX PART///////////////////////////////////////////

void CanManager::rewriteFrameProcess(uint32_t frame_id, uint8_t* data){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	if (frame_id == STATUS_FRAME_ID) convertStatusData_Rx( data); // function also update status in modemanager
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f240 225d 	movw	r2, #605	; 0x25d
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d104      	bne.n	80018e0 <_ZN10CanManager19rewriteFrameProcessEmPh+0x20>
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f831 	bl	8001940 <_ZN10CanManager20convertStatusData_RxEPh>
	else if ( frame_id == VELOCITY_FRAME_ID ) 		setVelocity( data, ModeManager::RC );
	else if ( frame_id == I3_VELOCITY_FRAME_ID )	setVelocity( data, ModeManager::I3  );
	else if ( frame_id == TURN_FRAME_ID )			setTurn( data , ModeManager::RC  );
	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data , ModeManager::I3  );
}
 80018de:	e02a      	b.n	8001936 <_ZN10CanManager19rewriteFrameProcessEmPh+0x76>
	else if ( frame_id == VELOCITY_FRAME_ID ) 		setVelocity( data, ModeManager::RC );
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f240 223e 	movw	r2, #574	; 0x23e
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d105      	bne.n	80018f6 <_ZN10CanManager19rewriteFrameProcessEmPh+0x36>
 80018ea:	2200      	movs	r2, #0
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f87e 	bl	80019f0 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>
}
 80018f4:	e01f      	b.n	8001936 <_ZN10CanManager19rewriteFrameProcessEmPh+0x76>
	else if ( frame_id == I3_VELOCITY_FRAME_ID )	setVelocity( data, ModeManager::I3  );
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f240 226d 	movw	r2, #621	; 0x26d
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d105      	bne.n	800190c <_ZN10CanManager19rewriteFrameProcessEmPh+0x4c>
 8001900:	2201      	movs	r2, #1
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f873 	bl	80019f0 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>
}
 800190a:	e014      	b.n	8001936 <_ZN10CanManager19rewriteFrameProcessEmPh+0x76>
	else if ( frame_id == TURN_FRAME_ID )			setTurn( data , ModeManager::RC  );
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f240 224d 	movw	r2, #589	; 0x24d
 8001912:	4293      	cmp	r3, r2
 8001914:	d105      	bne.n	8001922 <_ZN10CanManager19rewriteFrameProcessEmPh+0x62>
 8001916:	2200      	movs	r2, #0
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f88a 	bl	8001a34 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>
}
 8001920:	e009      	b.n	8001936 <_ZN10CanManager19rewriteFrameProcessEmPh+0x76>
	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data , ModeManager::I3  );
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f240 227d 	movw	r2, #637	; 0x27d
 8001928:	4293      	cmp	r3, r2
 800192a:	d104      	bne.n	8001936 <_ZN10CanManager19rewriteFrameProcessEmPh+0x76>
 800192c:	2201      	movs	r2, #1
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f87f 	bl	8001a34 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <_ZN10CanManager20convertStatusData_RxEPh>:

void CanManager::convertStatusData_Rx(uint8_t * data){
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]

	uint8_t status = data[STATUS_MODE_BYTE];
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	73fb      	strb	r3, [r7, #15]
	uint8_t permition = data[STATUS_PERMITION_BYTE];
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	73bb      	strb	r3, [r7, #14]
	modeManager.statusUpdate(getRCmodeStatus_Rx( status ), getDriveModestatus_Rx( permition ) );
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f814 	bl	8001988 <_ZN10CanManager18getRCmodeStatus_RxEh>
 8001960:	4603      	mov	r3, r0
 8001962:	461c      	mov	r4, r3
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f82c 	bl	80019c6 <_ZN10CanManager21getDriveModestatus_RxEh>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	4621      	mov	r1, r4
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <_ZN10CanManager20convertStatusData_RxEPh+0x44>)
 8001976:	f000 fd51 	bl	800241c <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE>
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	20000200 	.word	0x20000200

08001988 <_ZN10CanManager18getRCmodeStatus_RxEh>:

ModeManager::RC_MODE CanManager::getRCmodeStatus_Rx(uint8_t status){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
	if (status == JOYSTICK_MODE_MSG ) 		return ModeManager::MODE_JOYSICK;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <_ZN10CanManager18getRCmodeStatus_RxEh+0x16>
 800199a:	2300      	movs	r3, #0
 800199c:	e00e      	b.n	80019bc <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == ACRO_MODE_MSG ) 		return ModeManager::MODE_ACRO;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <_ZN10CanManager18getRCmodeStatus_RxEh+0x20>
 80019a4:	2303      	movs	r3, #3
 80019a6:	e009      	b.n	80019bc <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == SEMI_MODE_MSG ) 		return ModeManager::MODE_SEMI;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d101      	bne.n	80019b2 <_ZN10CanManager18getRCmodeStatus_RxEh+0x2a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e004      	b.n	80019bc <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == AUTONOMOUS_MODE_MSG ) return ModeManager::MODE_AUTONOMOUS;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d101      	bne.n	80019bc <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e7ff      	b.n	80019bc <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <_ZN10CanManager21getDriveModestatus_RxEh>:

ModeManager::DRIVE_MODE CanManager::getDriveModestatus_Rx(uint8_t permition){
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
	if (permition == ENABLE_DRIVE_MSG  ) 		return ModeManager::ENABLE;
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <_ZN10CanManager21getDriveModestatus_RxEh+0x16>
 80019d8:	2301      	movs	r3, #1
 80019da:	e004      	b.n	80019e6 <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
	else if(permition ==  DISABLE_DRIVE_MSG ) 	return ModeManager::DISABLE;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
 80019e2:	2300      	movs	r3, #0
 80019e4:	e7ff      	b.n	80019e6 <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>:

void CanManager::setVelocity(uint8_t* data, ModeManager::MSG_ORIGIN origin){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	4613      	mov	r3, r2
 80019fc:	71fb      	strb	r3, [r7, #7]
	if (modeManager.velocityPermission(origin)){
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4619      	mov	r1, r3
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE+0x40>)
 8001a04:	f000 fc88 	bl	8002318 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf14      	ite	ne
 8001a0e:	2301      	movne	r3, #1
 8001a10:	2300      	moveq	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE+0x38>
		fill_frame(data);
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f82c 	bl	8001a78 <_ZN10CanManager10fill_frameEPh>
		sendMsg(VELOCITY);
 8001a20:	2101      	movs	r1, #1
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f845 	bl	8001ab2 <_ZN10CanManager7sendMsgENS_9SEND_MODEE>
	}

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000200 	.word	0x20000200

08001a34 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>:
void CanManager::setTurn(uint8_t* data, ModeManager::MSG_ORIGIN origin){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71fb      	strb	r3, [r7, #7]
	if (modeManager.turnPermission(origin)){
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4619      	mov	r1, r3
 8001a46:	480b      	ldr	r0, [pc, #44]	; (8001a74 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE+0x40>)
 8001a48:	f000 fca7 	bl	800239a <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE+0x38>
		fill_frame(data);
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f80a 	bl	8001a78 <_ZN10CanManager10fill_frameEPh>
		sendMsg(TURN);
 8001a64:	2100      	movs	r1, #0
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f823 	bl	8001ab2 <_ZN10CanManager7sendMsgENS_9SEND_MODEE>
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000200 	.word	0x20000200

08001a78 <_ZN10CanManager10fill_frameEPh>:


void CanManager::fill_frame(uint8_t* data){
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	for(uint8_t i=0; i <4; i++){
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	dc0d      	bgt.n	8001aa8 <_ZN10CanManager10fill_frameEPh+0x30>
		canMsgTx.data[i] = data[i];
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6839      	ldr	r1, [r7, #0]
 8001a92:	440a      	add	r2, r1
 8001a94:	7811      	ldrb	r1, [r2, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	for(uint8_t i=0; i <4; i++){
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e7ee      	b.n	8001a86 <_ZN10CanManager10fill_frameEPh+0xe>
	}
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <_ZN10CanManager7sendMsgENS_9SEND_MODEE>:

/////////////////////////TX PART///////////////////////////////////////////

void CanManager::sendMsg(SEND_MODE mode){
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
	if (mode == TURN  ){
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d106      	bne.n	8001ad2 <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x20>
		hal_can_send( STEERING_VELOCITY_FRAME_ID, STEERING_FRAME_LENGTH );
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	f240 211d 	movw	r1, #541	; 0x21d
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8ea 	bl	8001ca4 <_ZN10CanManager12hal_can_sendEth>
 8001ad0:	e01c      	b.n	8001b0c <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x5a>
	}
	else if (mode == VELOCITY){
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d106      	bne.n	8001ae6 <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x34>
		hal_can_send( STEERING_TURN_FRAME_ID,  STEERING_FRAME_LENGTH );
 8001ad8:	2204      	movs	r2, #4
 8001ada:	f240 212d 	movw	r1, #557	; 0x22d
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8e0 	bl	8001ca4 <_ZN10CanManager12hal_can_sendEth>
 8001ae4:	e012      	b.n	8001b0c <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x5a>
	}
	else if (mode == JOYSTICK_X){
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d106      	bne.n	8001afa <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x48>
		hal_can_send( STEERING_VELOCITY_FRAME_ID,  STEERING_FRAME_LENGTH );
 8001aec:	2204      	movs	r2, #4
 8001aee:	f240 211d 	movw	r1, #541	; 0x21d
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8d6 	bl	8001ca4 <_ZN10CanManager12hal_can_sendEth>
 8001af8:	e008      	b.n	8001b0c <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x5a>
	}
	else if (mode == JOYSTICK_Y){
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d105      	bne.n	8001b0c <_ZN10CanManager7sendMsgENS_9SEND_MODEE+0x5a>
		hal_can_send( STEERING_TURN_FRAME_ID ,  STEERING_FRAME_LENGTH );
 8001b00:	2204      	movs	r2, #4
 8001b02:	f240 212d 	movw	r1, #557	; 0x22d
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8cc 	bl	8001ca4 <_ZN10CanManager12hal_can_sendEth>
	}

	clearTxBuff();
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f804 	bl	8001b1a <_ZN10CanManager11clearTxBuffEv>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZN10CanManager11clearTxBuffEv>:

void CanManager::clearTxBuff(){
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i<8; i++) canMsgTx.data[i]=0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	dc09      	bgt.n	8001b40 <_ZN10CanManager11clearTxBuffEv+0x26>
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e7f2      	b.n	8001b26 <_ZN10CanManager11clearTxBuffEv+0xc>
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
	...

08001b4c <_ZN10CanManager21convertFloatToUint16tEf>:
uint8_t CanManager::getSign_Tx(float value){
	if (value >=0) return POSITIVE_SIGN;
	else return NEGATIVE_SIGN;
}

uint16_t CanManager::convertFloatToUint16t( float value){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	float range = 128;
 8001b56:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 8001b5a:	60fb      	str	r3, [r7, #12]
	if( value > range){
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f7fe fe34 	bl	80007cc <__aeabi_fcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <_ZN10CanManager21convertFloatToUint16tEf+0x2a>
		return range;
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7fe fe38 	bl	80007e0 <__aeabi_f2uiz>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	e00e      	b.n	8001b94 <_ZN10CanManager21convertFloatToUint16tEf+0x48>
	}
	return(uint16_t)(value * 0xffff /range);   // 0xffff = 65536 -> max uint16 value
 8001b76:	4909      	ldr	r1, [pc, #36]	; (8001b9c <_ZN10CanManager21convertFloatToUint16tEf+0x50>)
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f7fe fc6b 	bl	8000454 <__aeabi_fmul>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	68f9      	ldr	r1, [r7, #12]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd1a 	bl	80005bc <__aeabi_fdiv>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fe28 	bl	80007e0 <__aeabi_f2uiz>
 8001b90:	4603      	mov	r3, r0
 8001b92:	b29b      	uxth	r3, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	477fff00 	.word	0x477fff00

08001ba0 <_ZN10CanManager17convertToFrame_TxEht>:

void CanManager::convertToFrame_Tx(uint8_t sign, uint16_t value){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
 8001bac:	4613      	mov	r3, r2
 8001bae:	803b      	strh	r3, [r7, #0]
	canMsgTx.data[0] = (uint8_t)(sign >> 8);
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	121b      	asrs	r3, r3, #8
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	canMsgTx.data[1] = (uint8_t) sign;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	canMsgTx.data[2] = (uint8_t)(value >> 8 );
 8001bc4:	883b      	ldrh	r3, [r7, #0]
 8001bc6:	121b      	asrs	r3, r3, #8
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	canMsgTx.data[3] = (uint8_t) value;
 8001bd0:	883b      	ldrh	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73

	encode_frame_big_endian(STEERING_FRAME_LENGTH);
 8001bda:	2104      	movs	r1, #4
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f804 	bl	8001bea <_ZN10CanManager23encode_frame_big_endianEh>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZN10CanManager23encode_frame_big_endianEh>:
void CanManager::encode_frame_big_endian(uint8_t data_length){
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	70fb      	strb	r3, [r7, #3]
	 uint8_t* encoded_data = new uint8_t[data_length];
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 ff27 	bl	8004a4c <_Znaj>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	60bb      	str	r3, [r7, #8]
	 if (encoded_data != NULL){
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d029      	beq.n	8001c5c <_ZN10CanManager23encode_frame_big_endianEh+0x72>
		for( uint8_t i = 1 ; i <= data_length  ;i++){
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dc0f      	bgt.n	8001c34 <_ZN10CanManager23encode_frame_big_endianEh+0x4a>
			encoded_data[i-1] = canMsgTx.data[data_length-i];
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	78f9      	ldrb	r1, [r7, #3]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	1a8a      	subs	r2, r1, r2
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	440a      	add	r2, r1
 8001c26:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8001c2a:	701a      	strb	r2, [r3, #0]
		for( uint8_t i = 1 ; i <= data_length  ;i++){
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e7eb      	b.n	8001c0c <_ZN10CanManager23encode_frame_big_endianEh+0x22>
		}
		for( uint8_t i = 0 ; i < data_length  ;i++) canMsgTx.data[i] = encoded_data[i];
 8001c34:	2300      	movs	r3, #0
 8001c36:	73bb      	strb	r3, [r7, #14]
 8001c38:	7bba      	ldrb	r2, [r7, #14]
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	da0d      	bge.n	8001c5c <_ZN10CanManager23encode_frame_big_endianEh+0x72>
 8001c40:	7bbb      	ldrb	r3, [r7, #14]
 8001c42:	7bba      	ldrb	r2, [r7, #14]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	440a      	add	r2, r1
 8001c48:	7811      	ldrb	r1, [r2, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	460a      	mov	r2, r1
 8001c50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001c54:	7bbb      	ldrb	r3, [r7, #14]
 8001c56:	3301      	adds	r3, #1
 8001c58:	73bb      	strb	r3, [r7, #14]
 8001c5a:	e7ed      	b.n	8001c38 <_ZN10CanManager23encode_frame_big_endianEh+0x4e>
	 }
	 delete[] encoded_data;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <_ZN10CanManager23encode_frame_big_endianEh+0x7e>
 8001c62:	68b8      	ldr	r0, [r7, #8]
 8001c64:	f002 feeb 	bl	8004a3e <_ZdaPv>
}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_ZN10CanManager13stopAllMotorsEv>:

/////////////////////////////////////////////////////////////////////

void CanManager::stopAllMotors(){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	uint8_t* data = (uint8_t*)calloc(8, sizeof(uint8_t)); // create array[8] and fill with 0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	2008      	movs	r0, #8
 8001c7c:	f003 fc10 	bl	80054a0 <calloc>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]
	fill_frame(data);
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fef6 	bl	8001a78 <_ZN10CanManager10fill_frameEPh>
	sendMsg(VELOCITY);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff0f 	bl	8001ab2 <_ZN10CanManager7sendMsgENS_9SEND_MODEE>
	free(data);
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f003 fc4b 	bl	8005530 <free>

}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <_ZN10CanManager12hal_can_sendEth>:


void CanManager::hal_can_send(uint16_t frame_id, uint8_t dlc){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	707b      	strb	r3, [r7, #1]
	canMsgTx.header.DLC = (uint32_t)dlc;
 8001cb4:	787a      	ldrb	r2, [r7, #1]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	665a      	str	r2, [r3, #100]	; 0x64
	canMsgTx.header.StdId = (uint32_t)frame_id;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
	HAL_CAN_AddTxMessage(&hcan, &(canMsgTx.header),canMsgTx.data,&(canMsgTx.mailbox));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	336c      	adds	r3, #108	; 0x6c
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <_ZN10CanManager12hal_can_sendEth+0x3c>)
 8001cd2:	f001 fc89 	bl	80035e8 <HAL_CAN_AddTxMessage>

}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000298 	.word	0x20000298

08001ce4 <_ZN10CanManager19hal_can_filter_initEv>:

void CanManager::hal_can_filter_init(void){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	hcan_filter.FilterBank = 0;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	621a      	str	r2, [r3, #32]
	hcan_filter.FilterIdHigh = 0x0000;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
	hcan_filter.FilterIdLow = 0x0000;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
	hcan_filter.FilterMaskIdHigh = 0x0000;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
	hcan_filter.FilterMaskIdLow = 0x0000;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
	hcan_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
	hcan_filter.FilterActivation = ENABLE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
	hcan_filter.SlaveStartFilterBank = 14;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	220e      	movs	r2, #14
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4803      	ldr	r0, [pc, #12]	; (8001d3c <_ZN10CanManager19hal_can_filter_initEv+0x58>)
 8001d30:	f001 fbc3 	bl	80034ba <HAL_CAN_ConfigFilter>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000298 	.word	0x20000298

08001d40 <_ZN10CanManagerC1Ev>:
CanManager::CanManager() {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <_ZN10CanManagerC1Ev+0x1c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	601a      	str	r2, [r3, #0]

}
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	080057a4 	.word	0x080057a4

08001d60 <_ZN10CanManagerD1Ev>:

CanManager::~CanManager() {
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <_ZN10CanManagerD1Ev+0x1c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	080057a4 	.word	0x080057a4

08001d80 <_ZN10CanManagerD0Ev>:
CanManager::~CanManager() {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
}
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffe9 	bl	8001d60 <_ZN10CanManagerD1Ev>
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f002 fe53 	bl	8004a3a <_ZdlPv>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <_Z41__static_initialization_and_destruction_0ii>:
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10c      	bne.n	8001dca <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d107      	bne.n	8001dca <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanManager canManager;
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001dbc:	f7ff ffc0 	bl	8001d40 <_ZN10CanManagerC1Ev>
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001dc2:	4906      	ldr	r1, [pc, #24]	; (8001ddc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001dc6:	f002 fe3c 	bl	8004a42 <__aeabi_atexit>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000098 	.word	0x20000098
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	08001d61 	.word	0x08001d61

08001de0 <_GLOBAL__sub_I_canManager>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff ffd9 	bl	8001da0 <_Z41__static_initialization_and_destruction_0ii>
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <_ZN3JoyC1Ev>:

#include <Joy.h>



Joy::Joy(): v_max(0), v_min(0), v_neutral(0),
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
		    bit_resolution(0), v_ref(0),
		    neutral_error(0){}
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <_ZN3JoyC1Ev+0x4c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	080057cc 	.word	0x080057cc

08001e58 <_ZN3JoyD1Ev>:

Joy::~Joy() {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <_ZN3JoyD1Ev+0x1c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	080057cc 	.word	0x080057cc

08001e78 <_ZN3JoyD0Ev>:
Joy::~Joy() {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
}
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe9 	bl	8001e58 <_ZN3JoyD1Ev>
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f002 fdd7 	bl	8004a3a <_ZdlPv>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_ZN3Joy4initEfffhff>:

void Joy::init(float max, float min, float neutral, uint8_t res, float ref, float n_err){
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	603b      	str	r3, [r7, #0]
	v_max = max;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	61da      	str	r2, [r3, #28]
	v_min = min;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	621a      	str	r2, [r3, #32]
	v_neutral = neutral;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
	bit_resolution = res;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	7e3a      	ldrb	r2, [r7, #24]
 8001eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	v_ref = ref;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
	neutral_error = n_err;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34
	v_max_normalized = v_max - v_neutral;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f7fe f9b3 	bl	8000240 <__aeabi_fsub>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	609a      	str	r2, [r3, #8]
	v_min_normalized = v_min - v_neutral;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	4619      	mov	r1, r3
 8001eec:	4610      	mov	r0, r2
 8001eee:	f7fe f9a7 	bl	8000240 <__aeabi_fsub>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	60da      	str	r2, [r3, #12]
	max_number_levels = (2 << (bit_resolution-1));
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f00:	3b01      	subs	r3, #1
 8001f02:	2202      	movs	r2, #2
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30

}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_ZN3Joy14calculate_dataEm>:
void Joy::calculate_data(uint32_t raw){
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
	convert_adc_value(raw);
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f807 	bl	8001f36 <_ZN3Joy17convert_adc_valueEm>
	calculate_joy_data();
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f82d 	bl	8001f88 <_ZN3Joy18calculate_joy_dataEv>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_ZN3Joy17convert_adc_valueEm>:

void Joy::convert_adc_value(uint32_t raw){
 8001f36:	b590      	push	{r4, r7, lr}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
	raw_data = raw;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	605a      	str	r2, [r3, #4]
	converted_data = ( (float)raw_data * v_ref ) / (float)max_number_levels;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fa2a 	bl	80003a4 <__aeabi_ui2f>
 8001f50:	4602      	mov	r2, r0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7fe fa7b 	bl	8000454 <__aeabi_fmul>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461c      	mov	r4, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fa1c 	bl	80003a4 <__aeabi_ui2f>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7fe fb23 	bl	80005bc <__aeabi_fdiv>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	611a      	str	r2, [r3, #16]

}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
	...

08001f88 <_ZN3Joy18calculate_joy_dataEv>:
void Joy::calculate_joy_data(void){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	if(is_joy_near_neautral()){
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f873 	bl	800207c <_ZN3Joy20is_joy_near_neautralEv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <_ZN3Joy18calculate_joy_dataEv+0x2e>
		percentage_value = 0.0f;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
		sign = POSITIVE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	761a      	strb	r2, [r3, #24]
		return;
 8001fb4:	e05d      	b.n	8002072 <_ZN3Joy18calculate_joy_dataEv+0xea>
	}
	if (converted_data > v_max){
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f7fe fc03 	bl	80007cc <__aeabi_fcmpgt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <_ZN3Joy18calculate_joy_dataEv+0x52>
		percentage_value = 100.0f;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <_ZN3Joy18calculate_joy_dataEv+0xf0>)
 8001fd0:	615a      	str	r2, [r3, #20]
		sign = POSITIVE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	761a      	strb	r2, [r3, #24]
		return;
 8001fd8:	e04b      	b.n	8002072 <_ZN3Joy18calculate_joy_dataEv+0xea>
	}

	if(converted_data >= v_neutral){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f7fe fbe7 	bl	80007b8 <__aeabi_fcmpge>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <_ZN3Joy18calculate_joy_dataEv+0xaa>
		percentage_value = 100 * fabs((converted_data - v_neutral) / v_max_normalized );
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f7fe f920 	bl	8000240 <__aeabi_fsub>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f7fe fad6 	bl	80005bc <__aeabi_fdiv>
 8002010:	4603      	mov	r3, r0
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff feec 	bl	8001df0 <_ZSt4fabsf>
 8002018:	4603      	mov	r3, r0
 800201a:	4917      	ldr	r1, [pc, #92]	; (8002078 <_ZN3Joy18calculate_joy_dataEv+0xf0>)
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa19 	bl	8000454 <__aeabi_fmul>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	615a      	str	r2, [r3, #20]
		sign = POSITIVE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	761a      	strb	r2, [r3, #24]
 8002030:	e01f      	b.n	8002072 <_ZN3Joy18calculate_joy_dataEv+0xea>
	}else{
		percentage_value = 100 * fabs((converted_data - v_neutral) / v_min_normalized );
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f7fe f8ff 	bl	8000240 <__aeabi_fsub>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f7fe fab5 	bl	80005bc <__aeabi_fdiv>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fecb 	bl	8001df0 <_ZSt4fabsf>
 800205a:	4603      	mov	r3, r0
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <_ZN3Joy18calculate_joy_dataEv+0xf0>)
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe f9f8 	bl	8000454 <__aeabi_fmul>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	615a      	str	r2, [r3, #20]
		sign = NEGATIVE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	761a      	strb	r2, [r3, #24]
	}


}
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	42c80000 	.word	0x42c80000

0800207c <_ZN3Joy20is_joy_near_neautralEv>:
uint8_t Joy::is_joy_near_neautral(){
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	return (converted_data > (v_neutral - neutral_error) &&
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691c      	ldr	r4, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f7fe f8d4 	bl	8000240 <__aeabi_fsub>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	4620      	mov	r0, r4
 800209e:	f7fe fb95 	bl	80007cc <__aeabi_fcmpgt>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <_ZN3Joy20is_joy_near_neautralEv+0x54>
		   converted_data < (v_neutral + neutral_error));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691c      	ldr	r4, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f7fe f8c4 	bl	8000244 <__addsf3>
 80020bc:	4603      	mov	r3, r0
	return (converted_data > (v_neutral - neutral_error) &&
 80020be:	4619      	mov	r1, r3
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7fe fb65 	bl	8000790 <__aeabi_fcmplt>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <_ZN3Joy20is_joy_near_neautralEv+0x54>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN3Joy20is_joy_near_neautralEv+0x56>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}

080020da <_ZNK3Joy7getSignEv>:
	Joy();
	virtual ~Joy();

	void init(float max, float min, float neutral, uint8_t res, float ref, float n_err);
	void calculate_data(uint32_t raw);
	uint8_t getSign() const{ return sign;};
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7e1b      	ldrb	r3, [r3, #24]
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <_ZNK3Joy13getPercentageEv>:
	float getPercentage() const {return percentage_value;};
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
	...

08002108 <_ZN8Joystick4initEv>:

#include "Joystick.h"

Joystick joystick;

void Joystick::init(void){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8002110:	4808      	ldr	r0, [pc, #32]	; (8002134 <_ZN8Joystick4initEv+0x2c>)
 8002112:	f000 ffbb 	bl	800308c <HAL_ADC_Start>
    HAL_ADC_Start_DMA(&hadc1,adc_raw_values,NUMBER_OF_CHANNELS);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	33e0      	adds	r3, #224	; 0xe0
 800211a:	2204      	movs	r2, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <_ZN8Joystick4initEv+0x2c>)
 8002120:	f001 f816 	bl	8003150 <HAL_ADC_Start_DMA>

    addJoy();
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f807 	bl	8002138 <_ZN8Joystick6addJoyEv>

}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000224 	.word	0x20000224

08002138 <_ZN8Joystick6addJoyEv>:

void Joystick::addJoy(){
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af04      	add	r7, sp, #16
 800213e:	6078      	str	r0, [r7, #4]
    axis[X_AXIS_INDEX].init( V_MAX_X_AXIS, V_MIN_X_AXIS, V_NEUTRAL_X_AXIS,
 8002140:	6878      	ldr	r0, [r7, #4]
    				ADC_BIT_RESOLUTION, ADC_REFERENCE_VOLTAGE, MEASUREMENT_ERROR);
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <_ZN8Joystick6addJoyEv+0x44>)
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <_ZN8Joystick6addJoyEv+0x48>)
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	230c      	movs	r3, #12
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <_ZN8Joystick6addJoyEv+0x4c>)
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <_ZN8Joystick6addJoyEv+0x50>)
 8002152:	490e      	ldr	r1, [pc, #56]	; (800218c <_ZN8Joystick6addJoyEv+0x54>)
 8002154:	f7ff fe9f 	bl	8001e96 <_ZN3Joy4initEfffhff>

    axis[Y_AXIS_INDEX].init( V_MAX_Y_AXIS, V_MIN_Y_AXIS, V_NEUTRAL_Y_AXIS,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f103 0038 	add.w	r0, r3, #56	; 0x38
        				ADC_BIT_RESOLUTION, ADC_REFERENCE_VOLTAGE, MEASUREMENT_ERROR);
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <_ZN8Joystick6addJoyEv+0x44>)
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_ZN8Joystick6addJoyEv+0x48>)
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	230c      	movs	r3, #12
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <_ZN8Joystick6addJoyEv+0x4c>)
 800216c:	4a06      	ldr	r2, [pc, #24]	; (8002188 <_ZN8Joystick6addJoyEv+0x50>)
 800216e:	4907      	ldr	r1, [pc, #28]	; (800218c <_ZN8Joystick6addJoyEv+0x54>)
 8002170:	f7ff fe91 	bl	8001e96 <_ZN3Joy4initEfffhff>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	3d75c28f 	.word	0x3d75c28f
 8002180:	40533333 	.word	0x40533333
 8002184:	3f99999a 	.word	0x3f99999a
 8002188:	3dcccccd 	.word	0x3dcccccd
 800218c:	40400000 	.word	0x40400000

08002190 <_ZN8Joystick18update_measurmentsEv>:

void Joystick::update_measurments(void){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	axis[X_AXIS_INDEX].calculate_data(adc_raw_values[X_AXIS_ADC_CHANNEL]);
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f7ff feb7 	bl	8001f16 <_ZN3Joy14calculate_dataEm>
	axis[Y_AXIS_INDEX].calculate_data(adc_raw_values[Y_AXIS_ADC_CHANNEL]);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f7ff fead 	bl	8001f16 <_ZN3Joy14calculate_dataEm>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZN8Joystick7getSignENS_8Axis_numE>:

uint8_t Joystick::getSign(Axis_num ax){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
	return axis[ax].getSign();
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff7b 	bl	80020da <_ZNK3Joy7getSignEv>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_ZN8Joystick13getPercentageENS_8Axis_numE>:
float Joystick::getPercentage(Axis_num ax){
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	70fb      	strb	r3, [r7, #3]
	return axis[ax].getPercentage();
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff71 	bl	80020f0 <_ZNK3Joy13getPercentageEv>
 800220e:	4603      	mov	r3, r0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZN8JoystickC1Ev>:

Joystick::Joystick() {
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	687d      	ldr	r5, [r7, #4]
 8002222:	2403      	movs	r4, #3
 8002224:	462e      	mov	r6, r5
 8002226:	2c00      	cmp	r4, #0
 8002228:	db05      	blt.n	8002236 <_ZN8JoystickC1Ev+0x1e>
 800222a:	4630      	mov	r0, r6
 800222c:	f7ff fdec 	bl	8001e08 <_ZN3JoyC1Ev>
 8002230:	3638      	adds	r6, #56	; 0x38
 8002232:	3c01      	subs	r4, #1
 8002234:	e7f7      	b.n	8002226 <_ZN8JoystickC1Ev+0xe>

}
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	e013      	b.n	8002262 <_ZN8JoystickC1Ev+0x4a>
 800223a:	2d00      	cmp	r5, #0
 800223c:	d00f      	beq.n	800225e <_ZN8JoystickC1Ev+0x46>
Joystick::Joystick() {
 800223e:	f1c4 0303 	rsb	r3, r4, #3
 8002242:	461a      	mov	r2, r3
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	18ec      	adds	r4, r5, r3
 800224e:	42ac      	cmp	r4, r5
 8002250:	d005      	beq.n	800225e <_ZN8JoystickC1Ev+0x46>
 8002252:	3c38      	subs	r4, #56	; 0x38
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4620      	mov	r0, r4
 800225a:	4798      	blx	r3
 800225c:	e7f7      	b.n	800224e <_ZN8JoystickC1Ev+0x36>
 800225e:	f002 fbf7 	bl	8004a50 <__cxa_end_cleanup>
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800226a <_ZN8JoystickD1Ev>:

Joystick::~Joystick() {
 800226a:	b590      	push	{r4, r7, lr}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <_ZN8JoystickD1Ev+0x26>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	42a3      	cmp	r3, r4
 8002282:	d005      	beq.n	8002290 <_ZN8JoystickD1Ev+0x26>
 8002284:	3c38      	subs	r4, #56	; 0x38
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4620      	mov	r0, r4
 800228c:	4798      	blx	r3
 800228e:	e7f6      	b.n	800227e <_ZN8JoystickD1Ev+0x14>
	// TODO Auto-generated destructor stub
}
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}
	...

0800229c <_Z41__static_initialization_and_destruction_0ii>:
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10c      	bne.n	80022c6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d107      	bne.n	80022c6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Joystick joystick;
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80022b8:	f7ff ffae 	bl	8002218 <_ZN8JoystickC1Ev>
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80022be:	4906      	ldr	r1, [pc, #24]	; (80022d8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80022c2:	f002 fbbe 	bl	8004a42 <__aeabi_atexit>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000110 	.word	0x20000110
 80022d4:	20000000 	.word	0x20000000
 80022d8:	0800226b 	.word	0x0800226b

080022dc <_GLOBAL__sub_I_joystick>:
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
 80022e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7ff ffd9 	bl	800229c <_Z41__static_initialization_and_destruction_0ii>
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZN11ModeManager4initEv>:

#include "ModeManager.h"

ModeManager modeManager;

void ModeManager::init(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	driveMode = ENABLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	715a      	strb	r2, [r3, #5]
	RCmode = MODE_JOYSICK;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	719a      	strb	r2, [r3, #6]
	HAL_TIM_Base_Start_IT(&PROCESS_TIMER);
 8002300:	4804      	ldr	r0, [pc, #16]	; (8002314 <_ZN11ModeManager4initEv+0x28>)
 8002302:	f002 f91d 	bl	8004540 <HAL_TIM_Base_Start_IT>
	isIdleTimerON = 0;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	711a      	strb	r2, [r3, #4]
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000300 	.word	0x20000300

08002318 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE>:
uint8_t ModeManager::velocityPermission(MSG_ORIGIN origin){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
	resetIdleTimer();
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f8c3 	bl	80024b0 <_ZN11ModeManager14resetIdleTimerEv>
	if (getDriveMode() == ENABLE){
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8d0 	bl	80024d0 <_ZN11ModeManager12getDriveModeEv>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	bf0c      	ite	eq
 8002336:	2301      	moveq	r3, #1
 8002338:	2300      	movne	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d027      	beq.n	8002390 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x78>
		if(origin == RC && (getRCmode() == MODE_ACRO ||
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4a>
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8cd 	bl	80024e6 <_ZN11ModeManager9getRCmodeEv>
 800234c:	4603      	mov	r3, r0
 800234e:	2b03      	cmp	r3, #3
 8002350:	d005      	beq.n	800235e <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x46>
  	   	   	     	 	 	getRCmode() == MODE_SEMI) ){
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8c7 	bl	80024e6 <_ZN11ModeManager9getRCmodeEv>
 8002358:	4603      	mov	r3, r0
		if(origin == RC && (getRCmode() == MODE_ACRO ||
 800235a:	2b02      	cmp	r3, #2
 800235c:	d101      	bne.n	8002362 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4a>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4c>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x54>
			return 1;
 8002368:	2301      	movs	r3, #1
 800236a:	e012      	b.n	8002392 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS) ){
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6a>
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8b7 	bl	80024e6 <_ZN11ModeManager9getRCmodeEv>
 8002378:	4603      	mov	r3, r0
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6a>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6c>
 8002382:	2300      	movs	r3, #0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x74>
			return 1;
 8002388:	2301      	movs	r3, #1
 800238a:	e002      	b.n	8002392 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else return 0;
 800238c:	2300      	movs	r3, #0
 800238e:	e000      	b.n	8002392 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
	}
	else return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE>:

uint8_t ModeManager::turnPermission(MSG_ORIGIN origin){
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
	resetIdleTimer();
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f882 	bl	80024b0 <_ZN11ModeManager14resetIdleTimerEv>
	if (getDriveMode() == ENABLE){
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f88f 	bl	80024d0 <_ZN11ModeManager12getDriveModeEv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d027      	beq.n	8002412 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x78>
		if(origin == RC && getRCmode() == MODE_ACRO){
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x3e>
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f88c 	bl	80024e6 <_ZN11ModeManager9getRCmodeEv>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d101      	bne.n	80023d8 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x3e>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x40>
 80023d8:	2300      	movs	r3, #0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x48>
			return 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	e018      	b.n	8002414 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS ||
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d10d      	bne.n	8002404 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6a>
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f87c 	bl	80024e6 <_ZN11ModeManager9getRCmodeEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d005      	beq.n	8002400 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x66>
				   	   	   	     getRCmode() == MODE_SEMI) ){
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f876 	bl	80024e6 <_ZN11ModeManager9getRCmodeEv>
 80023fa:	4603      	mov	r3, r0
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS ||
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d101      	bne.n	8002404 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6a>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6c>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x74>
			return 1;
 800240a:	2301      	movs	r3, #1
 800240c:	e002      	b.n	8002414 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else return 0;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
	}
	else return 0;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE>:


void ModeManager::statusUpdate(RC_MODE RCstatus, DRIVE_MODE drivestatus){
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
 8002428:	4613      	mov	r3, r2
 800242a:	70bb      	strb	r3, [r7, #2]
	RCmode = RCstatus;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	719a      	strb	r2, [r3, #6]
	driveMode = drivestatus;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	78ba      	ldrb	r2, [r7, #2]
 8002436:	715a      	strb	r2, [r3, #5]
	if (RCstatus !=MODE_JOYSICK){
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE+0x2a>
		startIdleTimer();
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f808 	bl	8002454 <_ZN11ModeManager14startIdleTimerEv>
	}
	else stopIdleTimer();
}
 8002444:	e002      	b.n	800244c <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE+0x30>
	else stopIdleTimer();
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f818 	bl	800247c <_ZN11ModeManager13stopIdleTimerEv>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN11ModeManager14startIdleTimerEv>:

void ModeManager::startIdleTimer(){
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	if(!isIdleTimerON){
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	791b      	ldrb	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d105      	bne.n	8002470 <_ZN11ModeManager14startIdleTimerEv+0x1c>
		HAL_TIM_Base_Start_IT(&IDLE_TIMER);
 8002464:	4804      	ldr	r0, [pc, #16]	; (8002478 <_ZN11ModeManager14startIdleTimerEv+0x24>)
 8002466:	f002 f86b 	bl	8004540 <HAL_TIM_Base_Start_IT>
		isIdleTimerON=1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	711a      	strb	r2, [r3, #4]
	}
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200002c0 	.word	0x200002c0

0800247c <_ZN11ModeManager13stopIdleTimerEv>:

void ModeManager::stopIdleTimer(){
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	if(isIdleTimerON){
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <_ZN11ModeManager13stopIdleTimerEv+0x28>
		HAL_TIM_Base_Stop_IT(&IDLE_TIMER);
 800248c:	4807      	ldr	r0, [pc, #28]	; (80024ac <_ZN11ModeManager13stopIdleTimerEv+0x30>)
 800248e:	f002 f867 	bl	8004560 <HAL_TIM_Base_Stop_IT>
		resetIdleTimer();
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f80c 	bl	80024b0 <_ZN11ModeManager14resetIdleTimerEv>
		RCmode = MODE_JOYSICK;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	719a      	strb	r2, [r3, #6]
		isIdleTimerON = 0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	711a      	strb	r2, [r3, #4]
	}
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200002c0 	.word	0x200002c0

080024b0 <_ZN11ModeManager14resetIdleTimerEv>:
void ModeManager::resetIdleTimer(){
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&IDLE_TIMER, 0);
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <_ZN11ModeManager14resetIdleTimerEv+0x1c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200002c0 	.word	0x200002c0

080024d0 <_ZN11ModeManager12getDriveModeEv>:

ModeManager::DRIVE_MODE ModeManager::getDriveMode(){
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	return driveMode;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	795b      	ldrb	r3, [r3, #5]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <_ZN11ModeManager9getRCmodeEv>:
ModeManager::RC_MODE ModeManager::getRCmode(){
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	return RCmode;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	799b      	ldrb	r3, [r3, #6]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <_ZN11ModeManager14isJoystickModeEv>:


uint8_t ModeManager::isJoystickMode(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	if (getDriveMode() == ENABLE &&
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ffe3 	bl	80024d0 <_ZN11ModeManager12getDriveModeEv>
 800250a:	4603      	mov	r3, r0
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <_ZN11ModeManager14isJoystickModeEv+0x24>
		getRCmode() == MODE_JOYSICK) return 1;
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ffe8 	bl	80024e6 <_ZN11ModeManager9getRCmodeEv>
 8002516:	4603      	mov	r3, r0
	if (getDriveMode() == ENABLE &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <_ZN11ModeManager14isJoystickModeEv+0x24>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <_ZN11ModeManager14isJoystickModeEv+0x26>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <_ZN11ModeManager14isJoystickModeEv+0x2e>
		getRCmode() == MODE_JOYSICK) return 1;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <_ZN11ModeManager14isJoystickModeEv+0x30>
	else return 0;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZN11ModeManagerC1Ev>:

ModeManager::ModeManager() {
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <_ZN11ModeManagerC1Ev+0x1c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	080057ec 	.word	0x080057ec

08002554 <_ZN11ModeManagerD1Ev>:

ModeManager::~ModeManager() {
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <_ZN11ModeManagerD1Ev+0x1c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	080057ec 	.word	0x080057ec

08002574 <_ZN11ModeManagerD0Ev>:
ModeManager::~ModeManager() {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
}
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ffe9 	bl	8002554 <_ZN11ModeManagerD1Ev>
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f002 fa59 	bl	8004a3a <_ZdlPv>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <_Z41__static_initialization_and_destruction_0ii>:
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10c      	bne.n	80025be <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d107      	bne.n	80025be <_Z41__static_initialization_and_destruction_0ii+0x2a>
ModeManager modeManager;
 80025ae:	4806      	ldr	r0, [pc, #24]	; (80025c8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80025b0:	f7ff ffc0 	bl	8002534 <_ZN11ModeManagerC1Ev>
 80025b4:	4a05      	ldr	r2, [pc, #20]	; (80025cc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80025b6:	4906      	ldr	r1, [pc, #24]	; (80025d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80025b8:	4803      	ldr	r0, [pc, #12]	; (80025c8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80025ba:	f002 fa42 	bl	8004a42 <__aeabi_atexit>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000200 	.word	0x20000200
 80025cc:	20000000 	.word	0x20000000
 80025d0:	08002555 	.word	0x08002555

080025d4 <_GLOBAL__sub_I_modeManager>:
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff ffd9 	bl	8002594 <_Z41__static_initialization_and_destruction_0ii>
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80025e4:	4824      	ldr	r0, [pc, #144]	; (8002678 <MX_ADC1_Init+0x94>)
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <MX_ADC1_Init+0x98>)
{
 80025e8:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 80025ea:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025f2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80025f6:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025f8:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025fa:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 80025fc:	2304      	movs	r3, #4
{
 80025fe:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002600:	9401      	str	r4, [sp, #4]
 8002602:	9402      	str	r4, [sp, #8]
 8002604:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002606:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002608:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800260a:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 800260c:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800260e:	f000 fe4f 	bl	80032b0 <HAL_ADC_Init>
 8002612:	b108      	cbz	r0, 8002618 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8002614:	f000 fa5e 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002618:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800261a:	a901      	add	r1, sp, #4
 800261c:	4816      	ldr	r0, [pc, #88]	; (8002678 <MX_ADC1_Init+0x94>)
  sConfig.Channel = ADC_CHANNEL_0;
 800261e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002620:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002622:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002624:	f000 fc76 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8002628:	b108      	cbz	r0, 800262e <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 800262a:	f000 fa53 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800262e:	2301      	movs	r3, #1
 8002630:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002632:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002634:	a901      	add	r1, sp, #4
 8002636:	4810      	ldr	r0, [pc, #64]	; (8002678 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002638:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800263a:	f000 fc6b 	bl	8002f14 <HAL_ADC_ConfigChannel>
 800263e:	b108      	cbz	r0, 8002644 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8002640:	f000 fa48 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002644:	230e      	movs	r3, #14
 8002646:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002648:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800264a:	a901      	add	r1, sp, #4
 800264c:	480a      	ldr	r0, [pc, #40]	; (8002678 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800264e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002650:	f000 fc60 	bl	8002f14 <HAL_ADC_ConfigChannel>
 8002654:	b108      	cbz	r0, 800265a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8002656:	f000 fa3d 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800265a:	230f      	movs	r3, #15
 800265c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800265e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_ADC1_Init+0x94>)
 8002662:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002666:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002668:	f000 fc54 	bl	8002f14 <HAL_ADC_ConfigChannel>
 800266c:	b108      	cbz	r0, 8002672 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800266e:	f000 fa31 	bl	8002ad4 <Error_Handler>
  }

}
 8002672:	b005      	add	sp, #20
 8002674:	bd30      	pop	{r4, r5, pc}
 8002676:	bf00      	nop
 8002678:	20000224 	.word	0x20000224
 800267c:	40012400 	.word	0x40012400

08002680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	2210      	movs	r2, #16
{
 8002682:	b530      	push	{r4, r5, lr}
 8002684:	4605      	mov	r5, r0
 8002686:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	eb0d 0002 	add.w	r0, sp, r2
 800268c:	2100      	movs	r1, #0
 800268e:	f002 ff57 	bl	8005540 <memset>
  if(adcHandle->Instance==ADC1)
 8002692:	682a      	ldr	r2, [r5, #0]
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_ADC_MspInit+0xac>)
 8002696:	429a      	cmp	r2, r3
 8002698:	d145      	bne.n	8002726 <HAL_ADC_MspInit+0xa6>
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 800269a:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800269c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80026a0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a8:	619a      	str	r2, [r3, #24]
 80026aa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	4820      	ldr	r0, [pc, #128]	; (8002730 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ae:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80026b2:	9201      	str	r2, [sp, #4]
 80026b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	f042 0204 	orr.w	r2, r2, #4
 80026bc:	619a      	str	r2, [r3, #24]
 80026be:	699a      	ldr	r2, [r3, #24]
 80026c0:	f002 0204 	and.w	r2, r2, #4
 80026c4:	9202      	str	r2, [sp, #8]
 80026c6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	f042 0210 	orr.w	r2, r2, #16
 80026ce:	619a      	str	r2, [r3, #24]
 80026d0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 80026d2:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	9303      	str	r3, [sp, #12]
 80026da:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026dc:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026de:	f001 fb27 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 80026e2:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e4:	4813      	ldr	r0, [pc, #76]	; (8002734 <HAL_ADC_MspInit+0xb4>)
 80026e6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 80026e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ea:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ec:	f001 fb20 	bl	8003d30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026f0:	4c11      	ldr	r4, [pc, #68]	; (8002738 <HAL_ADC_MspInit+0xb8>)
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026f4:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 80026f6:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026f8:	2300      	movs	r3, #0
 80026fa:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026fc:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002706:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800270c:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800270e:	2320      	movs	r3, #32
 8002710:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002716:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002718:	f001 f9b0 	bl	8003a7c <HAL_DMA_Init>
 800271c:	b108      	cbz	r0, 8002722 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800271e:	f000 f9d9 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002722:	622c      	str	r4, [r5, #32]
 8002724:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002726:	b009      	add	sp, #36	; 0x24
 8002728:	bd30      	pop	{r4, r5, pc}
 800272a:	bf00      	nop
 800272c:	40012400 	.word	0x40012400
 8002730:	40010800 	.word	0x40010800
 8002734:	40011000 	.word	0x40011000
 8002738:	20000254 	.word	0x20000254
 800273c:	40020008 	.word	0x40020008

08002740 <MX_CAN_Init>:

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002740:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Instance = CAN1;
 8002744:	480e      	ldr	r0, [pc, #56]	; (8002780 <MX_CAN_Init+0x40>)
{
 8002746:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 5;
 8002748:	f04f 0e05 	mov.w	lr, #5
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800274c:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800274e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.Prescaler = 5;
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_CAN_Init+0x44>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002754:	6142      	str	r2, [r0, #20]
  hcan.Init.Prescaler = 5;
 8002756:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
 800275a:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800275c:	2300      	movs	r3, #0
  hcan.Init.AutoRetransmission = ENABLE;
 800275e:	76c2      	strb	r2, [r0, #27]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002760:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002762:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002764:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002766:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002768:	7683      	strb	r3, [r0, #26]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800276a:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800276c:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800276e:	f000 fe29 	bl	80033c4 <HAL_CAN_Init>
 8002772:	b118      	cbz	r0, 800277c <MX_CAN_Init+0x3c>
  {
    Error_Handler();
  }

}
 8002774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002778:	f000 b9ac 	b.w	8002ad4 <Error_Handler>
 800277c:	bd08      	pop	{r3, pc}
 800277e:	bf00      	nop
 8002780:	20000298 	.word	0x20000298
 8002784:	40006400 	.word	0x40006400

08002788 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002788:	b510      	push	{r4, lr}
 800278a:	4604      	mov	r4, r0
 800278c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278e:	2210      	movs	r2, #16
 8002790:	2100      	movs	r1, #0
 8002792:	a802      	add	r0, sp, #8
 8002794:	f002 fed4 	bl	8005540 <memset>
  if(canHandle->Instance==CAN1)
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_CAN_MspInit+0x98>)
 800279c:	429a      	cmp	r2, r3
 800279e:	d13d      	bne.n	800281c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027a0:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80027a4:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80027a6:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027a8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80027ac:	61da      	str	r2, [r3, #28]
 80027ae:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80027b0:	481c      	ldr	r0, [pc, #112]	; (8002824 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027b2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80027b6:	9200      	str	r2, [sp, #0]
 80027b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	f042 0204 	orr.w	r2, r2, #4
 80027c0:	619a      	str	r2, [r3, #24]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 80027cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027d0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f001 faad 	bl	8003d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 80027d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e0:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80027e2:	a902      	add	r1, sp, #8
 80027e4:	480f      	ldr	r0, [pc, #60]	; (8002824 <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f001 faa2 	bl	8003d30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2013      	movs	r0, #19
 80027f0:	4611      	mov	r1, r2
 80027f2:	f001 f8eb 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80027f6:	2013      	movs	r0, #19
 80027f8:	f001 f91c 	bl	8003a34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2014      	movs	r0, #20
 8002800:	4611      	mov	r1, r2
 8002802:	f001 f8e3 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002806:	2014      	movs	r0, #20
 8002808:	f001 f914 	bl	8003a34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2015      	movs	r0, #21
 8002810:	4611      	mov	r1, r2
 8002812:	f001 f8db 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002816:	2015      	movs	r0, #21
 8002818:	f001 f90c 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800281c:	b006      	add	sp, #24
 800281e:	bd10      	pop	{r4, pc}
 8002820:	40006400 	.word	0x40006400
 8002824:	40010800 	.word	0x40010800

08002828 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <MX_DMA_Init+0x4c>)
{
 800282a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800282c:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800282e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002838:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800283a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002844:	f001 f8c2 	bl	80039cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002848:	200b      	movs	r0, #11
 800284a:	f001 f8f3 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	200e      	movs	r0, #14
 8002852:	4611      	mov	r1, r2
 8002854:	f001 f8ba 	bl	80039cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002858:	200e      	movs	r0, #14
 800285a:	f001 f8eb 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	200f      	movs	r0, #15
 8002862:	4611      	mov	r1, r2
 8002864:	f001 f8b2 	bl	80039cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002868:	200f      	movs	r0, #15
 800286a:	f001 f8e3 	bl	8003a34 <HAL_NVIC_EnableIRQ>

}
 800286e:	b003      	add	sp, #12
 8002870:	f85d fb04 	ldr.w	pc, [sp], #4
 8002874:	40021000 	.word	0x40021000

08002878 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f04f 0810 	mov.w	r8, #16
{
 8002880:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002882:	4642      	mov	r2, r8
 8002884:	2100      	movs	r1, #0
 8002886:	eb0d 0008 	add.w	r0, sp, r8
 800288a:	f002 fe59 	bl	8005540 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <MX_GPIO_Init+0x138>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002890:	4f48      	ldr	r7, [pc, #288]	; (80029b4 <MX_GPIO_Init+0x13c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002892:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 8002894:	4d48      	ldr	r5, [pc, #288]	; (80029b8 <MX_GPIO_Init+0x140>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	ea42 0208 	orr.w	r2, r2, r8
 800289a:	619a      	str	r2, [r3, #24]
 800289c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800289e:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a0:	ea02 0208 	and.w	r2, r2, r8
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80028aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ae:	f042 0220 	orr.w	r2, r2, #32
 80028b2:	619a      	str	r2, [r3, #24]
 80028b4:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
                          |BUTTON_4_Pin|BUTTON_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b8:	f002 0220 	and.w	r2, r2, #32
 80028bc:	9201      	str	r2, [sp, #4]
 80028be:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c2:	f04f 0a01 	mov.w	sl, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	f042 0204 	orr.w	r2, r2, #4
 80028ca:	619a      	str	r2, [r3, #24]
 80028cc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	f002 0204 	and.w	r2, r2, #4
 80028d6:	9202      	str	r2, [sp, #8]
 80028d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PC15 PC0 PC1 PC2 
                           PC3 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028dc:	2603      	movs	r6, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	f042 0208 	orr.w	r2, r2, #8
 80028e2:	619a      	str	r2, [r3, #24]
 80028e4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80028f0:	f001 fb0a 	bl	8003f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 80028f4:	4628      	mov	r0, r5
 80028f6:	2201      	movs	r2, #1
 80028f8:	2104      	movs	r1, #4
 80028fa:	f001 fb05 	bl	8003f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BL_CTRL_Pin|LED_Pin|GPIO18_Pin|GPIO4_Pin, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	4628      	mov	r0, r5
 8002902:	f248 1128 	movw	r1, #33064	; 0x8128
 8002906:	f001 faff 	bl	8003f08 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
 800290a:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	eb0d 0108 	add.w	r1, sp, r8
 8002912:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
 8002914:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002916:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291a:	f001 fa09 	bl	8003d30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800291e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002922:	eb0d 0108 	add.w	r1, sp, r8
 8002926:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8002928:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002934:	f001 f9fc 	bl	8003d30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002938:	f248 03cf 	movw	r3, #32975	; 0x80cf
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293c:	eb0d 0108 	add.w	r1, sp, r8
 8002940:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002942:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002944:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002946:	f001 f9f3 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = TP_CS_Pin|BL_CTRL_Pin|LED_Pin|GPIO18_Pin 
 800294a:	f248 132c 	movw	r3, #33068	; 0x812c
                          |GPIO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	eb0d 0108 	add.w	r1, sp, r8
 8002952:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TP_CS_Pin|BL_CTRL_Pin|LED_Pin|GPIO18_Pin 
 8002954:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002956:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f001 f9e6 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002964:	eb0d 0108 	add.w	r1, sp, r8
 8002968:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800296a:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002972:	f001 f9dd 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002976:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	eb0d 0108 	add.w	r1, sp, r8
 800297c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800297e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002980:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002982:	f001 f9d5 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8002986:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298a:	eb0d 0108 	add.w	r1, sp, r8
 800298e:	480b      	ldr	r0, [pc, #44]	; (80029bc <MX_GPIO_Init+0x144>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8002990:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002992:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002994:	f001 f9cc 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002998:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800299a:	eb0d 0108 	add.w	r1, sp, r8
 800299e:	4808      	ldr	r0, [pc, #32]	; (80029c0 <MX_GPIO_Init+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029a0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a2:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a4:	f001 f9c4 	bl	8003d30 <HAL_GPIO_Init>

}
 80029a8:	b008      	add	sp, #32
 80029aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40011000 	.word	0x40011000
 80029b8:	40010800 	.word	0x40010800
 80029bc:	40010c00 	.word	0x40010c00
 80029c0:	40011400 	.word	0x40011400

080029c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029c8:	f000 fa44 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029cc:	f000 f81c 	bl	8002a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d0:	f7ff ff52 	bl	8002878 <MX_GPIO_Init>
  MX_DMA_Init();
 80029d4:	f7ff ff28 	bl	8002828 <MX_DMA_Init>
  MX_ADC1_Init();
 80029d8:	f7ff fe04 	bl	80025e4 <MX_ADC1_Init>
  MX_CAN_Init();
 80029dc:	f7ff feb0 	bl	8002740 <MX_CAN_Init>
//  MX_SPI1_Init();
  MX_TIM3_Init();
 80029e0:	f000 f922 	bl	8002c28 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80029e4:	f000 f98a 	bl	8002cfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  joystick.init();
 80029e8:	4804      	ldr	r0, [pc, #16]	; (80029fc <main+0x38>)
 80029ea:	f7ff fb8d 	bl	8002108 <_ZN8Joystick4initEv>
  modeManager.init();
 80029ee:	4804      	ldr	r0, [pc, #16]	; (8002a00 <main+0x3c>)
 80029f0:	f7ff fc7c 	bl	80022ec <_ZN11ModeManager4initEv>
  canManager.init();
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <main+0x40>)
 80029f6:	f7fe feef 	bl	80017d8 <_ZN10CanManager4initEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029fa:	e7fe      	b.n	80029fa <main+0x36>
 80029fc:	20000110 	.word	0x20000110
 8002a00:	20000200 	.word	0x20000200
 8002a04:	20000098 	.word	0x20000098

08002a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b096      	sub	sp, #88	; 0x58
 8002a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a12:	2228      	movs	r2, #40	; 0x28
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fd92 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a40:	2301      	movs	r3, #1
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a44:	2310      	movs	r3, #16
 8002a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8002a50:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8002a54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 fa60 	bl	8003f20 <HAL_RCC_OscConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf14      	ite	ne
 8002a66:	2301      	movne	r3, #1
 8002a68:	2300      	moveq	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002a70:	f000 f830 	bl	8002ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a74:	230f      	movs	r3, #15
 8002a76:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 fc20 	bl	80042d4 <HAL_RCC_ClockConfig>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002aa4:	f000 f816 	bl	8002ad4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 fccc 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ac8:	f000 f804 	bl	8002ad4 <Error_Handler>
  }
}
 8002acc:	bf00      	nop
 8002ace:	3758      	adds	r7, #88	; 0x58
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_MspInit+0x3c>)
{
 8002ae2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	f002 0201 	and.w	r2, r2, #1
 8002af2:	9200      	str	r2, [sp, #0]
 8002af4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002afc:	61da      	str	r2, [r3, #28]
 8002afe:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b00:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b0a:	6853      	ldr	r3, [r2, #4]
 8002b0c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b16:	b002      	add	sp, #8
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010000 	.word	0x40010000

08002b24 <NMI_Handler>:
 8002b24:	4770      	bx	lr

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	e7fe      	b.n	8002b26 <HardFault_Handler>

08002b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b28:	e7fe      	b.n	8002b28 <MemManage_Handler>

08002b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2a:	e7fe      	b.n	8002b2a <BusFault_Handler>

08002b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b2c:	e7fe      	b.n	8002b2c <UsageFault_Handler>

08002b2e <SVC_Handler>:
 8002b2e:	4770      	bx	lr

08002b30 <DebugMon_Handler>:
 8002b30:	4770      	bx	lr

08002b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b32:	4770      	bx	lr

08002b34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b34:	f000 b9a0 	b.w	8002e78 <HAL_IncTick>

08002b38 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b38:	4801      	ldr	r0, [pc, #4]	; (8002b40 <DMA1_Channel1_IRQHandler+0x8>)
 8002b3a:	f001 b81d 	b.w	8003b78 <HAL_DMA_IRQHandler>
 8002b3e:	bf00      	nop
 8002b40:	20000254 	.word	0x20000254

08002b44 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b44:	4801      	ldr	r0, [pc, #4]	; (8002b4c <DMA1_Channel4_IRQHandler+0x8>)
 8002b46:	f001 b817 	b.w	8003b78 <HAL_DMA_IRQHandler>
 8002b4a:	bf00      	nop
 8002b4c:	20000340 	.word	0x20000340

08002b50 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b50:	4801      	ldr	r0, [pc, #4]	; (8002b58 <DMA1_Channel5_IRQHandler+0x8>)
 8002b52:	f001 b811 	b.w	8003b78 <HAL_DMA_IRQHandler>
 8002b56:	bf00      	nop
 8002b58:	20000384 	.word	0x20000384

08002b5c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002b5c:	4801      	ldr	r0, [pc, #4]	; (8002b64 <CAN1_RX1_IRQHandler+0x8>)
 8002b5e:	f000 be24 	b.w	80037aa <HAL_CAN_IRQHandler>
 8002b62:	bf00      	nop
 8002b64:	20000298 	.word	0x20000298

08002b68 <USB_LP_CAN1_RX0_IRQHandler>:
 8002b68:	f7ff bff8 	b.w	8002b5c <CAN1_RX1_IRQHandler>

08002b6c <USB_HP_CAN1_TX_IRQHandler>:
 8002b6c:	f7ff bff6 	b.w	8002b5c <CAN1_RX1_IRQHandler>

08002b70 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b70:	4801      	ldr	r0, [pc, #4]	; (8002b78 <TIM3_IRQHandler+0x8>)
 8002b72:	f001 bd0e 	b.w	8004592 <HAL_TIM_IRQHandler>
 8002b76:	bf00      	nop
 8002b78:	20000300 	.word	0x20000300

08002b7c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b7c:	4801      	ldr	r0, [pc, #4]	; (8002b84 <TIM4_IRQHandler+0x8>)
 8002b7e:	f001 bd08 	b.w	8004592 <HAL_TIM_IRQHandler>
 8002b82:	bf00      	nop
 8002b84:	200002c0 	.word	0x200002c0

08002b88 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002b88:	2001      	movs	r0, #1
 8002b8a:	4770      	bx	lr

08002b8c <_kill>:

int _kill(int pid, int sig)
{
 8002b8c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002b8e:	f002 fc9d 	bl	80054cc <__errno>
 8002b92:	2316      	movs	r3, #22
 8002b94:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002b96:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9a:	bd08      	pop	{r3, pc}

08002b9c <_exit>:

void _exit (int status)
{
 8002b9c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002b9e:	f002 fc95 	bl	80054cc <__errno>
 8002ba2:	2316      	movs	r3, #22
 8002ba4:	6003      	str	r3, [r0, #0]
 8002ba6:	e7fe      	b.n	8002ba6 <_exit+0xa>

08002ba8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002ba8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <_sbrk+0x2c>)
{
 8002bac:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	b909      	cbnz	r1, 8002bb6 <_sbrk+0xe>
		heap_end = &end;
 8002bb2:	4909      	ldr	r1, [pc, #36]	; (8002bd8 <_sbrk+0x30>)
 8002bb4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002bb6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002bb8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002bba:	4402      	add	r2, r0
 8002bbc:	428a      	cmp	r2, r1
 8002bbe:	d906      	bls.n	8002bce <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002bc0:	f002 fc84 	bl	80054cc <__errno>
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002bce:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002bd0:	bd08      	pop	{r3, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000208 	.word	0x20000208
 8002bd8:	20000410 	.word	0x20000410

08002bdc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <SystemInit+0x40>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <SystemInit+0x44>)
 8002bea:	400a      	ands	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002bf4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c00:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002c08:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c0a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c0e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <SystemInit+0x48>)
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	f8ff0000 	.word	0xf8ff0000
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	a802      	add	r0, sp, #8
 8002c30:	f002 fc86 	bl	8005540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c34:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 800-1;
 8002c36:	f240 321f 	movw	r2, #799	; 0x31f
  htim3.Instance = TIM3;
 8002c3a:	4814      	ldr	r0, [pc, #80]	; (8002c8c <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 800-1;
 8002c3c:	4914      	ldr	r1, [pc, #80]	; (8002c90 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	9301      	str	r3, [sp, #4]
  htim3.Init.Prescaler = 800-1;
 8002c42:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c46:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8002c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c4e:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 8002c50:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c52:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c54:	f001 fd8c 	bl	8004770 <HAL_TIM_Base_Init>
 8002c58:	b108      	cbz	r0, 8002c5e <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 8002c5a:	f7ff ff3b 	bl	8002ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c62:	a902      	add	r1, sp, #8
 8002c64:	4809      	ldr	r0, [pc, #36]	; (8002c8c <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c66:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c68:	f001 fda6 	bl	80047b8 <HAL_TIM_ConfigClockSource>
 8002c6c:	b108      	cbz	r0, 8002c72 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 8002c6e:	f7ff ff31 	bl	8002ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c72:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c74:	4669      	mov	r1, sp
 8002c76:	4805      	ldr	r0, [pc, #20]	; (8002c8c <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c78:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c7c:	f001 fe30 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c80:	b108      	cbz	r0, 8002c86 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8002c82:	f7ff ff27 	bl	8002ad4 <Error_Handler>
  }

}
 8002c86:	b007      	add	sp, #28
 8002c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c8c:	20000300 	.word	0x20000300
 8002c90:	40000400 	.word	0x40000400

08002c94 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c94:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 8002c96:	6803      	ldr	r3, [r0, #0]
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <HAL_TIM_Base_MspInit+0x5c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d114      	bne.n	8002cc8 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_TIM_Base_MspInit+0x60>)

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ca0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	f042 0202 	orr.w	r2, r2, #2
 8002ca8:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002caa:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cac:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cae:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cb8:	f000 fe88 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cbc:	201d      	movs	r0, #29
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cbe:	f000 feb9 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002cc2:	b003      	add	sp, #12
 8002cc4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 8002cc8:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <HAL_TIM_Base_MspInit+0x64>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d1f9      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cd0:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	f042 0204 	orr.w	r2, r2, #4
 8002cd8:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cdc:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cde:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ce8:	f000 fe70 	bl	80039cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cec:	201e      	movs	r0, #30
 8002cee:	e7e6      	b.n	8002cbe <HAL_TIM_Base_MspInit+0x2a>
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40000800 	.word	0x40000800

08002cfc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cfc:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8002cfe:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002d02:	480a      	ldr	r0, [pc, #40]	; (8002d2c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d06:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002d08:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d0e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d10:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d12:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d14:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d18:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d1a:	f001 fe3b 	bl	8004994 <HAL_UART_Init>
 8002d1e:	b118      	cbz	r0, 8002d28 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d24:	f7ff bed6 	b.w	8002ad4 <Error_Handler>
 8002d28:	bd08      	pop	{r3, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200003c8 	.word	0x200003c8
 8002d30:	40013800 	.word	0x40013800

08002d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	4606      	mov	r6, r0
 8002d38:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	a802      	add	r0, sp, #8
 8002d40:	f002 fbfe 	bl	8005540 <memset>
  if(uartHandle->Instance==USART1)
 8002d44:	6832      	ldr	r2, [r6, #0]
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_UART_MspInit+0xc0>)
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d151      	bne.n	8002df0 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d4c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002d50:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART1_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002d52:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d58:	619a      	str	r2, [r3, #24]
 8002d5a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002d5c:	4826      	ldr	r0, [pc, #152]	; (8002df8 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d5e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002d62:	9200      	str	r2, [sp, #0]
 8002d64:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d68:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	f042 0204 	orr.w	r2, r2, #4
 8002d6e:	619a      	str	r2, [r3, #24]
 8002d70:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002d72:	4c22      	ldr	r4, [pc, #136]	; (8002dfc <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART1_TX_Pin;
 8002d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d80:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002d8a:	f000 ffd1 	bl	8003d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 8002d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8002d92:	4819      	ldr	r0, [pc, #100]	; (8002df8 <HAL_UART_MspInit+0xc4>)
 8002d94:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 8002d96:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f000 ffc8 	bl	8003d30 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002da0:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_UART_MspInit+0xcc>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002da2:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da4:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002da8:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002daa:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dac:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dae:	6125      	str	r5, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db0:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002db2:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002db4:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002db6:	f000 fe61 	bl	8003a7c <HAL_DMA_Init>
 8002dba:	b108      	cbz	r0, 8002dc0 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8002dbc:	f7ff fe8a 	bl	8002ad4 <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dc0:	f04f 0c10 	mov.w	ip, #16
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_UART_MspInit+0xd0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002dc6:	6374      	str	r4, [r6, #52]	; 0x34
 8002dc8:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002dca:	4c0f      	ldr	r4, [pc, #60]	; (8002e08 <HAL_UART_MspInit+0xd4>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dcc:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dce:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd2:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002dd4:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd6:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dd8:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dda:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ddc:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002dde:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002de0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002de2:	f000 fe4b 	bl	8003a7c <HAL_DMA_Init>
 8002de6:	b108      	cbz	r0, 8002dec <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8002de8:	f7ff fe74 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002dec:	6334      	str	r4, [r6, #48]	; 0x30
 8002dee:	6266      	str	r6, [r4, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002df0:	b006      	add	sp, #24
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	20000384 	.word	0x20000384
 8002e00:	40020058 	.word	0x40020058
 8002e04:	40020044 	.word	0x40020044
 8002e08:	20000340 	.word	0x20000340

08002e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_InitTick+0x3c>)
{
 8002e10:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e12:	7818      	ldrb	r0, [r3, #0]
 8002e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e18:	fbb3 f3f0 	udiv	r3, r3, r0
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_InitTick+0x40>)
 8002e1e:	6810      	ldr	r0, [r2, #0]
 8002e20:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e24:	f000 fe14 	bl	8003a50 <HAL_SYSTICK_Config>
 8002e28:	4604      	mov	r4, r0
 8002e2a:	b958      	cbnz	r0, 8002e44 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2c:	2d0f      	cmp	r5, #15
 8002e2e:	d809      	bhi.n	8002e44 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e30:	4602      	mov	r2, r0
 8002e32:	4629      	mov	r1, r5
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f000 fdc8 	bl	80039cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_InitTick+0x44>)
 8002e3e:	4620      	mov	r0, r4
 8002e40:	601d      	str	r5, [r3, #0]
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	20000008 	.word	0x20000008
 8002e4c:	20000004 	.word	0x20000004
 8002e50:	2000000c 	.word	0x2000000c

08002e54 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e54:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <HAL_Init+0x20>)
{
 8002e56:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e58:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e5c:	f043 0310 	orr.w	r3, r3, #16
 8002e60:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e62:	f000 fda1 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7ff ffd0 	bl	8002e0c <HAL_InitTick>
  HAL_MspInit();
 8002e6c:	f7ff fe38 	bl	8002ae0 <HAL_MspInit>
}
 8002e70:	2000      	movs	r0, #0
 8002e72:	bd08      	pop	{r3, pc}
 8002e74:	40022000 	.word	0x40022000

08002e78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_IncTick+0x10>)
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_IncTick+0x14>)
 8002e7c:	6811      	ldr	r1, [r2, #0]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	440b      	add	r3, r1
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000408 	.word	0x20000408
 8002e8c:	20000008 	.word	0x20000008

08002e90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <HAL_GetTick+0x8>)
 8002e92:	6818      	ldr	r0, [r3, #0]
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000408 	.word	0x20000408

08002e9c <HAL_ADC_ConvCpltCallback>:
 8002e9c:	4770      	bx	lr

08002e9e <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002ea0:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea4:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002ea8:	d11b      	bne.n	8002ee2 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	6892      	ldr	r2, [r2, #8]
 8002eb6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002eba:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002ebe:	d10c      	bne.n	8002eda <ADC_DMAConvCplt+0x3c>
 8002ec0:	7b1a      	ldrb	r2, [r3, #12]
 8002ec2:	b952      	cbnz	r2, 8002eda <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ece:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed0:	bf5e      	ittt	pl
 8002ed2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8002ed4:	f042 0201 	orrpl.w	r2, r2, #1
 8002ed8:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ffde 	bl	8002e9c <HAL_ADC_ConvCpltCallback>
 8002ee0:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8002ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4718      	bx	r3

08002eec <HAL_ADC_ConvHalfCpltCallback>:
 8002eec:	4770      	bx	lr

08002eee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002eee:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ef0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002ef2:	f7ff fffb 	bl	8002eec <HAL_ADC_ConvHalfCpltCallback>
 8002ef6:	bd08      	pop	{r3, pc}

08002ef8 <HAL_ADC_ErrorCallback>:
{
 8002ef8:	4770      	bx	lr

08002efa <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002efa:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002efc:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002efe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f04:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f0e:	f7ff fff3 	bl	8002ef8 <HAL_ADC_ErrorCallback>
 8002f12:	bd08      	pop	{r3, pc}

08002f14 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002f14:	2300      	movs	r3, #0
{ 
 8002f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002f18:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002f1a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d074      	beq.n	800300c <HAL_ADC_ConfigChannel+0xf8>
 8002f22:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8002f24:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8002f26:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002f2a:	2d06      	cmp	r5, #6
 8002f2c:	6802      	ldr	r2, [r0, #0]
 8002f2e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8002f32:	680c      	ldr	r4, [r1, #0]
 8002f34:	d825      	bhi.n	8002f82 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f36:	442b      	add	r3, r5
 8002f38:	251f      	movs	r5, #31
 8002f3a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002f3c:	3b05      	subs	r3, #5
 8002f3e:	409d      	lsls	r5, r3
 8002f40:	ea26 0505 	bic.w	r5, r6, r5
 8002f44:	fa04 f303 	lsl.w	r3, r4, r3
 8002f48:	432b      	orrs	r3, r5
 8002f4a:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f4c:	2c09      	cmp	r4, #9
 8002f4e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8002f52:	688d      	ldr	r5, [r1, #8]
 8002f54:	d92f      	bls.n	8002fb6 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f56:	2607      	movs	r6, #7
 8002f58:	4423      	add	r3, r4
 8002f5a:	68d1      	ldr	r1, [r2, #12]
 8002f5c:	3b1e      	subs	r3, #30
 8002f5e:	409e      	lsls	r6, r3
 8002f60:	ea21 0106 	bic.w	r1, r1, r6
 8002f64:	fa05 f303 	lsl.w	r3, r5, r3
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f6c:	f1a4 0310 	sub.w	r3, r4, #16
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d92b      	bls.n	8002fcc <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8002f76:	2200      	movs	r2, #0
 8002f78:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002f82:	2d0c      	cmp	r5, #12
 8002f84:	d80b      	bhi.n	8002f9e <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f86:	442b      	add	r3, r5
 8002f88:	251f      	movs	r5, #31
 8002f8a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002f8c:	3b23      	subs	r3, #35	; 0x23
 8002f8e:	409d      	lsls	r5, r3
 8002f90:	ea26 0505 	bic.w	r5, r6, r5
 8002f94:	fa04 f303 	lsl.w	r3, r4, r3
 8002f98:	432b      	orrs	r3, r5
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9c:	e7d6      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f9e:	442b      	add	r3, r5
 8002fa0:	251f      	movs	r5, #31
 8002fa2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8002fa4:	3b41      	subs	r3, #65	; 0x41
 8002fa6:	409d      	lsls	r5, r3
 8002fa8:	ea26 0505 	bic.w	r5, r6, r5
 8002fac:	fa04 f303 	lsl.w	r3, r4, r3
 8002fb0:	432b      	orrs	r3, r5
 8002fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fb4:	e7ca      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fb6:	2607      	movs	r6, #7
 8002fb8:	6911      	ldr	r1, [r2, #16]
 8002fba:	4423      	add	r3, r4
 8002fbc:	409e      	lsls	r6, r3
 8002fbe:	ea21 0106 	bic.w	r1, r1, r6
 8002fc2:	fa05 f303 	lsl.w	r3, r5, r3
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6113      	str	r3, [r2, #16]
 8002fca:	e7cf      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_ADC_ConfigChannel+0xfc>)
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d116      	bne.n	8003000 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002fd2:	6893      	ldr	r3, [r2, #8]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	d4cd      	bmi.n	8002f74 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fd8:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002fda:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fe0:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002fe2:	d1c7      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_ADC_ConfigChannel+0x100>)
 8002fe6:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <HAL_ADC_ConfigChannel+0x104>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fee:	230a      	movs	r3, #10
 8002ff0:	4353      	muls	r3, r2
            wait_loop_index--;
 8002ff2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002ff4:	9b01      	ldr	r3, [sp, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0bc      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8002ffa:	9b01      	ldr	r3, [sp, #4]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	e7f8      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003000:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003002:	f043 0320 	orr.w	r3, r3, #32
 8003006:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e7b4      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800300c:	2302      	movs	r3, #2
 800300e:	e7b5      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x68>
 8003010:	40012400 	.word	0x40012400
 8003014:	20000004 	.word	0x20000004
 8003018:	000f4240 	.word	0x000f4240

0800301c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800301c:	2300      	movs	r3, #0
{
 800301e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8003020:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003022:	6803      	ldr	r3, [r0, #0]
{
 8003024:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	07d2      	lsls	r2, r2, #31
 800302a:	d502      	bpl.n	8003032 <ADC_Enable+0x16>
  return HAL_OK;
 800302c:	2000      	movs	r0, #0
}
 800302e:	b002      	add	sp, #8
 8003030:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <ADC_Enable+0x68>)
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <ADC_Enable+0x6c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8003044:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003046:	9b01      	ldr	r3, [sp, #4]
 8003048:	b9c3      	cbnz	r3, 800307c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800304a:	f7ff ff21 	bl	8002e90 <HAL_GetTick>
 800304e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	689d      	ldr	r5, [r3, #8]
 8003054:	f015 0501 	ands.w	r5, r5, #1
 8003058:	d1e8      	bne.n	800302c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800305a:	f7ff ff19 	bl	8002e90 <HAL_GetTick>
 800305e:	1b80      	subs	r0, r0, r6
 8003060:	2802      	cmp	r0, #2
 8003062:	d9f5      	bls.n	8003050 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8003066:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	f043 0310 	orr.w	r3, r3, #16
 800306e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8003072:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800307a:	e7d8      	b.n	800302e <ADC_Enable+0x12>
      wait_loop_index--;
 800307c:	9b01      	ldr	r3, [sp, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	e7e0      	b.n	8003044 <ADC_Enable+0x28>
 8003082:	bf00      	nop
 8003084:	20000004 	.word	0x20000004
 8003088:	000f4240 	.word	0x000f4240

0800308c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800308c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003090:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003092:	2b01      	cmp	r3, #1
{
 8003094:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003096:	d054      	beq.n	8003142 <HAL_ADC_Start+0xb6>
 8003098:	2301      	movs	r3, #1
 800309a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800309e:	f7ff ffbd 	bl	800301c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d149      	bne.n	800313a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80030a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030a8:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80030aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d104      	bne.n	80030c8 <HAL_ADC_Start+0x3c>
 80030be:	4923      	ldr	r1, [pc, #140]	; (800314c <HAL_ADC_Start+0xc0>)
 80030c0:	684a      	ldr	r2, [r1, #4]
 80030c2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80030c6:	d12e      	bne.n	8003126 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80030ce:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030d0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030d2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030d4:	bf41      	itttt	mi
 80030d6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80030d8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80030dc:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80030e0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030e8:	bf1c      	itt	ne
 80030ea:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80030ec:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80030f0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80030f2:	2200      	movs	r2, #0
 80030f4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030f8:	f06f 0202 	mvn.w	r2, #2
 80030fc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003104:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003108:	d113      	bne.n	8003132 <HAL_ADC_Start+0xa6>
 800310a:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <HAL_ADC_Start+0xbc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d105      	bne.n	800311c <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003110:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003114:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003116:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800311a:	d10a      	bne.n	8003132 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003126:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003128:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800312c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800312e:	684a      	ldr	r2, [r1, #4]
 8003130:	e7cf      	b.n	80030d2 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003138:	e7f3      	b.n	8003122 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800313a:	2300      	movs	r3, #0
 800313c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003140:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003142:	2002      	movs	r0, #2
}
 8003144:	bd10      	pop	{r4, pc}
 8003146:	bf00      	nop
 8003148:	40012800 	.word	0x40012800
 800314c:	40012400 	.word	0x40012400

08003150 <HAL_ADC_Start_DMA>:
{
 8003150:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8003154:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003156:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_ADC_Start_DMA+0x108>)
 8003158:	6802      	ldr	r2, [r0, #0]
{
 800315a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800315c:	429a      	cmp	r2, r3
{
 800315e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003160:	d002      	beq.n	8003168 <HAL_ADC_Start_DMA+0x18>
 8003162:	493e      	ldr	r1, [pc, #248]	; (800325c <HAL_ADC_Start_DMA+0x10c>)
 8003164:	428a      	cmp	r2, r1
 8003166:	d103      	bne.n	8003170 <HAL_ADC_Start_DMA+0x20>
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800316e:	d16e      	bne.n	800324e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8003170:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003174:	2b01      	cmp	r3, #1
 8003176:	d06c      	beq.n	8003252 <HAL_ADC_Start_DMA+0x102>
 8003178:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800317a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800317c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8003180:	f7ff ff4c 	bl	800301c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003184:	4606      	mov	r6, r0
 8003186:	2800      	cmp	r0, #0
 8003188:	d15d      	bne.n	8003246 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800318a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800318c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800318e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003192:	4b32      	ldr	r3, [pc, #200]	; (800325c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8003194:	f020 0001 	bic.w	r0, r0, #1
 8003198:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800319c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800319e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031a0:	d104      	bne.n	80031ac <HAL_ADC_Start_DMA+0x5c>
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_ADC_Start_DMA+0x108>)
 80031a4:	6853      	ldr	r3, [r2, #4]
 80031a6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80031aa:	d13e      	bne.n	800322a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031b2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031b4:	684b      	ldr	r3, [r1, #4]
 80031b6:	055a      	lsls	r2, r3, #21
 80031b8:	d505      	bpl.n	80031c6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031c4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031c8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ca:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031ce:	bf18      	it	ne
 80031d0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031d2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031d4:	bf18      	it	ne
 80031d6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80031da:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80031dc:	2300      	movs	r3, #0
 80031de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031e2:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031e4:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031e6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031e8:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <HAL_ADC_Start_DMA+0x114>)
 80031ea:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_ADC_Start_DMA+0x118>)
 80031ee:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031f0:	f06f 0302 	mvn.w	r3, #2
 80031f4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031f8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80031fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003200:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003204:	4643      	mov	r3, r8
 8003206:	f000 fc79 	bl	8003afc <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003212:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	bf0c      	ite	eq
 800321a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800321e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8003222:	609a      	str	r2, [r3, #8]
}
 8003224:	4630      	mov	r0, r6
 8003226:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800322a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800322c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003230:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003232:	6853      	ldr	r3, [r2, #4]
 8003234:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003236:	bf41      	itttt	mi
 8003238:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800323a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800323e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8003242:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8003244:	e7bf      	b.n	80031c6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8003246:	2300      	movs	r3, #0
 8003248:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800324c:	e7ea      	b.n	8003224 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800324e:	2601      	movs	r6, #1
 8003250:	e7e8      	b.n	8003224 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8003252:	2602      	movs	r6, #2
 8003254:	e7e6      	b.n	8003224 <HAL_ADC_Start_DMA+0xd4>
 8003256:	bf00      	nop
 8003258:	40012400 	.word	0x40012400
 800325c:	40012800 	.word	0x40012800
 8003260:	08002e9f 	.word	0x08002e9f
 8003264:	08002eef 	.word	0x08002eef
 8003268:	08002efb 	.word	0x08002efb

0800326c <ADC_ConversionStop_Disable>:
{
 800326c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800326e:	6803      	ldr	r3, [r0, #0]
{
 8003270:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	07d2      	lsls	r2, r2, #31
 8003276:	d401      	bmi.n	800327c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8003278:	2000      	movs	r0, #0
 800327a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003284:	f7ff fe04 	bl	8002e90 <HAL_GetTick>
 8003288:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	07db      	lsls	r3, r3, #31
 8003290:	d5f2      	bpl.n	8003278 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003292:	f7ff fdfd 	bl	8002e90 <HAL_GetTick>
 8003296:	1b40      	subs	r0, r0, r5
 8003298:	2802      	cmp	r0, #2
 800329a:	d9f6      	bls.n	800328a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032ae:	bd38      	pop	{r3, r4, r5, pc}

080032b0 <HAL_ADC_Init>:
{
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80032b2:	4604      	mov	r4, r0
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d077      	beq.n	80033a8 <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80032ba:	b923      	cbnz	r3, 80032c6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80032bc:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80032be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80032c2:	f7ff f9dd 	bl	8002680 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032c6:	4620      	mov	r0, r4
 80032c8:	f7ff ffd0 	bl	800326c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032ce:	f013 0310 	ands.w	r3, r3, #16
 80032d2:	d16b      	bne.n	80033ac <HAL_ADC_Init+0xfc>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d169      	bne.n	80033ac <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 80032d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032da:	4937      	ldr	r1, [pc, #220]	; (80033b8 <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 80032dc:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80032e0:	f022 0202 	bic.w	r2, r2, #2
 80032e4:	f042 0202 	orr.w	r2, r2, #2
 80032e8:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032ea:	e894 0024 	ldmia.w	r4, {r2, r5}
 80032ee:	428a      	cmp	r2, r1
 80032f0:	69e1      	ldr	r1, [r4, #28]
 80032f2:	d104      	bne.n	80032fe <HAL_ADC_Init+0x4e>
 80032f4:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80032f8:	bf08      	it	eq
 80032fa:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80032fe:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003300:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8003304:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003306:	68a5      	ldr	r5, [r4, #8]
 8003308:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800330c:	d035      	beq.n	800337a <HAL_ADC_Init+0xca>
 800330e:	2d01      	cmp	r5, #1
 8003310:	bf08      	it	eq
 8003312:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003316:	7d27      	ldrb	r7, [r4, #20]
 8003318:	2f01      	cmp	r7, #1
 800331a:	d106      	bne.n	800332a <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800331c:	bb7e      	cbnz	r6, 800337e <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800331e:	69a6      	ldr	r6, [r4, #24]
 8003320:	3e01      	subs	r6, #1
 8003322:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8003326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800332a:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800332c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003330:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8003334:	ea43 0306 	orr.w	r3, r3, r6
 8003338:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800333a:	6896      	ldr	r6, [r2, #8]
 800333c:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_ADC_Init+0x10c>)
 800333e:	ea03 0306 	and.w	r3, r3, r6
 8003342:	ea43 0301 	orr.w	r3, r3, r1
 8003346:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003348:	d001      	beq.n	800334e <HAL_ADC_Init+0x9e>
 800334a:	2d01      	cmp	r5, #1
 800334c:	d120      	bne.n	8003390 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800334e:	6923      	ldr	r3, [r4, #16]
 8003350:	3b01      	subs	r3, #1
 8003352:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8003354:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8003356:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800335a:	432b      	orrs	r3, r5
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800335e:	6892      	ldr	r2, [r2, #8]
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <HAL_ADC_Init+0x110>)
 8003362:	4013      	ands	r3, r2
 8003364:	4299      	cmp	r1, r3
 8003366:	d115      	bne.n	8003394 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 8003368:	2300      	movs	r3, #0
 800336a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800336c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800336e:	f023 0303 	bic.w	r3, r3, #3
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	62a3      	str	r3, [r4, #40]	; 0x28
 8003378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800337a:	462b      	mov	r3, r5
 800337c:	e7cb      	b.n	8003316 <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003380:	f046 0620 	orr.w	r6, r6, #32
 8003384:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003388:	f046 0601 	orr.w	r6, r6, #1
 800338c:	62e6      	str	r6, [r4, #44]	; 0x2c
 800338e:	e7cc      	b.n	800332a <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	e7df      	b.n	8003354 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 8003394:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003396:	f023 0312 	bic.w	r3, r3, #18
 800339a:	f043 0310 	orr.w	r3, r3, #16
 800339e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
}
 80033aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033ae:	f043 0310 	orr.w	r3, r3, #16
 80033b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80033b4:	e7f8      	b.n	80033a8 <HAL_ADC_Init+0xf8>
 80033b6:	bf00      	nop
 80033b8:	40013c00 	.word	0x40013c00
 80033bc:	ffe1f7fd 	.word	0xffe1f7fd
 80033c0:	ff1f0efe 	.word	0xff1f0efe

080033c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033c6:	4604      	mov	r4, r0
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d06e      	beq.n	80034aa <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033cc:	f890 3020 	ldrb.w	r3, [r0, #32]
 80033d0:	b90b      	cbnz	r3, 80033d6 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033d2:	f7ff f9d9 	bl	8002788 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	6813      	ldr	r3, [r2, #0]
 80033da:	f023 0302 	bic.w	r3, r3, #2
 80033de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e0:	f7ff fd56 	bl	8002e90 <HAL_GetTick>
 80033e4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	0791      	lsls	r1, r2, #30
 80033ec:	d451      	bmi.n	8003492 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f6:	f7ff fd4b 	bl	8002e90 <HAL_GetTick>
 80033fa:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	07d2      	lsls	r2, r2, #31
 8003402:	d554      	bpl.n	80034ae <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003404:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003406:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003408:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	bf0c      	ite	eq
 800340e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003412:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8003416:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003418:	7e62      	ldrb	r2, [r4, #25]
 800341a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	bf0c      	ite	eq
 8003420:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003424:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003428:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800342a:	7ea2      	ldrb	r2, [r4, #26]
 800342c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	bf0c      	ite	eq
 8003432:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003436:	f022 0220 	bicne.w	r2, r2, #32
 800343a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800343c:	7ee2      	ldrb	r2, [r4, #27]
 800343e:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	bf0c      	ite	eq
 8003444:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003448:	f042 0210 	orrne.w	r2, r2, #16
 800344c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800344e:	7f22      	ldrb	r2, [r4, #28]
 8003450:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	bf0c      	ite	eq
 8003456:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800345a:	f022 0208 	bicne.w	r2, r2, #8
 800345e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003460:	7f62      	ldrb	r2, [r4, #29]
 8003462:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	bf0c      	ite	eq
 8003468:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800346c:	f022 0204 	bicne.w	r2, r2, #4
 8003470:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003472:	68e1      	ldr	r1, [r4, #12]
 8003474:	68a2      	ldr	r2, [r4, #8]
 8003476:	430a      	orrs	r2, r1
 8003478:	6921      	ldr	r1, [r4, #16]
 800347a:	430a      	orrs	r2, r1
 800347c:	6961      	ldr	r1, [r4, #20]
 800347e:	430a      	orrs	r2, r1
 8003480:	6861      	ldr	r1, [r4, #4]
 8003482:	3901      	subs	r1, #1
 8003484:	430a      	orrs	r2, r1
 8003486:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003488:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800348a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800348c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8003490:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003492:	f7ff fcfd 	bl	8002e90 <HAL_GetTick>
 8003496:	1b40      	subs	r0, r0, r5
 8003498:	280a      	cmp	r0, #10
 800349a:	d9a4      	bls.n	80033e6 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800349c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800349e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a2:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80034a4:	2305      	movs	r3, #5
 80034a6:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80034aa:	2001      	movs	r0, #1
}
 80034ac:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034ae:	f7ff fcef 	bl	8002e90 <HAL_GetTick>
 80034b2:	1b40      	subs	r0, r0, r5
 80034b4:	280a      	cmp	r0, #10
 80034b6:	d9a1      	bls.n	80033fc <HAL_CAN_Init+0x38>
 80034b8:	e7f0      	b.n	800349c <HAL_CAN_Init+0xd8>

080034ba <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ba:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80034be:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 80034c0:	3b01      	subs	r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d85f      	bhi.n	8003586 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034c6:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 80034c8:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034ca:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034d8:	f000 021f 	and.w	r2, r0, #31
 80034dc:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034e0:	43d4      	mvns	r4, r2
 80034e2:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 80034e6:	4025      	ands	r5, r4
 80034e8:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034ec:	69cd      	ldr	r5, [r1, #28]
 80034ee:	bb85      	cbnz	r5, 8003552 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034f0:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034f4:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034f6:	4025      	ands	r5, r4
 80034f8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034fc:	888d      	ldrh	r5, [r1, #4]
 80034fe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003502:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003506:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800350a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800350c:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800350e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003512:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003516:	6988      	ldr	r0, [r1, #24]
 8003518:	bb68      	cbnz	r0, 8003576 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800351a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800351e:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003520:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003524:	6908      	ldr	r0, [r1, #16]
 8003526:	bb50      	cbnz	r0, 800357e <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003528:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800352c:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800352e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003532:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8003534:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003536:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003538:	bf02      	ittt	eq
 800353a:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 800353e:	430a      	orreq	r2, r1
 8003540:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003544:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8003550:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003552:	2d01      	cmp	r5, #1
 8003554:	d1df      	bne.n	8003516 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003556:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800355a:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800355c:	4315      	orrs	r5, r2
 800355e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003562:	888d      	ldrh	r5, [r1, #4]
 8003564:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003568:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800356c:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003570:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003572:	898d      	ldrh	r5, [r1, #12]
 8003574:	e7cb      	b.n	800350e <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003576:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800357a:	4310      	orrs	r0, r2
 800357c:	e7d0      	b.n	8003520 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800357e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003582:	4310      	orrs	r0, r2
 8003584:	e7d3      	b.n	800352e <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003586:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800358e:	2001      	movs	r0, #1
  }
}
 8003590:	bd70      	pop	{r4, r5, r6, pc}

08003592 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003592:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003594:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003598:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800359a:	2b01      	cmp	r3, #1
 800359c:	d11f      	bne.n	80035de <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800359e:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035a0:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80035a2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035ae:	f7ff fc6f 	bl	8002e90 <HAL_GetTick>
 80035b2:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	6858      	ldr	r0, [r3, #4]
 80035b8:	f010 0001 	ands.w	r0, r0, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035be:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80035c0:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035c2:	f7ff fc65 	bl	8002e90 <HAL_GetTick>
 80035c6:	1b40      	subs	r0, r0, r5
 80035c8:	280a      	cmp	r0, #10
 80035ca:	d9f3      	bls.n	80035b4 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d2:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80035d4:	2305      	movs	r3, #5
 80035d6:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80035da:	2001      	movs	r0, #1
  }
}
 80035dc:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035e4:	6243      	str	r3, [r0, #36]	; 0x24
 80035e6:	e7f8      	b.n	80035da <HAL_CAN_Start+0x48>

080035e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80035e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80035ea:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80035ee:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80035f0:	3d01      	subs	r5, #1
 80035f2:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80035f4:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80035f6:	d841      	bhi.n	800367c <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035f8:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80035fc:	d03a      	beq.n	8003674 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035fe:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003602:	2c03      	cmp	r4, #3
 8003604:	f04f 0501 	mov.w	r5, #1
 8003608:	d105      	bne.n	8003616 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800360a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800360c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003610:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003612:	2001      	movs	r0, #1
  }
}
 8003614:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003616:	40a5      	lsls	r5, r4
 8003618:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800361a:	6888      	ldr	r0, [r1, #8]
 800361c:	68cf      	ldr	r7, [r1, #12]
 800361e:	f104 0318 	add.w	r3, r4, #24
 8003622:	bb10      	cbnz	r0, 800366a <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003624:	6808      	ldr	r0, [r1, #0]
 8003626:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800362e:	6908      	ldr	r0, [r1, #16]
 8003630:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003632:	7d09      	ldrb	r1, [r1, #20]
 8003634:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003636:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800363a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800363c:	bf08      	it	eq
 800363e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003642:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003644:	bf04      	itt	eq
 8003646:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800364a:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800364e:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8003650:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003652:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800365c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8003668:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800366a:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 800366c:	4338      	orrs	r0, r7
 800366e:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8003672:	e7da      	b.n	800362a <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003674:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800367a:	e7c9      	b.n	8003610 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800367c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800367e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003682:	e7c5      	b.n	8003610 <HAL_CAN_AddTxMessage+0x28>

08003684 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003684:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8003686:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800368a:	3c01      	subs	r4, #1
 800368c:	2c01      	cmp	r4, #1
 800368e:	d86b      	bhi.n	8003768 <HAL_CAN_GetRxMessage+0xe4>
 8003690:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003692:	b941      	cbnz	r1, 80036a6 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003694:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003696:	07a4      	lsls	r4, r4, #30
 8003698:	d107      	bne.n	80036aa <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800369a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800369c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80036a2:	2001      	movs	r0, #1
  }
}
 80036a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80036a6:	6934      	ldr	r4, [r6, #16]
 80036a8:	e7f5      	b.n	8003696 <HAL_CAN_GetRxMessage+0x12>
 80036aa:	010c      	lsls	r4, r1, #4
 80036ac:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036ae:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80036b2:	f007 0704 	and.w	r7, r7, #4
 80036b6:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036b8:	2f00      	cmp	r7, #0
 80036ba:	d14b      	bne.n	8003754 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80036bc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80036c0:	0d7f      	lsrs	r7, r7, #21
 80036c2:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036c4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036c8:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036ca:	f007 0702 	and.w	r7, r7, #2
 80036ce:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036d0:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80036d4:	f007 070f 	and.w	r7, r7, #15
 80036d8:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036da:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036de:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036e2:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036e6:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036e8:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036ea:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036ec:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80036f0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036f2:	6802      	ldr	r2, [r0, #0]
 80036f4:	4422      	add	r2, r4
 80036f6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80036fa:	0a12      	lsrs	r2, r2, #8
 80036fc:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036fe:	6802      	ldr	r2, [r0, #0]
 8003700:	4422      	add	r2, r4
 8003702:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003706:	0c12      	lsrs	r2, r2, #16
 8003708:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800370a:	6802      	ldr	r2, [r0, #0]
 800370c:	4422      	add	r2, r4
 800370e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003712:	0e12      	lsrs	r2, r2, #24
 8003714:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003716:	6802      	ldr	r2, [r0, #0]
 8003718:	4422      	add	r2, r4
 800371a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800371e:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003720:	6802      	ldr	r2, [r0, #0]
 8003722:	4422      	add	r2, r4
 8003724:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003728:	0a12      	lsrs	r2, r2, #8
 800372a:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800372c:	6802      	ldr	r2, [r0, #0]
 800372e:	4422      	add	r2, r4
 8003730:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003734:	0c12      	lsrs	r2, r2, #16
 8003736:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003738:	6802      	ldr	r2, [r0, #0]
 800373a:	4414      	add	r4, r2
 800373c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8003740:	0e12      	lsrs	r2, r2, #24
 8003742:	71da      	strb	r2, [r3, #7]
 8003744:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003746:	b951      	cbnz	r1, 800375e <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8003750:	2000      	movs	r0, #0
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003754:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8003758:	08ff      	lsrs	r7, r7, #3
 800375a:	6057      	str	r7, [r2, #4]
 800375c:	e7b2      	b.n	80036c4 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	f042 0220 	orr.w	r2, r2, #32
 8003764:	611a      	str	r2, [r3, #16]
 8003766:	e7f3      	b.n	8003750 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003768:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800376a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376e:	e797      	b.n	80036a0 <HAL_CAN_GetRxMessage+0x1c>

08003770 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003770:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003774:	3b01      	subs	r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d805      	bhi.n	8003786 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800377a:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 800377c:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800377e:	6953      	ldr	r3, [r2, #20]
 8003780:	4319      	orrs	r1, r3
 8003782:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8003784:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003786:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800378e:	2001      	movs	r0, #1
  }
}
 8003790:	4770      	bx	lr

08003792 <HAL_CAN_TxMailbox0CompleteCallback>:
 8003792:	4770      	bx	lr

08003794 <HAL_CAN_TxMailbox1CompleteCallback>:
 8003794:	4770      	bx	lr

08003796 <HAL_CAN_TxMailbox2CompleteCallback>:
 8003796:	4770      	bx	lr

08003798 <HAL_CAN_TxMailbox0AbortCallback>:
 8003798:	4770      	bx	lr

0800379a <HAL_CAN_TxMailbox1AbortCallback>:
 800379a:	4770      	bx	lr

0800379c <HAL_CAN_TxMailbox2AbortCallback>:
 800379c:	4770      	bx	lr

0800379e <HAL_CAN_RxFifo0FullCallback>:
 800379e:	4770      	bx	lr

080037a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80037a0:	4770      	bx	lr

080037a2 <HAL_CAN_RxFifo1FullCallback>:
 80037a2:	4770      	bx	lr

080037a4 <HAL_CAN_SleepCallback>:
 80037a4:	4770      	bx	lr

080037a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80037a6:	4770      	bx	lr

080037a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80037a8:	4770      	bx	lr

080037aa <HAL_CAN_IRQHandler>:
{
 80037aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037ae:	6803      	ldr	r3, [r0, #0]
{
 80037b0:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037b2:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037b4:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037b8:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037bc:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037be:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037c2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037c6:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037ca:	d022      	beq.n	8003812 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037cc:	f017 0401 	ands.w	r4, r7, #1
 80037d0:	d007      	beq.n	80037e2 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037d2:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037d4:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037d6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037d8:	f140 80a3 	bpl.w	8003922 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037dc:	f7ff ffd9 	bl	8003792 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037e0:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037e2:	05fb      	lsls	r3, r7, #23
 80037e4:	d509      	bpl.n	80037fa <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ea:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037ec:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037ee:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037f0:	f140 80a5 	bpl.w	800393e <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037f4:	4628      	mov	r0, r5
 80037f6:	f7ff ffcd 	bl	8003794 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037fa:	03fb      	lsls	r3, r7, #15
 80037fc:	d509      	bpl.n	8003812 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003802:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003804:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003806:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003808:	f140 80a7 	bpl.w	800395a <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800380c:	4628      	mov	r0, r5
 800380e:	f7ff ffc2 	bl	8003796 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003812:	0733      	lsls	r3, r6, #28
 8003814:	d507      	bpl.n	8003826 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003816:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800381a:	bf1f      	itttt	ne
 800381c:	2210      	movne	r2, #16
 800381e:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003820:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003824:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003826:	0777      	lsls	r7, r6, #29
 8003828:	d508      	bpl.n	800383c <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800382a:	f01b 0f08 	tst.w	fp, #8
 800382e:	d005      	beq.n	800383c <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003830:	2208      	movs	r2, #8
 8003832:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003834:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003836:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003838:	f7ff ffb1 	bl	800379e <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800383c:	07b0      	lsls	r0, r6, #30
 800383e:	d506      	bpl.n	800384e <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0799      	lsls	r1, r3, #30
 8003846:	d002      	beq.n	800384e <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003848:	4628      	mov	r0, r5
 800384a:	f7fd ffa3 	bl	8001794 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800384e:	0672      	lsls	r2, r6, #25
 8003850:	d507      	bpl.n	8003862 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003852:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003856:	bf1f      	itttt	ne
 8003858:	2210      	movne	r2, #16
 800385a:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800385c:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003860:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003862:	06b3      	lsls	r3, r6, #26
 8003864:	d508      	bpl.n	8003878 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003866:	f01a 0f08 	tst.w	sl, #8
 800386a:	d005      	beq.n	8003878 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800386c:	2208      	movs	r2, #8
 800386e:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003870:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003872:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003874:	f7ff ff95 	bl	80037a2 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003878:	06f7      	lsls	r7, r6, #27
 800387a:	d506      	bpl.n	800388a <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	0798      	lsls	r0, r3, #30
 8003882:	d002      	beq.n	800388a <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003884:	4628      	mov	r0, r5
 8003886:	f7ff ff8b 	bl	80037a0 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800388a:	03b1      	lsls	r1, r6, #14
 800388c:	d508      	bpl.n	80038a0 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800388e:	f019 0f10 	tst.w	r9, #16
 8003892:	d005      	beq.n	80038a0 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003894:	2210      	movs	r2, #16
 8003896:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8003898:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800389a:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800389c:	f7ff ff82 	bl	80037a4 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038a0:	03f2      	lsls	r2, r6, #15
 80038a2:	d508      	bpl.n	80038b6 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038a4:	f019 0f08 	tst.w	r9, #8
 80038a8:	d005      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038aa:	2208      	movs	r2, #8
 80038ac:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038ae:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038b0:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038b2:	f7ff ff78 	bl	80037a6 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038b6:	0433      	lsls	r3, r6, #16
 80038b8:	d52a      	bpl.n	8003910 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038ba:	f019 0f04 	tst.w	r9, #4
 80038be:	682a      	ldr	r2, [r5, #0]
 80038c0:	d024      	beq.n	800390c <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038c2:	05f7      	lsls	r7, r6, #23
 80038c4:	d504      	bpl.n	80038d0 <HAL_CAN_IRQHandler+0x126>
 80038c6:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80038ca:	bf18      	it	ne
 80038cc:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038d0:	05b0      	lsls	r0, r6, #22
 80038d2:	d504      	bpl.n	80038de <HAL_CAN_IRQHandler+0x134>
 80038d4:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80038d8:	bf18      	it	ne
 80038da:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038de:	0571      	lsls	r1, r6, #21
 80038e0:	d504      	bpl.n	80038ec <HAL_CAN_IRQHandler+0x142>
 80038e2:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80038e6:	bf18      	it	ne
 80038e8:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038ec:	0533      	lsls	r3, r6, #20
 80038ee:	d50d      	bpl.n	800390c <HAL_CAN_IRQHandler+0x162>
 80038f0:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80038f4:	d00a      	beq.n	800390c <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 80038f6:	2b30      	cmp	r3, #48	; 0x30
 80038f8:	d04c      	beq.n	8003994 <HAL_CAN_IRQHandler+0x1ea>
 80038fa:	d83c      	bhi.n	8003976 <HAL_CAN_IRQHandler+0x1cc>
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d043      	beq.n	8003988 <HAL_CAN_IRQHandler+0x1de>
 8003900:	2b20      	cmp	r3, #32
 8003902:	d044      	beq.n	800398e <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003904:	6993      	ldr	r3, [r2, #24]
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800390c:	2304      	movs	r3, #4
 800390e:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003910:	b12c      	cbz	r4, 800391e <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8003912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003914:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8003916:	431c      	orrs	r4, r3
 8003918:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800391a:	f7ff ff45 	bl	80037a8 <HAL_CAN_ErrorCallback>
 800391e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003922:	077a      	lsls	r2, r7, #29
 8003924:	d405      	bmi.n	8003932 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003926:	f017 0408 	ands.w	r4, r7, #8
 800392a:	d105      	bne.n	8003938 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800392c:	f7ff ff34 	bl	8003798 <HAL_CAN_TxMailbox0AbortCallback>
 8003930:	e757      	b.n	80037e2 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003932:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8003936:	e754      	b.n	80037e2 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003938:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800393c:	e751      	b.n	80037e2 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800393e:	0579      	lsls	r1, r7, #21
 8003940:	d502      	bpl.n	8003948 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003942:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8003946:	e758      	b.n	80037fa <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003948:	053a      	lsls	r2, r7, #20
 800394a:	d502      	bpl.n	8003952 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800394c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003950:	e753      	b.n	80037fa <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003952:	4628      	mov	r0, r5
 8003954:	f7ff ff21 	bl	800379a <HAL_CAN_TxMailbox1AbortCallback>
 8003958:	e74f      	b.n	80037fa <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800395a:	0379      	lsls	r1, r7, #13
 800395c:	d502      	bpl.n	8003964 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800395e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003962:	e756      	b.n	8003812 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003964:	033a      	lsls	r2, r7, #12
 8003966:	d502      	bpl.n	800396e <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003968:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800396c:	e751      	b.n	8003812 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800396e:	4628      	mov	r0, r5
 8003970:	f7ff ff14 	bl	800379c <HAL_CAN_TxMailbox2AbortCallback>
 8003974:	e74d      	b.n	8003812 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8003976:	2b50      	cmp	r3, #80	; 0x50
 8003978:	d00f      	beq.n	800399a <HAL_CAN_IRQHandler+0x1f0>
 800397a:	2b60      	cmp	r3, #96	; 0x60
 800397c:	d010      	beq.n	80039a0 <HAL_CAN_IRQHandler+0x1f6>
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d1c0      	bne.n	8003904 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003982:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8003986:	e7bd      	b.n	8003904 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003988:	f044 0408 	orr.w	r4, r4, #8
            break;
 800398c:	e7ba      	b.n	8003904 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800398e:	f044 0410 	orr.w	r4, r4, #16
            break;
 8003992:	e7b7      	b.n	8003904 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003994:	f044 0420 	orr.w	r4, r4, #32
            break;
 8003998:	e7b4      	b.n	8003904 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 800399a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800399e:	e7b1      	b.n	8003904 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039a0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80039a4:	e7ae      	b.n	8003904 <HAL_CAN_IRQHandler+0x15a>
	...

080039a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a8:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039b6:	041b      	lsls	r3, r3, #16
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80039c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80039c4:	60d3      	str	r3, [r2, #12]
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039cc:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ce:	b530      	push	{r4, r5, lr}
 80039d0:	68dc      	ldr	r4, [r3, #12]
 80039d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039dc:	2b04      	cmp	r3, #4
 80039de:	bf28      	it	cs
 80039e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e8:	bf98      	it	ls
 80039ea:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	fa05 f303 	lsl.w	r3, r5, r3
 80039f0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f4:	bf88      	it	hi
 80039f6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	4019      	ands	r1, r3
 80039fa:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039fc:	fa05 f404 	lsl.w	r4, r5, r4
 8003a00:	3c01      	subs	r4, #1
 8003a02:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8003a04:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a06:	ea42 0201 	orr.w	r2, r2, r1
 8003a0a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0e:	bfa9      	itett	ge
 8003a10:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a14:	4b06      	ldrlt	r3, [pc, #24]	; (8003a30 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	b2d2      	uxtbge	r2, r2
 8003a18:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1c:	bfbb      	ittet	lt
 8003a1e:	f000 000f 	andlt.w	r0, r0, #15
 8003a22:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a28:	541a      	strblt	r2, [r3, r0]
 8003a2a:	bd30      	pop	{r4, r5, pc}
 8003a2c:	e000ed00 	.word	0xe000ed00
 8003a30:	e000ed14 	.word	0xe000ed14

08003a34 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a34:	2800      	cmp	r0, #0
 8003a36:	db08      	blt.n	8003a4a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a38:	2301      	movs	r3, #1
 8003a3a:	0942      	lsrs	r2, r0, #5
 8003a3c:	f000 001f 	and.w	r0, r0, #31
 8003a40:	fa03 f000 	lsl.w	r0, r3, r0
 8003a44:	4b01      	ldr	r3, [pc, #4]	; (8003a4c <HAL_NVIC_EnableIRQ+0x18>)
 8003a46:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a50:	3801      	subs	r0, #1
 8003a52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003a56:	d20a      	bcs.n	8003a6e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a58:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	4a06      	ldr	r2, [pc, #24]	; (8003a78 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a60:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a64:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a66:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a68:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003a6e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000e010 	.word	0xe000e010
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d032      	beq.n	8003ae8 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a82:	6801      	ldr	r1, [r0, #0]
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_DMA_Init+0x70>)
 8003a86:	2414      	movs	r4, #20
 8003a88:	4299      	cmp	r1, r3
 8003a8a:	d825      	bhi.n	8003ad8 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8003a8e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a92:	440a      	add	r2, r1
 8003a94:	fbb2 f2f4 	udiv	r2, r2, r4
 8003a98:	0092      	lsls	r2, r2, #2
 8003a9a:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a9c:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8003a9e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8003aa0:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8003aa2:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8003aa4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa6:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003aa8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aac:	4323      	orrs	r3, r4
 8003aae:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ab0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab6:	6944      	ldr	r4, [r0, #20]
 8003ab8:	4323      	orrs	r3, r4
 8003aba:	6984      	ldr	r4, [r0, #24]
 8003abc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003abe:	69c4      	ldr	r4, [r0, #28]
 8003ac0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8003ac2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ac4:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac8:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003aca:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ace:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ad0:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_DMA_Init+0x78>)
 8003ada:	440b      	add	r3, r1
 8003adc:	fbb3 f3f4 	udiv	r3, r3, r4
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <HAL_DMA_Init+0x7c>)
 8003ae6:	e7d9      	b.n	8003a9c <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8003ae8:	2001      	movs	r0, #1
}
 8003aea:	bd10      	pop	{r4, pc}
 8003aec:	40020407 	.word	0x40020407
 8003af0:	bffdfff8 	.word	0xbffdfff8
 8003af4:	bffdfbf8 	.word	0xbffdfbf8
 8003af8:	40020400 	.word	0x40020400

08003afc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003afc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003afe:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003b02:	2c01      	cmp	r4, #1
 8003b04:	d035      	beq.n	8003b72 <HAL_DMA_Start_IT+0x76>
 8003b06:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b08:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003b0c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b10:	42a5      	cmp	r5, r4
 8003b12:	f04f 0600 	mov.w	r6, #0
 8003b16:	f04f 0402 	mov.w	r4, #2
 8003b1a:	d128      	bne.n	8003b6e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b1c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b20:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b22:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8003b24:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b26:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8003b28:	f026 0601 	bic.w	r6, r6, #1
 8003b2c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b2e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8003b30:	40bd      	lsls	r5, r7
 8003b32:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b34:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b36:	6843      	ldr	r3, [r0, #4]
 8003b38:	6805      	ldr	r5, [r0, #0]
 8003b3a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8003b3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b3e:	bf0b      	itete	eq
 8003b40:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003b42:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003b44:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003b46:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003b48:	b14b      	cbz	r3, 8003b5e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b50:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003b52:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f043 030a 	orr.w	r3, r3, #10
 8003b6c:	e7f0      	b.n	8003b50 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8003b6e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8003b72:	2002      	movs	r0, #2
}
 8003b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b78 <HAL_DMA_IRQHandler>:
{
 8003b78:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b7a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b7c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b7e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b80:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003b82:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b84:	4095      	lsls	r5, r2
 8003b86:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8003b88:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b8a:	d055      	beq.n	8003c38 <HAL_DMA_IRQHandler+0xc0>
 8003b8c:	074d      	lsls	r5, r1, #29
 8003b8e:	d553      	bpl.n	8003c38 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b94:	bf5e      	ittt	pl
 8003b96:	681a      	ldrpl	r2, [r3, #0]
 8003b98:	f022 0204 	bicpl.w	r2, r2, #4
 8003b9c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b9e:	4a60      	ldr	r2, [pc, #384]	; (8003d20 <HAL_DMA_IRQHandler+0x1a8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d91f      	bls.n	8003be4 <HAL_DMA_IRQHandler+0x6c>
 8003ba4:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d014      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x5e>
 8003bac:	3214      	adds	r2, #20
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_DMA_IRQHandler+0x62>
 8003bb2:	3214      	adds	r2, #20
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d012      	beq.n	8003bde <HAL_DMA_IRQHandler+0x66>
 8003bb8:	3214      	adds	r2, #20
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	bf0c      	ite	eq
 8003bbe:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8003bc2:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8003bc6:	4a57      	ldr	r2, [pc, #348]	; (8003d24 <HAL_DMA_IRQHandler+0x1ac>)
 8003bc8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8003bca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a5 	beq.w	8003d1c <HAL_DMA_IRQHandler+0x1a4>
}
 8003bd2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003bd4:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	e7f5      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x4e>
 8003bda:	2340      	movs	r3, #64	; 0x40
 8003bdc:	e7f3      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x4e>
 8003bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be2:	e7f0      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x4e>
 8003be4:	4950      	ldr	r1, [pc, #320]	; (8003d28 <HAL_DMA_IRQHandler+0x1b0>)
 8003be6:	428b      	cmp	r3, r1
 8003be8:	d016      	beq.n	8003c18 <HAL_DMA_IRQHandler+0xa0>
 8003bea:	3114      	adds	r1, #20
 8003bec:	428b      	cmp	r3, r1
 8003bee:	d015      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xa4>
 8003bf0:	3114      	adds	r1, #20
 8003bf2:	428b      	cmp	r3, r1
 8003bf4:	d014      	beq.n	8003c20 <HAL_DMA_IRQHandler+0xa8>
 8003bf6:	3114      	adds	r1, #20
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	d014      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xae>
 8003bfc:	3114      	adds	r1, #20
 8003bfe:	428b      	cmp	r3, r1
 8003c00:	d014      	beq.n	8003c2c <HAL_DMA_IRQHandler+0xb4>
 8003c02:	3114      	adds	r1, #20
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d014      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xba>
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	bf14      	ite	ne
 8003c0c:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8003c10:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8003c14:	4a45      	ldr	r2, [pc, #276]	; (8003d2c <HAL_DMA_IRQHandler+0x1b4>)
 8003c16:	e7d7      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x50>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	e7fb      	b.n	8003c14 <HAL_DMA_IRQHandler+0x9c>
 8003c1c:	2340      	movs	r3, #64	; 0x40
 8003c1e:	e7f9      	b.n	8003c14 <HAL_DMA_IRQHandler+0x9c>
 8003c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c24:	e7f6      	b.n	8003c14 <HAL_DMA_IRQHandler+0x9c>
 8003c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c2a:	e7f3      	b.n	8003c14 <HAL_DMA_IRQHandler+0x9c>
 8003c2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c30:	e7f0      	b.n	8003c14 <HAL_DMA_IRQHandler+0x9c>
 8003c32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c36:	e7ed      	b.n	8003c14 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003c38:	2502      	movs	r5, #2
 8003c3a:	4095      	lsls	r5, r2
 8003c3c:	4225      	tst	r5, r4
 8003c3e:	d057      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x178>
 8003c40:	078d      	lsls	r5, r1, #30
 8003c42:	d555      	bpl.n	8003cf0 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	0694      	lsls	r4, r2, #26
 8003c48:	d406      	bmi.n	8003c58 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f022 020a 	bic.w	r2, r2, #10
 8003c50:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003c52:	2201      	movs	r2, #1
 8003c54:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c58:	4a31      	ldr	r2, [pc, #196]	; (8003d20 <HAL_DMA_IRQHandler+0x1a8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d91e      	bls.n	8003c9c <HAL_DMA_IRQHandler+0x124>
 8003c5e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x116>
 8003c66:	3214      	adds	r2, #20
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d012      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x11a>
 8003c6c:	3214      	adds	r2, #20
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d011      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x11e>
 8003c72:	3214      	adds	r2, #20
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf0c      	ite	eq
 8003c78:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8003c7c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8003c80:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <HAL_DMA_IRQHandler+0x1ac>)
 8003c82:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003c84:	2300      	movs	r3, #0
 8003c86:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003c8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c8c:	e79e      	b.n	8003bcc <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e7f6      	b.n	8003c80 <HAL_DMA_IRQHandler+0x108>
 8003c92:	2320      	movs	r3, #32
 8003c94:	e7f4      	b.n	8003c80 <HAL_DMA_IRQHandler+0x108>
 8003c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c9a:	e7f1      	b.n	8003c80 <HAL_DMA_IRQHandler+0x108>
 8003c9c:	4922      	ldr	r1, [pc, #136]	; (8003d28 <HAL_DMA_IRQHandler+0x1b0>)
 8003c9e:	428b      	cmp	r3, r1
 8003ca0:	d016      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x158>
 8003ca2:	3114      	adds	r1, #20
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	d015      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x15c>
 8003ca8:	3114      	adds	r1, #20
 8003caa:	428b      	cmp	r3, r1
 8003cac:	d014      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x160>
 8003cae:	3114      	adds	r1, #20
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	d014      	beq.n	8003cde <HAL_DMA_IRQHandler+0x166>
 8003cb4:	3114      	adds	r1, #20
 8003cb6:	428b      	cmp	r3, r1
 8003cb8:	d014      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x16c>
 8003cba:	3114      	adds	r1, #20
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	d014      	beq.n	8003cea <HAL_DMA_IRQHandler+0x172>
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bf14      	ite	ne
 8003cc4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8003cc8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <HAL_DMA_IRQHandler+0x1b4>)
 8003cce:	e7d8      	b.n	8003c82 <HAL_DMA_IRQHandler+0x10a>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e7fb      	b.n	8003ccc <HAL_DMA_IRQHandler+0x154>
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	e7f9      	b.n	8003ccc <HAL_DMA_IRQHandler+0x154>
 8003cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cdc:	e7f6      	b.n	8003ccc <HAL_DMA_IRQHandler+0x154>
 8003cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ce2:	e7f3      	b.n	8003ccc <HAL_DMA_IRQHandler+0x154>
 8003ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce8:	e7f0      	b.n	8003ccc <HAL_DMA_IRQHandler+0x154>
 8003cea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cee:	e7ed      	b.n	8003ccc <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cf0:	2508      	movs	r5, #8
 8003cf2:	4095      	lsls	r5, r2
 8003cf4:	4225      	tst	r5, r4
 8003cf6:	d011      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x1a4>
 8003cf8:	0709      	lsls	r1, r1, #28
 8003cfa:	d50f      	bpl.n	8003d1c <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	f021 010e 	bic.w	r1, r1, #14
 8003d02:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d04:	2301      	movs	r3, #1
 8003d06:	fa03 f202 	lsl.w	r2, r3, r2
 8003d0a:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d0c:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003d12:	2300      	movs	r3, #0
 8003d14:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003d18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003d1a:	e757      	b.n	8003bcc <HAL_DMA_IRQHandler+0x54>
}
 8003d1c:	bc70      	pop	{r4, r5, r6}
 8003d1e:	4770      	bx	lr
 8003d20:	40020080 	.word	0x40020080
 8003d24:	40020400 	.word	0x40020400
 8003d28:	40020008 	.word	0x40020008
 8003d2c:	40020000 	.word	0x40020000

08003d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d34:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8003d36:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d38:	4f6c      	ldr	r7, [pc, #432]	; (8003eec <HAL_GPIO_Init+0x1bc>)
 8003d3a:	4b6d      	ldr	r3, [pc, #436]	; (8003ef0 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d3c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8003ef8 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8003d40:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8003efc <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d44:	680a      	ldr	r2, [r1, #0]
 8003d46:	fa32 f506 	lsrs.w	r5, r2, r6
 8003d4a:	d102      	bne.n	8003d52 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8003d4c:	b003      	add	sp, #12
 8003d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003d52:	f04f 0801 	mov.w	r8, #1
 8003d56:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d5a:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8003d5e:	4590      	cmp	r8, r2
 8003d60:	f040 8084 	bne.w	8003e6c <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8003d64:	684d      	ldr	r5, [r1, #4]
 8003d66:	2d12      	cmp	r5, #18
 8003d68:	f000 80b1 	beq.w	8003ece <HAL_GPIO_Init+0x19e>
 8003d6c:	f200 8087 	bhi.w	8003e7e <HAL_GPIO_Init+0x14e>
 8003d70:	2d02      	cmp	r5, #2
 8003d72:	f000 80a9 	beq.w	8003ec8 <HAL_GPIO_Init+0x198>
 8003d76:	d87b      	bhi.n	8003e70 <HAL_GPIO_Init+0x140>
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	f000 808c 	beq.w	8003e96 <HAL_GPIO_Init+0x166>
 8003d7e:	2d01      	cmp	r5, #1
 8003d80:	f000 80a0 	beq.w	8003ec4 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d84:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d88:	2aff      	cmp	r2, #255	; 0xff
 8003d8a:	bf93      	iteet	ls
 8003d8c:	4682      	movls	sl, r0
 8003d8e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8003d92:	3d08      	subhi	r5, #8
 8003d94:	f8d0 b000 	ldrls.w	fp, [r0]
 8003d98:	bf92      	itee	ls
 8003d9a:	00b5      	lslls	r5, r6, #2
 8003d9c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8003da0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003da2:	fa09 f805 	lsl.w	r8, r9, r5
 8003da6:	ea2b 0808 	bic.w	r8, fp, r8
 8003daa:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dae:	bf88      	it	hi
 8003db0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003db4:	ea48 0505 	orr.w	r5, r8, r5
 8003db8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dbc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003dc0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003dc4:	d052      	beq.n	8003e6c <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dc6:	69bd      	ldr	r5, [r7, #24]
 8003dc8:	f026 0803 	bic.w	r8, r6, #3
 8003dcc:	f045 0501 	orr.w	r5, r5, #1
 8003dd0:	61bd      	str	r5, [r7, #24]
 8003dd2:	69bd      	ldr	r5, [r7, #24]
 8003dd4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003dd8:	f005 0501 	and.w	r5, r5, #1
 8003ddc:	9501      	str	r5, [sp, #4]
 8003dde:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003de2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003de6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003de8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003dec:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003df0:	fa09 f90b 	lsl.w	r9, r9, fp
 8003df4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003df8:	4d3e      	ldr	r5, [pc, #248]	; (8003ef4 <HAL_GPIO_Init+0x1c4>)
 8003dfa:	42a8      	cmp	r0, r5
 8003dfc:	d06c      	beq.n	8003ed8 <HAL_GPIO_Init+0x1a8>
 8003dfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e02:	42a8      	cmp	r0, r5
 8003e04:	d06a      	beq.n	8003edc <HAL_GPIO_Init+0x1ac>
 8003e06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e0a:	42a8      	cmp	r0, r5
 8003e0c:	d068      	beq.n	8003ee0 <HAL_GPIO_Init+0x1b0>
 8003e0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e12:	42a8      	cmp	r0, r5
 8003e14:	d066      	beq.n	8003ee4 <HAL_GPIO_Init+0x1b4>
 8003e16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e1a:	42a8      	cmp	r0, r5
 8003e1c:	d064      	beq.n	8003ee8 <HAL_GPIO_Init+0x1b8>
 8003e1e:	4570      	cmp	r0, lr
 8003e20:	bf0c      	ite	eq
 8003e22:	2505      	moveq	r5, #5
 8003e24:	2506      	movne	r5, #6
 8003e26:	fa05 f50b 	lsl.w	r5, r5, fp
 8003e2a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003e2e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003e32:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e34:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003e38:	bf14      	ite	ne
 8003e3a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e3c:	4395      	biceq	r5, r2
 8003e3e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003e40:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e42:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003e46:	bf14      	ite	ne
 8003e48:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e4a:	4395      	biceq	r5, r2
 8003e4c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e4e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e50:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e54:	bf14      	ite	ne
 8003e56:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e58:	4395      	biceq	r5, r2
 8003e5a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e5c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e5e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e62:	bf14      	ite	ne
 8003e64:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e66:	ea25 0202 	biceq.w	r2, r5, r2
 8003e6a:	60da      	str	r2, [r3, #12]
	position++;
 8003e6c:	3601      	adds	r6, #1
 8003e6e:	e769      	b.n	8003d44 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8003e70:	2d03      	cmp	r5, #3
 8003e72:	d025      	beq.n	8003ec0 <HAL_GPIO_Init+0x190>
 8003e74:	2d11      	cmp	r5, #17
 8003e76:	d185      	bne.n	8003d84 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e78:	68cc      	ldr	r4, [r1, #12]
 8003e7a:	3404      	adds	r4, #4
          break;
 8003e7c:	e782      	b.n	8003d84 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8003e7e:	4565      	cmp	r5, ip
 8003e80:	d009      	beq.n	8003e96 <HAL_GPIO_Init+0x166>
 8003e82:	d812      	bhi.n	8003eaa <HAL_GPIO_Init+0x17a>
 8003e84:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8003f00 <HAL_GPIO_Init+0x1d0>
 8003e88:	454d      	cmp	r5, r9
 8003e8a:	d004      	beq.n	8003e96 <HAL_GPIO_Init+0x166>
 8003e8c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8003e90:	454d      	cmp	r5, r9
 8003e92:	f47f af77 	bne.w	8003d84 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e96:	688c      	ldr	r4, [r1, #8]
 8003e98:	b1e4      	cbz	r4, 8003ed4 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e9a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8003e9c:	bf0c      	ite	eq
 8003e9e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8003ea2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ea6:	2408      	movs	r4, #8
 8003ea8:	e76c      	b.n	8003d84 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8003eaa:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8003f04 <HAL_GPIO_Init+0x1d4>
 8003eae:	454d      	cmp	r5, r9
 8003eb0:	d0f1      	beq.n	8003e96 <HAL_GPIO_Init+0x166>
 8003eb2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8003eb6:	454d      	cmp	r5, r9
 8003eb8:	d0ed      	beq.n	8003e96 <HAL_GPIO_Init+0x166>
 8003eba:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003ebe:	e7e7      	b.n	8003e90 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	e75f      	b.n	8003d84 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ec4:	68cc      	ldr	r4, [r1, #12]
          break;
 8003ec6:	e75d      	b.n	8003d84 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ec8:	68cc      	ldr	r4, [r1, #12]
 8003eca:	3408      	adds	r4, #8
          break;
 8003ecc:	e75a      	b.n	8003d84 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ece:	68cc      	ldr	r4, [r1, #12]
 8003ed0:	340c      	adds	r4, #12
          break;
 8003ed2:	e757      	b.n	8003d84 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ed4:	2404      	movs	r4, #4
 8003ed6:	e755      	b.n	8003d84 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ed8:	2500      	movs	r5, #0
 8003eda:	e7a4      	b.n	8003e26 <HAL_GPIO_Init+0xf6>
 8003edc:	2501      	movs	r5, #1
 8003ede:	e7a2      	b.n	8003e26 <HAL_GPIO_Init+0xf6>
 8003ee0:	2502      	movs	r5, #2
 8003ee2:	e7a0      	b.n	8003e26 <HAL_GPIO_Init+0xf6>
 8003ee4:	2503      	movs	r5, #3
 8003ee6:	e79e      	b.n	8003e26 <HAL_GPIO_Init+0xf6>
 8003ee8:	2504      	movs	r5, #4
 8003eea:	e79c      	b.n	8003e26 <HAL_GPIO_Init+0xf6>
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40010400 	.word	0x40010400
 8003ef4:	40010800 	.word	0x40010800
 8003ef8:	40011c00 	.word	0x40011c00
 8003efc:	10210000 	.word	0x10210000
 8003f00:	10110000 	.word	0x10110000
 8003f04:	10310000 	.word	0x10310000

08003f08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f08:	b10a      	cbz	r2, 8003f0e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f0a:	6101      	str	r1, [r0, #16]
 8003f0c:	4770      	bx	lr
 8003f0e:	0409      	lsls	r1, r1, #16
 8003f10:	e7fb      	b.n	8003f0a <HAL_GPIO_WritePin+0x2>

08003f12 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003f12:	68c3      	ldr	r3, [r0, #12]
 8003f14:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f16:	bf14      	ite	ne
 8003f18:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f1a:	6101      	streq	r1, [r0, #16]
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f24:	4605      	mov	r5, r0
 8003f26:	b908      	cbnz	r0, 8003f2c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003f28:	2001      	movs	r0, #1
 8003f2a:	e03c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2c:	6803      	ldr	r3, [r0, #0]
 8003f2e:	07db      	lsls	r3, r3, #31
 8003f30:	d410      	bmi.n	8003f54 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	079f      	lsls	r7, r3, #30
 8003f36:	d45d      	bmi.n	8003ff4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	0719      	lsls	r1, r3, #28
 8003f3c:	f100 8094 	bmi.w	8004068 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	075a      	lsls	r2, r3, #29
 8003f44:	f100 80be 	bmi.w	80040c4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f48:	69e8      	ldr	r0, [r5, #28]
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	f040 812c 	bne.w	80041a8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8003f50:	2000      	movs	r0, #0
 8003f52:	e028      	b.n	8003fa6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f54:	4c8f      	ldr	r4, [pc, #572]	; (8004194 <HAL_RCC_OscConfig+0x274>)
 8003f56:	6863      	ldr	r3, [r4, #4]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d007      	beq.n	8003f70 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f60:	6863      	ldr	r3, [r4, #4]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_OscConfig+0x5e>
 8003f6a:	6863      	ldr	r3, [r4, #4]
 8003f6c:	03de      	lsls	r6, r3, #15
 8003f6e:	d506      	bpl.n	8003f7e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	039c      	lsls	r4, r3, #14
 8003f74:	d5dd      	bpl.n	8003f32 <HAL_RCC_OscConfig+0x12>
 8003f76:	686b      	ldr	r3, [r5, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1da      	bne.n	8003f32 <HAL_RCC_OscConfig+0x12>
 8003f7c:	e7d4      	b.n	8003f28 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7e:	686b      	ldr	r3, [r5, #4]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d112      	bne.n	8003fac <HAL_RCC_OscConfig+0x8c>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f8e:	f7fe ff7f 	bl	8002e90 <HAL_GetTick>
 8003f92:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	0398      	lsls	r0, r3, #14
 8003f98:	d4cb      	bmi.n	8003f32 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9a:	f7fe ff79 	bl	8002e90 <HAL_GetTick>
 8003f9e:	1b80      	subs	r0, r0, r6
 8003fa0:	2864      	cmp	r0, #100	; 0x64
 8003fa2:	d9f7      	bls.n	8003f94 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8003fa4:	2003      	movs	r0, #3
}
 8003fa6:	b002      	add	sp, #8
 8003fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fac:	b99b      	cbnz	r3, 8003fd6 <HAL_RCC_OscConfig+0xb6>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003fbe:	f7fe ff67 	bl	8002e90 <HAL_GetTick>
 8003fc2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	0399      	lsls	r1, r3, #14
 8003fc8:	d5b3      	bpl.n	8003f32 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fca:	f7fe ff61 	bl	8002e90 <HAL_GetTick>
 8003fce:	1b80      	subs	r0, r0, r6
 8003fd0:	2864      	cmp	r0, #100	; 0x64
 8003fd2:	d9f7      	bls.n	8003fc4 <HAL_RCC_OscConfig+0xa4>
 8003fd4:	e7e6      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	d103      	bne.n	8003fe6 <HAL_RCC_OscConfig+0xc6>
 8003fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	e7cf      	b.n	8003f86 <HAL_RCC_OscConfig+0x66>
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff2:	e7cb      	b.n	8003f8c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ff4:	4c67      	ldr	r4, [pc, #412]	; (8004194 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	6863      	ldr	r3, [r4, #4]
 8003ff8:	f013 0f0c 	tst.w	r3, #12
 8003ffc:	d007      	beq.n	800400e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ffe:	6863      	ldr	r3, [r4, #4]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d110      	bne.n	800402a <HAL_RCC_OscConfig+0x10a>
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	03da      	lsls	r2, r3, #15
 800400c:	d40d      	bmi.n	800402a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	079b      	lsls	r3, r3, #30
 8004012:	d502      	bpl.n	800401a <HAL_RCC_OscConfig+0xfa>
 8004014:	692b      	ldr	r3, [r5, #16]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d186      	bne.n	8003f28 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	696a      	ldr	r2, [r5, #20]
 800401e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004022:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	e786      	b.n	8003f38 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800402a:	692a      	ldr	r2, [r5, #16]
 800402c:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_RCC_OscConfig+0x278>)
 800402e:	b16a      	cbz	r2, 800404c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004034:	f7fe ff2c 	bl	8002e90 <HAL_GetTick>
 8004038:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	079f      	lsls	r7, r3, #30
 800403e:	d4ec      	bmi.n	800401a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004040:	f7fe ff26 	bl	8002e90 <HAL_GetTick>
 8004044:	1b80      	subs	r0, r0, r6
 8004046:	2802      	cmp	r0, #2
 8004048:	d9f7      	bls.n	800403a <HAL_RCC_OscConfig+0x11a>
 800404a:	e7ab      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800404c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800404e:	f7fe ff1f 	bl	8002e90 <HAL_GetTick>
 8004052:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	0798      	lsls	r0, r3, #30
 8004058:	f57f af6e 	bpl.w	8003f38 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405c:	f7fe ff18 	bl	8002e90 <HAL_GetTick>
 8004060:	1b80      	subs	r0, r0, r6
 8004062:	2802      	cmp	r0, #2
 8004064:	d9f6      	bls.n	8004054 <HAL_RCC_OscConfig+0x134>
 8004066:	e79d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004068:	69aa      	ldr	r2, [r5, #24]
 800406a:	4c4a      	ldr	r4, [pc, #296]	; (8004194 <HAL_RCC_OscConfig+0x274>)
 800406c:	4b4b      	ldr	r3, [pc, #300]	; (800419c <HAL_RCC_OscConfig+0x27c>)
 800406e:	b1da      	cbz	r2, 80040a8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004074:	f7fe ff0c 	bl	8002e90 <HAL_GetTick>
 8004078:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800407c:	079b      	lsls	r3, r3, #30
 800407e:	d50d      	bpl.n	800409c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004080:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004084:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	fbb3 f3f2 	udiv	r3, r3, r2
 800408c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800408e:	bf00      	nop
  }
  while (Delay --);
 8004090:	9b01      	ldr	r3, [sp, #4]
 8004092:	1e5a      	subs	r2, r3, #1
 8004094:	9201      	str	r2, [sp, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f9      	bne.n	800408e <HAL_RCC_OscConfig+0x16e>
 800409a:	e751      	b.n	8003f40 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409c:	f7fe fef8 	bl	8002e90 <HAL_GetTick>
 80040a0:	1b80      	subs	r0, r0, r6
 80040a2:	2802      	cmp	r0, #2
 80040a4:	d9e9      	bls.n	800407a <HAL_RCC_OscConfig+0x15a>
 80040a6:	e77d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80040a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80040aa:	f7fe fef1 	bl	8002e90 <HAL_GetTick>
 80040ae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040b2:	079f      	lsls	r7, r3, #30
 80040b4:	f57f af44 	bpl.w	8003f40 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fe feea 	bl	8002e90 <HAL_GetTick>
 80040bc:	1b80      	subs	r0, r0, r6
 80040be:	2802      	cmp	r0, #2
 80040c0:	d9f6      	bls.n	80040b0 <HAL_RCC_OscConfig+0x190>
 80040c2:	e76f      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c4:	4c33      	ldr	r4, [pc, #204]	; (8004194 <HAL_RCC_OscConfig+0x274>)
 80040c6:	69e3      	ldr	r3, [r4, #28]
 80040c8:	00d8      	lsls	r0, r3, #3
 80040ca:	d424      	bmi.n	8004116 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80040cc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	69e3      	ldr	r3, [r4, #28]
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d4:	61e3      	str	r3, [r4, #28]
 80040d6:	69e3      	ldr	r3, [r4, #28]
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4e30      	ldr	r6, [pc, #192]	; (80041a4 <HAL_RCC_OscConfig+0x284>)
 80040e2:	6833      	ldr	r3, [r6, #0]
 80040e4:	05d9      	lsls	r1, r3, #23
 80040e6:	d518      	bpl.n	800411a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e8:	68eb      	ldr	r3, [r5, #12]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d126      	bne.n	800413c <HAL_RCC_OscConfig+0x21c>
 80040ee:	6a23      	ldr	r3, [r4, #32]
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80040f6:	f7fe fecb 	bl	8002e90 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80040fe:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	6a23      	ldr	r3, [r4, #32]
 8004102:	079b      	lsls	r3, r3, #30
 8004104:	d53f      	bpl.n	8004186 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8004106:	2f00      	cmp	r7, #0
 8004108:	f43f af1e 	beq.w	8003f48 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800410c:	69e3      	ldr	r3, [r4, #28]
 800410e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004112:	61e3      	str	r3, [r4, #28]
 8004114:	e718      	b.n	8003f48 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2700      	movs	r7, #0
 8004118:	e7e2      	b.n	80040e0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411a:	6833      	ldr	r3, [r6, #0]
 800411c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004120:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004122:	f7fe feb5 	bl	8002e90 <HAL_GetTick>
 8004126:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	6833      	ldr	r3, [r6, #0]
 800412a:	05da      	lsls	r2, r3, #23
 800412c:	d4dc      	bmi.n	80040e8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412e:	f7fe feaf 	bl	8002e90 <HAL_GetTick>
 8004132:	eba0 0008 	sub.w	r0, r0, r8
 8004136:	2864      	cmp	r0, #100	; 0x64
 8004138:	d9f6      	bls.n	8004128 <HAL_RCC_OscConfig+0x208>
 800413a:	e733      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413c:	b9ab      	cbnz	r3, 800416a <HAL_RCC_OscConfig+0x24a>
 800413e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	6223      	str	r3, [r4, #32]
 800414a:	6a23      	ldr	r3, [r4, #32]
 800414c:	f023 0304 	bic.w	r3, r3, #4
 8004150:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004152:	f7fe fe9d 	bl	8002e90 <HAL_GetTick>
 8004156:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004158:	6a23      	ldr	r3, [r4, #32]
 800415a:	0798      	lsls	r0, r3, #30
 800415c:	d5d3      	bpl.n	8004106 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fe fe97 	bl	8002e90 <HAL_GetTick>
 8004162:	1b80      	subs	r0, r0, r6
 8004164:	4540      	cmp	r0, r8
 8004166:	d9f7      	bls.n	8004158 <HAL_RCC_OscConfig+0x238>
 8004168:	e71c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416a:	2b05      	cmp	r3, #5
 800416c:	6a23      	ldr	r3, [r4, #32]
 800416e:	d103      	bne.n	8004178 <HAL_RCC_OscConfig+0x258>
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	6223      	str	r3, [r4, #32]
 8004176:	e7ba      	b.n	80040ee <HAL_RCC_OscConfig+0x1ce>
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	6223      	str	r3, [r4, #32]
 800417e:	6a23      	ldr	r3, [r4, #32]
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	e7b6      	b.n	80040f4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fe fe83 	bl	8002e90 <HAL_GetTick>
 800418a:	eba0 0008 	sub.w	r0, r0, r8
 800418e:	42b0      	cmp	r0, r6
 8004190:	d9b6      	bls.n	8004100 <HAL_RCC_OscConfig+0x1e0>
 8004192:	e707      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
 8004194:	40021000 	.word	0x40021000
 8004198:	42420000 	.word	0x42420000
 800419c:	42420480 	.word	0x42420480
 80041a0:	20000004 	.word	0x20000004
 80041a4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <HAL_RCC_OscConfig+0x334>)
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	461c      	mov	r4, r3
 80041ae:	f002 020c 	and.w	r2, r2, #12
 80041b2:	2a08      	cmp	r2, #8
 80041b4:	d03d      	beq.n	8004232 <HAL_RCC_OscConfig+0x312>
 80041b6:	2300      	movs	r3, #0
 80041b8:	4e27      	ldr	r6, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ba:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80041bc:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041be:	d12b      	bne.n	8004218 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80041c0:	f7fe fe66 	bl	8002e90 <HAL_GetTick>
 80041c4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	0199      	lsls	r1, r3, #6
 80041ca:	d41f      	bmi.n	800420c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041cc:	6a2b      	ldr	r3, [r5, #32]
 80041ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d2:	d105      	bne.n	80041e0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041d4:	6862      	ldr	r2, [r4, #4]
 80041d6:	68a9      	ldr	r1, [r5, #8]
 80041d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80041dc:	430a      	orrs	r2, r1
 80041de:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80041e2:	6862      	ldr	r2, [r4, #4]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80041ea:	4313      	orrs	r3, r2
 80041ec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80041ee:	2301      	movs	r3, #1
 80041f0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80041f2:	f7fe fe4d 	bl	8002e90 <HAL_GetTick>
 80041f6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	019a      	lsls	r2, r3, #6
 80041fc:	f53f aea8 	bmi.w	8003f50 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004200:	f7fe fe46 	bl	8002e90 <HAL_GetTick>
 8004204:	1b40      	subs	r0, r0, r5
 8004206:	2802      	cmp	r0, #2
 8004208:	d9f6      	bls.n	80041f8 <HAL_RCC_OscConfig+0x2d8>
 800420a:	e6cb      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7fe fe40 	bl	8002e90 <HAL_GetTick>
 8004210:	1bc0      	subs	r0, r0, r7
 8004212:	2802      	cmp	r0, #2
 8004214:	d9d7      	bls.n	80041c6 <HAL_RCC_OscConfig+0x2a6>
 8004216:	e6c5      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8004218:	f7fe fe3a 	bl	8002e90 <HAL_GetTick>
 800421c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	019b      	lsls	r3, r3, #6
 8004222:	f57f ae95 	bpl.w	8003f50 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004226:	f7fe fe33 	bl	8002e90 <HAL_GetTick>
 800422a:	1b40      	subs	r0, r0, r5
 800422c:	2802      	cmp	r0, #2
 800422e:	d9f6      	bls.n	800421e <HAL_RCC_OscConfig+0x2fe>
 8004230:	e6b8      	b.n	8003fa4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004232:	2801      	cmp	r0, #1
 8004234:	f43f aeb7 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8004238:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	6a2b      	ldr	r3, [r5, #32]
 800423c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8004240:	429a      	cmp	r2, r3
 8004242:	f47f ae71 	bne.w	8003f28 <HAL_RCC_OscConfig+0x8>
 8004246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004248:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800424c:	1ac0      	subs	r0, r0, r3
 800424e:	bf18      	it	ne
 8004250:	2001      	movne	r0, #1
 8004252:	e6a8      	b.n	8003fa6 <HAL_RCC_OscConfig+0x86>
 8004254:	40021000 	.word	0x40021000
 8004258:	42420060 	.word	0x42420060

0800425c <HAL_RCC_GetSysClockFreq>:
{
 800425c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800425e:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004260:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004262:	ac02      	add	r4, sp, #8
 8004264:	f103 0510 	add.w	r5, r3, #16
 8004268:	4622      	mov	r2, r4
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	3308      	adds	r3, #8
 8004270:	c203      	stmia	r2!, {r0, r1}
 8004272:	42ab      	cmp	r3, r5
 8004274:	4614      	mov	r4, r2
 8004276:	d1f7      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004278:	2301      	movs	r3, #1
 800427a:	f88d 3004 	strb.w	r3, [sp, #4]
 800427e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8004280:	4911      	ldr	r1, [pc, #68]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004282:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8004286:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004288:	f003 020c 	and.w	r2, r3, #12
 800428c:	2a08      	cmp	r2, #8
 800428e:	d117      	bne.n	80042c0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004290:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004294:	a806      	add	r0, sp, #24
 8004296:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004298:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800429a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800429e:	d50c      	bpl.n	80042ba <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042a0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042a2:	480a      	ldr	r0, [pc, #40]	; (80042cc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042a4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042a8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042aa:	aa06      	add	r2, sp, #24
 80042ac:	4413      	add	r3, r2
 80042ae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042b2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80042b6:	b007      	add	sp, #28
 80042b8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042ba:	4805      	ldr	r0, [pc, #20]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x74>)
 80042bc:	4350      	muls	r0, r2
 80042be:	e7fa      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80042c0:	4802      	ldr	r0, [pc, #8]	; (80042cc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80042c2:	e7f8      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x5a>
 80042c4:	0800580a 	.word	0x0800580a
 80042c8:	40021000 	.word	0x40021000
 80042cc:	007a1200 	.word	0x007a1200
 80042d0:	003d0900 	.word	0x003d0900

080042d4 <HAL_RCC_ClockConfig>:
{
 80042d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80042da:	4604      	mov	r4, r0
 80042dc:	b910      	cbnz	r0, 80042e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80042de:	2001      	movs	r0, #1
 80042e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4a45      	ldr	r2, [pc, #276]	; (80043fc <HAL_RCC_ClockConfig+0x128>)
 80042e6:	6813      	ldr	r3, [r2, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	428b      	cmp	r3, r1
 80042ee:	d329      	bcc.n	8004344 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	6821      	ldr	r1, [r4, #0]
 80042f2:	078e      	lsls	r6, r1, #30
 80042f4:	d431      	bmi.n	800435a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	07ca      	lsls	r2, r1, #31
 80042f8:	d444      	bmi.n	8004384 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042fa:	4a40      	ldr	r2, [pc, #256]	; (80043fc <HAL_RCC_ClockConfig+0x128>)
 80042fc:	6813      	ldr	r3, [r2, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	429d      	cmp	r5, r3
 8004304:	d367      	bcc.n	80043d6 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	4d3d      	ldr	r5, [pc, #244]	; (8004400 <HAL_RCC_ClockConfig+0x12c>)
 800430a:	f012 0f04 	tst.w	r2, #4
 800430e:	d16e      	bne.n	80043ee <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	0713      	lsls	r3, r2, #28
 8004312:	d506      	bpl.n	8004322 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004314:	686b      	ldr	r3, [r5, #4]
 8004316:	6922      	ldr	r2, [r4, #16]
 8004318:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800431c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004320:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004322:	f7ff ff9b 	bl	800425c <HAL_RCC_GetSysClockFreq>
 8004326:	686b      	ldr	r3, [r5, #4]
 8004328:	4a36      	ldr	r2, [pc, #216]	; (8004404 <HAL_RCC_ClockConfig+0x130>)
 800432a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800432e:	5cd3      	ldrb	r3, [r2, r3]
 8004330:	40d8      	lsrs	r0, r3
 8004332:	4b35      	ldr	r3, [pc, #212]	; (8004408 <HAL_RCC_ClockConfig+0x134>)
 8004334:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004336:	4b35      	ldr	r3, [pc, #212]	; (800440c <HAL_RCC_ClockConfig+0x138>)
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	f7fe fd67 	bl	8002e0c <HAL_InitTick>
  return HAL_OK;
 800433e:	2000      	movs	r0, #0
 8004340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004344:	6813      	ldr	r3, [r2, #0]
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	430b      	orrs	r3, r1
 800434c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4299      	cmp	r1, r3
 8004356:	d1c2      	bne.n	80042de <HAL_RCC_ClockConfig+0xa>
 8004358:	e7ca      	b.n	80042f0 <HAL_RCC_ClockConfig+0x1c>
 800435a:	4b29      	ldr	r3, [pc, #164]	; (8004400 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004360:	bf1e      	ittt	ne
 8004362:	685a      	ldrne	r2, [r3, #4]
 8004364:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004368:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800436c:	bf42      	ittt	mi
 800436e:	685a      	ldrmi	r2, [r3, #4]
 8004370:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8004374:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68a0      	ldr	r0, [r4, #8]
 800437a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800437e:	4302      	orrs	r2, r0
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e7b8      	b.n	80042f6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004384:	6862      	ldr	r2, [r4, #4]
 8004386:	4e1e      	ldr	r6, [pc, #120]	; (8004400 <HAL_RCC_ClockConfig+0x12c>)
 8004388:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438c:	d11b      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	d0a4      	beq.n	80042de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004394:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004396:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	4313      	orrs	r3, r2
 80043a0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80043a2:	f7fe fd75 	bl	8002e90 <HAL_GetTick>
 80043a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a8:	6873      	ldr	r3, [r6, #4]
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043b4:	d0a1      	beq.n	80042fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b6:	f7fe fd6b 	bl	8002e90 <HAL_GetTick>
 80043ba:	1bc0      	subs	r0, r0, r7
 80043bc:	4540      	cmp	r0, r8
 80043be:	d9f3      	bls.n	80043a8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80043c0:	2003      	movs	r0, #3
}
 80043c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043c6:	2a02      	cmp	r2, #2
 80043c8:	d102      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80043ce:	e7e0      	b.n	8004392 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	f013 0f02 	tst.w	r3, #2
 80043d4:	e7dd      	b.n	8004392 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	f023 0307 	bic.w	r3, r3, #7
 80043dc:	432b      	orrs	r3, r5
 80043de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e0:	6813      	ldr	r3, [r2, #0]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	429d      	cmp	r5, r3
 80043e8:	f47f af79 	bne.w	80042de <HAL_RCC_ClockConfig+0xa>
 80043ec:	e78b      	b.n	8004306 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ee:	686b      	ldr	r3, [r5, #4]
 80043f0:	68e1      	ldr	r1, [r4, #12]
 80043f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043f6:	430b      	orrs	r3, r1
 80043f8:	606b      	str	r3, [r5, #4]
 80043fa:	e789      	b.n	8004310 <HAL_RCC_ClockConfig+0x3c>
 80043fc:	40022000 	.word	0x40022000
 8004400:	40021000 	.word	0x40021000
 8004404:	0800581a 	.word	0x0800581a
 8004408:	20000004 	.word	0x20000004
 800440c:	2000000c 	.word	0x2000000c

08004410 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004412:	4a05      	ldr	r2, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	4a03      	ldr	r2, [pc, #12]	; (800442c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800441e:	6810      	ldr	r0, [r2, #0]
}
 8004420:	40d8      	lsrs	r0, r3
 8004422:	4770      	bx	lr
 8004424:	40021000 	.word	0x40021000
 8004428:	0800582a 	.word	0x0800582a
 800442c:	20000004 	.word	0x20000004

08004430 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004432:	4a05      	ldr	r2, [pc, #20]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	4a03      	ldr	r2, [pc, #12]	; (800444c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800443e:	6810      	ldr	r0, [r2, #0]
}
 8004440:	40d8      	lsrs	r0, r3
 8004442:	4770      	bx	lr
 8004444:	40021000 	.word	0x40021000
 8004448:	0800582a 	.word	0x0800582a
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004450:	6803      	ldr	r3, [r0, #0]
{
 8004452:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004456:	07d9      	lsls	r1, r3, #31
{
 8004458:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800445a:	d520      	bpl.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445c:	4c35      	ldr	r4, [pc, #212]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800445e:	69e3      	ldr	r3, [r4, #28]
 8004460:	00da      	lsls	r2, r3, #3
 8004462:	d432      	bmi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004464:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	69e3      	ldr	r3, [r4, #28]
 8004468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446c:	61e3      	str	r3, [r4, #28]
 800446e:	69e3      	ldr	r3, [r4, #28]
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	4e2f      	ldr	r6, [pc, #188]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800447a:	6833      	ldr	r3, [r6, #0]
 800447c:	05db      	lsls	r3, r3, #23
 800447e:	d526      	bpl.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004480:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004482:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004486:	d136      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004488:	6a23      	ldr	r3, [r4, #32]
 800448a:	686a      	ldr	r2, [r5, #4]
 800448c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004490:	4313      	orrs	r3, r2
 8004492:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004494:	b11f      	cbz	r7, 800449e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004496:	69e3      	ldr	r3, [r4, #28]
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800449e:	6828      	ldr	r0, [r5, #0]
 80044a0:	0783      	lsls	r3, r0, #30
 80044a2:	d506      	bpl.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80044a6:	68a9      	ldr	r1, [r5, #8]
 80044a8:	6853      	ldr	r3, [r2, #4]
 80044aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044b2:	f010 0010 	ands.w	r0, r0, #16
 80044b6:	d01b      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044b8:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80044ba:	6969      	ldr	r1, [r5, #20]
 80044bc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044be:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6053      	str	r3, [r2, #4]
 80044c8:	e012      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2700      	movs	r7, #0
 80044cc:	e7d4      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ce:	6833      	ldr	r3, [r6, #0]
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80044d6:	f7fe fcdb 	bl	8002e90 <HAL_GetTick>
 80044da:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	05d8      	lsls	r0, r3, #23
 80044e0:	d4ce      	bmi.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e2:	f7fe fcd5 	bl	8002e90 <HAL_GetTick>
 80044e6:	eba0 0008 	sub.w	r0, r0, r8
 80044ea:	2864      	cmp	r0, #100	; 0x64
 80044ec:	d9f6      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80044ee:	2003      	movs	r0, #3
}
 80044f0:	b002      	add	sp, #8
 80044f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f6:	686a      	ldr	r2, [r5, #4]
 80044f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d0c3      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004500:	2001      	movs	r0, #1
 8004502:	4a0e      	ldr	r2, [pc, #56]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004504:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004506:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004508:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800450a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800450e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8004510:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004512:	07d9      	lsls	r1, r3, #31
 8004514:	d5b8      	bpl.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8004516:	f7fe fcbb 	bl	8002e90 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800451e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004520:	6a23      	ldr	r3, [r4, #32]
 8004522:	079a      	lsls	r2, r3, #30
 8004524:	d4b0      	bmi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fe fcb3 	bl	8002e90 <HAL_GetTick>
 800452a:	1b80      	subs	r0, r0, r6
 800452c:	4540      	cmp	r0, r8
 800452e:	d9f7      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8004530:	e7dd      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000
 8004538:	40007000 	.word	0x40007000
 800453c:	42420440 	.word	0x42420440

08004540 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004540:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8004542:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8004554:	bf1e      	ittt	ne
 8004556:	681a      	ldrne	r2, [r3, #0]
 8004558:	f042 0201 	orrne.w	r2, r2, #1
 800455c:	601a      	strne	r2, [r3, #0]
}
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004560:	6803      	ldr	r3, [r0, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800456a:	f241 1211 	movw	r2, #4369	; 0x1111
 800456e:	6a19      	ldr	r1, [r3, #32]
 8004570:	4211      	tst	r1, r2
 8004572:	d108      	bne.n	8004586 <HAL_TIM_Base_Stop_IT+0x26>
 8004574:	f240 4244 	movw	r2, #1092	; 0x444
 8004578:	6a19      	ldr	r1, [r3, #32]
 800457a:	4211      	tst	r1, r2
 800457c:	bf02      	ittt	eq
 800457e:	681a      	ldreq	r2, [r3, #0]
 8004580:	f022 0201 	biceq.w	r2, r2, #1
 8004584:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8004586:	2000      	movs	r0, #0
 8004588:	4770      	bx	lr

0800458a <HAL_TIM_OC_DelayElapsedCallback>:
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_IC_CaptureCallback>:
 800458c:	4770      	bx	lr

0800458e <HAL_TIM_PWM_PulseFinishedCallback>:
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_TriggerCallback>:
 8004590:	4770      	bx	lr

08004592 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004592:	6803      	ldr	r3, [r0, #0]
{
 8004594:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004596:	691a      	ldr	r2, [r3, #16]
{
 8004598:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800459a:	0791      	lsls	r1, r2, #30
 800459c:	d50e      	bpl.n	80045bc <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	0792      	lsls	r2, r2, #30
 80045a2:	d50b      	bpl.n	80045bc <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045a4:	f06f 0202 	mvn.w	r2, #2
 80045a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045aa:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045ac:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ae:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b0:	079b      	lsls	r3, r3, #30
 80045b2:	d077      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045b4:	f7ff ffea 	bl	800458c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b8:	2300      	movs	r3, #0
 80045ba:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	0750      	lsls	r0, r2, #29
 80045c2:	d510      	bpl.n	80045e6 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	0751      	lsls	r1, r2, #29
 80045c8:	d50d      	bpl.n	80045e6 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045ca:	f06f 0204 	mvn.w	r2, #4
 80045ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045d0:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045d2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045d4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045d6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045dc:	d068      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80045de:	f7ff ffd5 	bl	800458c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	2300      	movs	r3, #0
 80045e4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	0712      	lsls	r2, r2, #28
 80045ec:	d50f      	bpl.n	800460e <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	0710      	lsls	r0, r2, #28
 80045f2:	d50c      	bpl.n	800460e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f4:	f06f 0208 	mvn.w	r2, #8
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fa:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045fc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004600:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004604:	d05a      	beq.n	80046bc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	f7ff ffc1 	bl	800458c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	2300      	movs	r3, #0
 800460c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	06d2      	lsls	r2, r2, #27
 8004614:	d510      	bpl.n	8004638 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	06d0      	lsls	r0, r2, #27
 800461a:	d50d      	bpl.n	8004638 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800461c:	f06f 0210 	mvn.w	r2, #16
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004622:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004624:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004626:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004628:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800462e:	d04b      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004630:	f7ff ffac 	bl	800458c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004634:	2300      	movs	r3, #0
 8004636:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	07d1      	lsls	r1, r2, #31
 800463e:	d508      	bpl.n	8004652 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	07d2      	lsls	r2, r2, #31
 8004644:	d505      	bpl.n	8004652 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004646:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800464a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800464c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800464e:	f7fd f86d 	bl	800172c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	0610      	lsls	r0, r2, #24
 8004658:	d508      	bpl.n	800466c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	0611      	lsls	r1, r2, #24
 800465e:	d505      	bpl.n	800466c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004660:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004664:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004666:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004668:	f000 f959 	bl	800491e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	0652      	lsls	r2, r2, #25
 8004672:	d508      	bpl.n	8004686 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	0650      	lsls	r0, r2, #25
 8004678:	d505      	bpl.n	8004686 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800467a:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800467e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004680:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004682:	f7ff ff85 	bl	8004590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	0691      	lsls	r1, r2, #26
 800468c:	d522      	bpl.n	80046d4 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	0692      	lsls	r2, r2, #26
 8004692:	d51f      	bpl.n	80046d4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004694:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004698:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800469a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800469e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80046a0:	f000 b93c 	b.w	800491c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a4:	f7ff ff71 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	4620      	mov	r0, r4
 80046aa:	f7ff ff70 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
 80046ae:	e783      	b.n	80045b8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b0:	f7ff ff6b 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	4620      	mov	r0, r4
 80046b6:	f7ff ff6a 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
 80046ba:	e792      	b.n	80045e2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046bc:	f7ff ff65 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	4620      	mov	r0, r4
 80046c2:	f7ff ff64 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
 80046c6:	e7a0      	b.n	800460a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c8:	f7ff ff5f 	bl	800458a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7ff ff5e 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
 80046d2:	e7af      	b.n	8004634 <HAL_TIM_IRQHandler+0xa2>
 80046d4:	bd10      	pop	{r4, pc}
	...

080046d8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d8:	4a24      	ldr	r2, [pc, #144]	; (800476c <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80046da:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046dc:	4290      	cmp	r0, r2
 80046de:	d012      	beq.n	8004706 <TIM_Base_SetConfig+0x2e>
 80046e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e4:	4290      	cmp	r0, r2
 80046e6:	d00e      	beq.n	8004706 <TIM_Base_SetConfig+0x2e>
 80046e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80046ec:	d00b      	beq.n	8004706 <TIM_Base_SetConfig+0x2e>
 80046ee:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80046f2:	4290      	cmp	r0, r2
 80046f4:	d007      	beq.n	8004706 <TIM_Base_SetConfig+0x2e>
 80046f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046fa:	4290      	cmp	r0, r2
 80046fc:	d003      	beq.n	8004706 <TIM_Base_SetConfig+0x2e>
 80046fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004702:	4290      	cmp	r0, r2
 8004704:	d11d      	bne.n	8004742 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004706:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800470c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <TIM_Base_SetConfig+0x94>)
 8004710:	4290      	cmp	r0, r2
 8004712:	d012      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 8004714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004718:	4290      	cmp	r0, r2
 800471a:	d00e      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 800471c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004720:	d00b      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 8004722:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004726:	4290      	cmp	r0, r2
 8004728:	d007      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 800472a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800472e:	4290      	cmp	r0, r2
 8004730:	d003      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 8004732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004736:	4290      	cmp	r0, r2
 8004738:	d103      	bne.n	8004742 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800473c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004740:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004742:	694a      	ldr	r2, [r1, #20]
 8004744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004748:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800474a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	688b      	ldr	r3, [r1, #8]
 800474e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004750:	680b      	ldr	r3, [r1, #0]
 8004752:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <TIM_Base_SetConfig+0x94>)
 8004756:	4298      	cmp	r0, r3
 8004758:	d003      	beq.n	8004762 <TIM_Base_SetConfig+0x8a>
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	4298      	cmp	r0, r3
 8004760:	d101      	bne.n	8004766 <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004762:	690b      	ldr	r3, [r1, #16]
 8004764:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004766:	2301      	movs	r3, #1
 8004768:	6143      	str	r3, [r0, #20]
 800476a:	4770      	bx	lr
 800476c:	40012c00 	.word	0x40012c00

08004770 <HAL_TIM_Base_Init>:
{
 8004770:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004772:	4604      	mov	r4, r0
 8004774:	b1a0      	cbz	r0, 80047a0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004776:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800477a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800477e:	b91b      	cbnz	r3, 8004788 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004780:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004784:	f7fe fa86 	bl	8002c94 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004790:	1d21      	adds	r1, r4, #4
 8004792:	f7ff ffa1 	bl	80046d8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004796:	2301      	movs	r3, #1
  return HAL_OK;
 8004798:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800479a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800479e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047a0:	2001      	movs	r0, #1
}
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047a4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047a6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047a8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047aa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80047b2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b4:	6083      	str	r3, [r0, #8]
 80047b6:	bd10      	pop	{r4, pc}

080047b8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80047b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80047bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80047be:	2b01      	cmp	r3, #1
{
 80047c0:	4604      	mov	r4, r0
 80047c2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80047c6:	d019      	beq.n	80047fc <HAL_TIM_ConfigClockSource+0x44>
 80047c8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80047ca:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80047ce:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80047d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80047de:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d065      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0xfa>
 80047e6:	d815      	bhi.n	8004814 <HAL_TIM_ConfigClockSource+0x5c>
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d00c      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x4e>
 80047ec:	d807      	bhi.n	80047fe <HAL_TIM_ConfigClockSource+0x46>
 80047ee:	b153      	cbz	r3, 8004806 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80047f2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80047f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80047fc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d001      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x4e>
 8004802:	2b30      	cmp	r3, #48	; 0x30
 8004804:	d1f4      	bne.n	80047f0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8004806:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004808:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800480c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004810:	4313      	orrs	r3, r2
 8004812:	e01a      	b.n	800484a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8004814:	2b60      	cmp	r3, #96	; 0x60
 8004816:	d034      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0xca>
 8004818:	d819      	bhi.n	800484e <HAL_TIM_ConfigClockSource+0x96>
 800481a:	2b50      	cmp	r3, #80	; 0x50
 800481c:	d1e8      	bne.n	80047f0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800481e:	684a      	ldr	r2, [r1, #4]
 8004820:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004822:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004824:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004826:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482a:	f025 0501 	bic.w	r5, r5, #1
 800482e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004830:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004832:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004834:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004838:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800483c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800483e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004840:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004846:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800484a:	6083      	str	r3, [r0, #8]
 800484c:	e7d0      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800484e:	2b70      	cmp	r3, #112	; 0x70
 8004850:	d00c      	beq.n	800486c <HAL_TIM_ConfigClockSource+0xb4>
 8004852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004856:	d1cb      	bne.n	80047f0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8004858:	68cb      	ldr	r3, [r1, #12]
 800485a:	684a      	ldr	r2, [r1, #4]
 800485c:	6889      	ldr	r1, [r1, #8]
 800485e:	f7ff ffa1 	bl	80047a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6893      	ldr	r3, [r2, #8]
 8004866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486a:	e008      	b.n	800487e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800486c:	68cb      	ldr	r3, [r1, #12]
 800486e:	684a      	ldr	r2, [r1, #4]
 8004870:	6889      	ldr	r1, [r1, #8]
 8004872:	f7ff ff97 	bl	80047a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800487a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800487e:	6093      	str	r3, [r2, #8]
      break;
 8004880:	e7b6      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004882:	684d      	ldr	r5, [r1, #4]
 8004884:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004886:	6a01      	ldr	r1, [r0, #32]
 8004888:	f021 0110 	bic.w	r1, r1, #16
 800488c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8004890:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004892:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800489a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800489e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80048a2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80048a4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80048a6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ac:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80048b0:	e7cb      	b.n	800484a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b2:	684a      	ldr	r2, [r1, #4]
 80048b4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80048b6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ba:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048be:	f025 0501 	bic.w	r5, r5, #1
 80048c2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80048c6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048cc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80048d0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80048d2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80048d4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048da:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80048de:	e7b4      	b.n	800484a <HAL_TIM_ConfigClockSource+0x92>

080048e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80048e4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	f04f 0302 	mov.w	r3, #2
 80048ec:	d014      	beq.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ee:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80048f4:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f6:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f8:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048fa:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80048fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004904:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004906:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004908:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800490a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800490c:	2301      	movs	r3, #1
 800490e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004912:	2300      	movs	r3, #0
 8004914:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004918:	4618      	mov	r0, r3

  return HAL_OK;
}
 800491a:	bd30      	pop	{r4, r5, pc}

0800491c <HAL_TIMEx_CommutCallback>:
 800491c:	4770      	bx	lr

0800491e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800491e:	4770      	bx	lr

08004920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004924:	6803      	ldr	r3, [r0, #0]
 8004926:	68c1      	ldr	r1, [r0, #12]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	2419      	movs	r4, #25
 800492c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004930:	430a      	orrs	r2, r1
 8004932:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004934:	6882      	ldr	r2, [r0, #8]
 8004936:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004938:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800493a:	4302      	orrs	r2, r0
 800493c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800493e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004942:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004946:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004948:	430a      	orrs	r2, r1
 800494a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	69a9      	ldr	r1, [r5, #24]
 8004950:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004954:	430a      	orrs	r2, r1
 8004956:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004958:	4a0d      	ldr	r2, [pc, #52]	; (8004990 <UART_SetConfig+0x70>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d114      	bne.n	8004988 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800495e:	f7ff fd67 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004962:	4360      	muls	r0, r4
 8004964:	686c      	ldr	r4, [r5, #4]
 8004966:	2264      	movs	r2, #100	; 0x64
 8004968:	00a4      	lsls	r4, r4, #2
 800496a:	fbb0 f0f4 	udiv	r0, r0, r4
 800496e:	fbb0 f4f2 	udiv	r4, r0, r2
 8004972:	fb02 0314 	mls	r3, r2, r4, r0
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	3332      	adds	r3, #50	; 0x32
 800497a:	fbb3 f3f2 	udiv	r3, r3, r2
 800497e:	6829      	ldr	r1, [r5, #0]
 8004980:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004984:	608b      	str	r3, [r1, #8]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7ff fd42 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 800498c:	e7e9      	b.n	8004962 <UART_SetConfig+0x42>
 800498e:	bf00      	nop
 8004990:	40013800 	.word	0x40013800

08004994 <HAL_UART_Init>:
{
 8004994:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004996:	4604      	mov	r4, r0
 8004998:	b340      	cbz	r0, 80049ec <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800499a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800499e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049a2:	b91b      	cbnz	r3, 80049ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80049a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80049a8:	f7fe f9c4 	bl	8002d34 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80049ac:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80049ae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80049b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80049b4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80049b6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80049b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049bc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80049be:	f7ff ffaf 	bl	8004920 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049dc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80049de:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80049ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80049ec:	2001      	movs	r0, #1
}
 80049ee:	bd10      	pop	{r4, pc}

080049f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80049f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80049f2:	e003      	b.n	80049fc <LoopCopyDataInit>

080049f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80049f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80049f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80049fa:	3104      	adds	r1, #4

080049fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80049fc:	480a      	ldr	r0, [pc, #40]	; (8004a28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004a00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004a02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004a04:	d3f6      	bcc.n	80049f4 <CopyDataInit>
  ldr r2, =_sbss
 8004a06:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004a08:	e002      	b.n	8004a10 <LoopFillZerobss>

08004a0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004a0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004a0c:	f842 3b04 	str.w	r3, [r2], #4

08004a10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004a10:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004a12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004a14:	d3f9      	bcc.n	8004a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a16:	f7fe f8e1 	bl	8002bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a1a:	f000 fd5d 	bl	80054d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a1e:	f7fd ffd1 	bl	80029c4 <main>
  bx lr
 8004a22:	4770      	bx	lr
  ldr r3, =_sidata
 8004a24:	08005c94 	.word	0x08005c94
  ldr r0, =_sdata
 8004a28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004a2c:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8004a30:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8004a34:	20000410 	.word	0x20000410

08004a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a38:	e7fe      	b.n	8004a38 <ADC1_2_IRQHandler>

08004a3a <_ZdlPv>:
 8004a3a:	f000 bd79 	b.w	8005530 <free>

08004a3e <_ZdaPv>:
 8004a3e:	f7ff bffc 	b.w	8004a3a <_ZdlPv>

08004a42 <__aeabi_atexit>:
 8004a42:	460b      	mov	r3, r1
 8004a44:	4601      	mov	r1, r0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 bd32 	b.w	80054b0 <__cxa_atexit>

08004a4c <_Znaj>:
 8004a4c:	f000 bd01 	b.w	8005452 <_Znwj>

08004a50 <__cxa_end_cleanup>:
 8004a50:	b41e      	push	{r1, r2, r3, r4}
 8004a52:	f000 f89c 	bl	8004b8e <__gnu_end_cleanup>
 8004a56:	bc1e      	pop	{r1, r2, r3, r4}
 8004a58:	f7fc fc5e 	bl	8001318 <_Unwind_Resume>

08004a5c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004a5c:	7803      	ldrb	r3, [r0, #0]
 8004a5e:	2b47      	cmp	r3, #71	; 0x47
 8004a60:	d117      	bne.n	8004a92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004a62:	7843      	ldrb	r3, [r0, #1]
 8004a64:	2b4e      	cmp	r3, #78	; 0x4e
 8004a66:	d114      	bne.n	8004a92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004a68:	7883      	ldrb	r3, [r0, #2]
 8004a6a:	2b55      	cmp	r3, #85	; 0x55
 8004a6c:	d111      	bne.n	8004a92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004a6e:	78c3      	ldrb	r3, [r0, #3]
 8004a70:	2b43      	cmp	r3, #67	; 0x43
 8004a72:	d10e      	bne.n	8004a92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004a74:	7903      	ldrb	r3, [r0, #4]
 8004a76:	2b43      	cmp	r3, #67	; 0x43
 8004a78:	d10b      	bne.n	8004a92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004a7a:	7943      	ldrb	r3, [r0, #5]
 8004a7c:	2b2b      	cmp	r3, #43	; 0x2b
 8004a7e:	d108      	bne.n	8004a92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004a80:	7983      	ldrb	r3, [r0, #6]
 8004a82:	2b2b      	cmp	r3, #43	; 0x2b
 8004a84:	d105      	bne.n	8004a92 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004a86:	79c0      	ldrb	r0, [r0, #7]
 8004a88:	2801      	cmp	r0, #1
 8004a8a:	bf8c      	ite	hi
 8004a8c:	2000      	movhi	r0, #0
 8004a8e:	2001      	movls	r0, #1
 8004a90:	4770      	bx	lr
 8004a92:	2000      	movs	r0, #0
 8004a94:	4770      	bx	lr
	...

08004a98 <__cxa_type_match>:
 8004a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004a9c:	461e      	mov	r6, r3
 8004a9e:	7803      	ldrb	r3, [r0, #0]
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	2b47      	cmp	r3, #71	; 0x47
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	79c1      	ldrb	r1, [r0, #7]
 8004aa8:	d147      	bne.n	8004b3a <__cxa_type_match+0xa2>
 8004aaa:	7843      	ldrb	r3, [r0, #1]
 8004aac:	2b4e      	cmp	r3, #78	; 0x4e
 8004aae:	d144      	bne.n	8004b3a <__cxa_type_match+0xa2>
 8004ab0:	7883      	ldrb	r3, [r0, #2]
 8004ab2:	2b55      	cmp	r3, #85	; 0x55
 8004ab4:	d141      	bne.n	8004b3a <__cxa_type_match+0xa2>
 8004ab6:	78c3      	ldrb	r3, [r0, #3]
 8004ab8:	2b43      	cmp	r3, #67	; 0x43
 8004aba:	d13e      	bne.n	8004b3a <__cxa_type_match+0xa2>
 8004abc:	7903      	ldrb	r3, [r0, #4]
 8004abe:	2b46      	cmp	r3, #70	; 0x46
 8004ac0:	d13b      	bne.n	8004b3a <__cxa_type_match+0xa2>
 8004ac2:	7943      	ldrb	r3, [r0, #5]
 8004ac4:	2b4f      	cmp	r3, #79	; 0x4f
 8004ac6:	d138      	bne.n	8004b3a <__cxa_type_match+0xa2>
 8004ac8:	7983      	ldrb	r3, [r0, #6]
 8004aca:	2b52      	cmp	r3, #82	; 0x52
 8004acc:	d135      	bne.n	8004b3a <__cxa_type_match+0xa2>
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d133      	bne.n	8004b3a <__cxa_type_match+0xa2>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	2400      	movs	r4, #0
 8004ad8:	9401      	str	r4, [sp, #4]
 8004ada:	bb33      	cbnz	r3, 8004b2a <__cxa_type_match+0x92>
 8004adc:	bb38      	cbnz	r0, 8004b2e <__cxa_type_match+0x96>
 8004ade:	2901      	cmp	r1, #1
 8004ae0:	bf0a      	itet	eq
 8004ae2:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8004ae6:	f1a2 0320 	subne.w	r3, r2, #32
 8004aea:	3b78      	subeq	r3, #120	; 0x78
 8004aec:	2901      	cmp	r1, #1
 8004aee:	bf0c      	ite	eq
 8004af0:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8004af4:	3258      	addne	r2, #88	; 0x58
 8004af6:	681c      	ldr	r4, [r3, #0]
 8004af8:	9201      	str	r2, [sp, #4]
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	4620      	mov	r0, r4
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4798      	blx	r3
 8004b02:	b1b0      	cbz	r0, 8004b32 <__cxa_type_match+0x9a>
 8004b04:	2702      	movs	r7, #2
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	aa01      	add	r2, sp, #4
 8004b10:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004b14:	4621      	mov	r1, r4
 8004b16:	2301      	movs	r3, #1
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47c0      	blx	r8
 8004b1c:	b158      	cbz	r0, 8004b36 <__cxa_type_match+0x9e>
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	4638      	mov	r0, r7
 8004b24:	b002      	add	sp, #8
 8004b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b2a:	4c08      	ldr	r4, [pc, #32]	; (8004b4c <__cxa_type_match+0xb4>)
 8004b2c:	e7e5      	b.n	8004afa <__cxa_type_match+0x62>
 8004b2e:	4c08      	ldr	r4, [pc, #32]	; (8004b50 <__cxa_type_match+0xb8>)
 8004b30:	e7e3      	b.n	8004afa <__cxa_type_match+0x62>
 8004b32:	2701      	movs	r7, #1
 8004b34:	e7ea      	b.n	8004b0c <__cxa_type_match+0x74>
 8004b36:	4607      	mov	r7, r0
 8004b38:	e7f3      	b.n	8004b22 <__cxa_type_match+0x8a>
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f7ff ff8e 	bl	8004a5c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004b40:	f080 0001 	eor.w	r0, r0, #1
 8004b44:	b2c0      	uxtb	r0, r0
 8004b46:	2300      	movs	r3, #0
 8004b48:	e7c5      	b.n	8004ad6 <__cxa_type_match+0x3e>
 8004b4a:	bf00      	nop
 8004b4c:	080058a8 	.word	0x080058a8
 8004b50:	080058b0 	.word	0x080058b0

08004b54 <__cxa_begin_cleanup>:
 8004b54:	b510      	push	{r4, lr}
 8004b56:	4604      	mov	r4, r0
 8004b58:	f000 fc8c 	bl	8005474 <__cxa_get_globals>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f1a4 0120 	sub.w	r1, r4, #32
 8004b64:	f7ff ff7a 	bl	8004a5c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004b68:	b160      	cbz	r0, 8004b84 <__cxa_begin_cleanup+0x30>
 8004b6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	f844 3c04 	str.w	r3, [r4, #-4]
 8004b76:	d103      	bne.n	8004b80 <__cxa_begin_cleanup+0x2c>
 8004b78:	6893      	ldr	r3, [r2, #8]
 8004b7a:	f844 3c08 	str.w	r3, [r4, #-8]
 8004b7e:	6091      	str	r1, [r2, #8]
 8004b80:	2001      	movs	r0, #1
 8004b82:	bd10      	pop	{r4, pc}
 8004b84:	6893      	ldr	r3, [r2, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f9      	beq.n	8004b7e <__cxa_begin_cleanup+0x2a>
 8004b8a:	f000 fc4b 	bl	8005424 <_ZSt9terminatev>

08004b8e <__gnu_end_cleanup>:
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	f000 fc70 	bl	8005474 <__cxa_get_globals>
 8004b94:	6882      	ldr	r2, [r0, #8]
 8004b96:	4601      	mov	r1, r0
 8004b98:	b90a      	cbnz	r2, 8004b9e <__gnu_end_cleanup+0x10>
 8004b9a:	f000 fc43 	bl	8005424 <_ZSt9terminatev>
 8004b9e:	f102 0420 	add.w	r4, r2, #32
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff ff5a 	bl	8004a5c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004ba8:	b140      	cbz	r0, 8004bbc <__gnu_end_cleanup+0x2e>
 8004baa:	69d3      	ldr	r3, [r2, #28]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	61d3      	str	r3, [r2, #28]
 8004bb0:	b913      	cbnz	r3, 8004bb8 <__gnu_end_cleanup+0x2a>
 8004bb2:	6990      	ldr	r0, [r2, #24]
 8004bb4:	6088      	str	r0, [r1, #8]
 8004bb6:	6193      	str	r3, [r2, #24]
 8004bb8:	4620      	mov	r0, r4
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	6088      	str	r0, [r1, #8]
 8004bbe:	e7fb      	b.n	8004bb8 <__gnu_end_cleanup+0x2a>

08004bc0 <_ZL12read_uleb128PKhPm>:
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	b570      	push	{r4, r5, r6, lr}
 8004bc4:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8004bc8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8004bcc:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004bd0:	1994      	adds	r4, r2, r6
 8004bd2:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8004bd6:	40a2      	lsls	r2, r4
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	062a      	lsls	r2, r5, #24
 8004bdc:	d4f4      	bmi.n	8004bc8 <_ZL12read_uleb128PKhPm+0x8>
 8004bde:	600b      	str	r3, [r1, #0]
 8004be0:	bd70      	pop	{r4, r5, r6, pc}

08004be2 <_ZL12read_sleb128PKhPl>:
 8004be2:	2300      	movs	r3, #0
 8004be4:	461a      	mov	r2, r3
 8004be6:	b530      	push	{r4, r5, lr}
 8004be8:	f810 4b01 	ldrb.w	r4, [r0], #1
 8004bec:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8004bf0:	4095      	lsls	r5, r2
 8004bf2:	432b      	orrs	r3, r5
 8004bf4:	0625      	lsls	r5, r4, #24
 8004bf6:	f102 0207 	add.w	r2, r2, #7
 8004bfa:	d4f5      	bmi.n	8004be8 <_ZL12read_sleb128PKhPl+0x6>
 8004bfc:	2a1f      	cmp	r2, #31
 8004bfe:	d806      	bhi.n	8004c0e <_ZL12read_sleb128PKhPl+0x2c>
 8004c00:	0664      	lsls	r4, r4, #25
 8004c02:	bf42      	ittt	mi
 8004c04:	f04f 34ff 	movmi.w	r4, #4294967295
 8004c08:	fa04 f202 	lslmi.w	r2, r4, r2
 8004c0c:	4313      	orrmi	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
 8004c10:	bd30      	pop	{r4, r5, pc}

08004c12 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8004c12:	2850      	cmp	r0, #80	; 0x50
 8004c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c16:	4605      	mov	r5, r0
 8004c18:	460e      	mov	r6, r1
 8004c1a:	4614      	mov	r4, r2
 8004c1c:	461f      	mov	r7, r3
 8004c1e:	d107      	bne.n	8004c30 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8004c20:	1cd0      	adds	r0, r2, #3
 8004c22:	f020 0003 	bic.w	r0, r0, #3
 8004c26:	f850 3b04 	ldr.w	r3, [r0], #4
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	b003      	add	sp, #12
 8004c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c30:	f000 030f 	and.w	r3, r0, #15
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	d82e      	bhi.n	8004c96 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8004c38:	e8df f003 	tbb	[pc, r3]
 8004c3c:	251d0725 	.word	0x251d0725
 8004c40:	2d2d2d29 	.word	0x2d2d2d29
 8004c44:	2521182d 	.word	0x2521182d
 8004c48:	29          	.byte	0x29
 8004c49:	00          	.byte	0x00
 8004c4a:	a901      	add	r1, sp, #4
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7ff ffb7 	bl	8004bc0 <_ZL12read_uleb128PKhPm>
 8004c52:	9b01      	ldr	r3, [sp, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0e8      	beq.n	8004c2a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8004c58:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8004c5c:	2a10      	cmp	r2, #16
 8004c5e:	bf08      	it	eq
 8004c60:	4626      	moveq	r6, r4
 8004c62:	062a      	lsls	r2, r5, #24
 8004c64:	4433      	add	r3, r6
 8004c66:	bf48      	it	mi
 8004c68:	681b      	ldrmi	r3, [r3, #0]
 8004c6a:	e7de      	b.n	8004c2a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8004c6c:	a901      	add	r1, sp, #4
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f7ff ffb7 	bl	8004be2 <_ZL12read_sleb128PKhPl>
 8004c74:	e7ed      	b.n	8004c52 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8004c76:	4620      	mov	r0, r4
 8004c78:	f830 3b02 	ldrh.w	r3, [r0], #2
 8004c7c:	e7ea      	b.n	8004c54 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8004c84:	e7e6      	b.n	8004c54 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8004c86:	4620      	mov	r0, r4
 8004c88:	f850 3b04 	ldr.w	r3, [r0], #4
 8004c8c:	e7e2      	b.n	8004c54 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f850 3b08 	ldr.w	r3, [r0], #8
 8004c94:	e7de      	b.n	8004c54 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8004c96:	f000 fbfb 	bl	8005490 <abort>

08004c9a <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8004c9a:	b508      	push	{r3, lr}
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2bff      	cmp	r3, #255	; 0xff
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	d007      	beq.n	8004cb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d00d      	beq.n	8004cc8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8004cac:	d804      	bhi.n	8004cb8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8004cae:	b10b      	cbz	r3, 8004cb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d107      	bne.n	8004cc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	bd08      	pop	{r3, pc}
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d00d      	beq.n	8004cd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8004cbc:	2b50      	cmp	r3, #80	; 0x50
 8004cbe:	d0f9      	beq.n	8004cb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d005      	beq.n	8004cd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8004cc4:	f000 fbe4 	bl	8005490 <abort>
 8004cc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004ccc:	f7fc bd26 	b.w	800171c <_Unwind_GetTextRelBase>
 8004cd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cd4:	f7fc bd26 	b.w	8001724 <_Unwind_GetDataRelBase>
 8004cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cdc:	f7fc bd0e 	b.w	80016fc <_Unwind_GetRegionStart>

08004ce0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	4601      	mov	r1, r0
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	4615      	mov	r5, r2
 8004cea:	461e      	mov	r6, r3
 8004cec:	f7ff ffd5 	bl	8004c9a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004cf0:	4633      	mov	r3, r6
 8004cf2:	462a      	mov	r2, r5
 8004cf4:	4601      	mov	r1, r0
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cfc:	f7ff bf89 	b.w	8004c12 <_ZL28read_encoded_value_with_basehjPKhPj>

08004d00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8004d00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d02:	460e      	mov	r6, r1
 8004d04:	4614      	mov	r4, r2
 8004d06:	4605      	mov	r5, r0
 8004d08:	b318      	cbz	r0, 8004d52 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 8004d0a:	f7fc fcf7 	bl	80016fc <_Unwind_GetRegionStart>
 8004d0e:	6020      	str	r0, [r4, #0]
 8004d10:	7831      	ldrb	r1, [r6, #0]
 8004d12:	1c72      	adds	r2, r6, #1
 8004d14:	29ff      	cmp	r1, #255	; 0xff
 8004d16:	d01d      	beq.n	8004d54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8004d18:	1d23      	adds	r3, r4, #4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f7ff ffe0 	bl	8004ce0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004d20:	4602      	mov	r2, r0
 8004d22:	7813      	ldrb	r3, [r2, #0]
 8004d24:	1c50      	adds	r0, r2, #1
 8004d26:	2bff      	cmp	r3, #255	; 0xff
 8004d28:	7523      	strb	r3, [r4, #20]
 8004d2a:	d015      	beq.n	8004d58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	a901      	add	r1, sp, #4
 8004d30:	7523      	strb	r3, [r4, #20]
 8004d32:	f7ff ff45 	bl	8004bc0 <_ZL12read_uleb128PKhPm>
 8004d36:	9b01      	ldr	r3, [sp, #4]
 8004d38:	4403      	add	r3, r0
 8004d3a:	60e3      	str	r3, [r4, #12]
 8004d3c:	7803      	ldrb	r3, [r0, #0]
 8004d3e:	a901      	add	r1, sp, #4
 8004d40:	7563      	strb	r3, [r4, #21]
 8004d42:	3001      	adds	r0, #1
 8004d44:	f7ff ff3c 	bl	8004bc0 <_ZL12read_uleb128PKhPm>
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	4403      	add	r3, r0
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd70      	pop	{r4, r5, r6, pc}
 8004d52:	e7dc      	b.n	8004d0e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8004d54:	6060      	str	r0, [r4, #4]
 8004d56:	e7e4      	b.n	8004d22 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e7ee      	b.n	8004d3a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

08004d5c <_Unwind_GetGR>:
 8004d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d5e:	ab03      	add	r3, sp, #12
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	460a      	mov	r2, r1
 8004d66:	4619      	mov	r1, r3
 8004d68:	f7fb ff2c 	bl	8000bc4 <_Unwind_VRS_Get>
 8004d6c:	9803      	ldr	r0, [sp, #12]
 8004d6e:	b005      	add	sp, #20
 8004d70:	f85d fb04 	ldr.w	pc, [sp], #4

08004d74 <__gxx_personality_v0>:
 8004d74:	2300      	movs	r3, #0
 8004d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7a:	b091      	sub	sp, #68	; 0x44
 8004d7c:	9304      	str	r3, [sp, #16]
 8004d7e:	f000 0303 	and.w	r3, r0, #3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	4607      	mov	r7, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	4616      	mov	r6, r2
 8004d8a:	d011      	beq.n	8004db0 <__gxx_personality_v0+0x3c>
 8004d8c:	d303      	bcc.n	8004d96 <__gxx_personality_v0+0x22>
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d003      	beq.n	8004d9a <__gxx_personality_v0+0x26>
 8004d92:	f000 fb7d 	bl	8005490 <abort>
 8004d96:	0702      	lsls	r2, r0, #28
 8004d98:	d51a      	bpl.n	8004dd0 <__gxx_personality_v0+0x5c>
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7fc fc97 	bl	80016d0 <__gnu_unwind_frame>
 8004da2:	b118      	cbz	r0, 8004dac <__gxx_personality_v0+0x38>
 8004da4:	2009      	movs	r0, #9
 8004da6:	b011      	add	sp, #68	; 0x44
 8004da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dac:	2008      	movs	r0, #8
 8004dae:	e7fa      	b.n	8004da6 <__gxx_personality_v0+0x32>
 8004db0:	f000 0508 	and.w	r5, r0, #8
 8004db4:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8004db8:	bb85      	cbnz	r5, 8004e1c <__gxx_personality_v0+0xa8>
 8004dba:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	210d      	movs	r1, #13
 8004dc2:	f7ff ffcb 	bl	8004d5c <_Unwind_GetGR>
 8004dc6:	4581      	cmp	r9, r0
 8004dc8:	f040 8140 	bne.w	800504c <__gxx_personality_v0+0x2d8>
 8004dcc:	2506      	movs	r5, #6
 8004dce:	e000      	b.n	8004dd2 <__gxx_personality_v0+0x5e>
 8004dd0:	2501      	movs	r5, #1
 8004dd2:	ab10      	add	r3, sp, #64	; 0x40
 8004dd4:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f007 0708 	and.w	r7, r7, #8
 8004de0:	433d      	orrs	r5, r7
 8004de2:	220c      	movs	r2, #12
 8004de4:	4619      	mov	r1, r3
 8004de6:	4630      	mov	r0, r6
 8004de8:	f7fb ff12 	bl	8000c10 <_Unwind_VRS_Set>
 8004dec:	2d06      	cmp	r5, #6
 8004dee:	f040 8139 	bne.w	8005064 <__gxx_personality_v0+0x2f0>
 8004df2:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8004df6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004df8:	f1b8 0f00 	cmp.w	r8, #0
 8004dfc:	bf0c      	ite	eq
 8004dfe:	f04f 0a01 	moveq.w	sl, #1
 8004e02:	f04f 0a03 	movne.w	sl, #3
 8004e06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e08:	f015 0508 	ands.w	r5, r5, #8
 8004e0c:	f000 80ce 	beq.w	8004fac <__gxx_personality_v0+0x238>
 8004e10:	f1ba 0f01 	cmp.w	sl, #1
 8004e14:	f040 80c6 	bne.w	8004fa4 <__gxx_personality_v0+0x230>
 8004e18:	f000 fb04 	bl	8005424 <_ZSt9terminatev>
 8004e1c:	2502      	movs	r5, #2
 8004e1e:	e7d8      	b.n	8004dd2 <__gxx_personality_v0+0x5e>
 8004e20:	9a07      	ldr	r2, [sp, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	429f      	cmp	r7, r3
 8004e26:	f080 8137 	bcs.w	8005098 <__gxx_personality_v0+0x324>
 8004e2a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e2e:	f1b8 0f00 	cmp.w	r8, #0
 8004e32:	d001      	beq.n	8004e38 <__gxx_personality_v0+0xc4>
 8004e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e36:	4498      	add	r8, r3
 8004e38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e3a:	b117      	cbz	r7, 8004e42 <__gxx_personality_v0+0xce>
 8004e3c:	1e78      	subs	r0, r7, #1
 8004e3e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004e40:	4407      	add	r7, r0
 8004e42:	f1b8 0f00 	cmp.w	r8, #0
 8004e46:	d0a8      	beq.n	8004d9a <__gxx_personality_v0+0x26>
 8004e48:	2f00      	cmp	r7, #0
 8004e4a:	f000 80a1 	beq.w	8004f90 <__gxx_personality_v0+0x21c>
 8004e4e:	f015 0308 	ands.w	r3, r5, #8
 8004e52:	9302      	str	r3, [sp, #8]
 8004e54:	d036      	beq.n	8004ec4 <__gxx_personality_v0+0x150>
 8004e56:	2347      	movs	r3, #71	; 0x47
 8004e58:	7023      	strb	r3, [r4, #0]
 8004e5a:	234e      	movs	r3, #78	; 0x4e
 8004e5c:	7063      	strb	r3, [r4, #1]
 8004e5e:	2355      	movs	r3, #85	; 0x55
 8004e60:	70a3      	strb	r3, [r4, #2]
 8004e62:	2343      	movs	r3, #67	; 0x43
 8004e64:	70e3      	strb	r3, [r4, #3]
 8004e66:	2346      	movs	r3, #70	; 0x46
 8004e68:	7123      	strb	r3, [r4, #4]
 8004e6a:	234f      	movs	r3, #79	; 0x4f
 8004e6c:	7163      	strb	r3, [r4, #5]
 8004e6e:	2352      	movs	r3, #82	; 0x52
 8004e70:	71a3      	strb	r3, [r4, #6]
 8004e72:	2300      	movs	r3, #0
 8004e74:	71e3      	strb	r3, [r4, #7]
 8004e76:	f04f 0a00 	mov.w	sl, #0
 8004e7a:	f06f 0b03 	mvn.w	fp, #3
 8004e7e:	a907      	add	r1, sp, #28
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff feae 	bl	8004be2 <_ZL12read_sleb128PKhPl>
 8004e86:	a908      	add	r1, sp, #32
 8004e88:	9003      	str	r0, [sp, #12]
 8004e8a:	f7ff feaa 	bl	8004be2 <_ZL12read_sleb128PKhPl>
 8004e8e:	9a07      	ldr	r2, [sp, #28]
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	d076      	beq.n	8004f82 <__gxx_personality_v0+0x20e>
 8004e94:	dd3d      	ble.n	8004f12 <__gxx_personality_v0+0x19e>
 8004e96:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004e9a:	28ff      	cmp	r0, #255	; 0xff
 8004e9c:	d035      	beq.n	8004f0a <__gxx_personality_v0+0x196>
 8004e9e:	f000 0307 	and.w	r3, r0, #7
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	f63f af75 	bhi.w	8004d92 <__gxx_personality_v0+0x1e>
 8004ea8:	a101      	add	r1, pc, #4	; (adr r1, 8004eb0 <__gxx_personality_v0+0x13c>)
 8004eaa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004f0f 	.word	0x08004f0f
 8004eb4:	08004d93 	.word	0x08004d93
 8004eb8:	08004ed7 	.word	0x08004ed7
 8004ebc:	08004f0f 	.word	0x08004f0f
 8004ec0:	08004f07 	.word	0x08004f07
 8004ec4:	79e3      	ldrb	r3, [r4, #7]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	bf0c      	ite	eq
 8004eca:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8004ece:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8004ed2:	9304      	str	r3, [sp, #16]
 8004ed4:	e7cf      	b.n	8004e76 <__gxx_personality_v0+0x102>
 8004ed6:	2702      	movs	r7, #2
 8004ed8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004eda:	ab09      	add	r3, sp, #36	; 0x24
 8004edc:	fb07 1212 	mls	r2, r7, r2, r1
 8004ee0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ee2:	f7ff fe96 	bl	8004c12 <_ZL28read_encoded_value_with_basehjPKhPj>
 8004ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ee8:	b369      	cbz	r1, 8004f46 <__gxx_personality_v0+0x1d2>
 8004eea:	b12c      	cbz	r4, 8004ef8 <__gxx_personality_v0+0x184>
 8004eec:	ab04      	add	r3, sp, #16
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f7ff fdd1 	bl	8004a98 <__cxa_type_match>
 8004ef6:	bb30      	cbnz	r0, 8004f46 <__gxx_personality_v0+0x1d2>
 8004ef8:	9f08      	ldr	r7, [sp, #32]
 8004efa:	2f00      	cmp	r7, #0
 8004efc:	d044      	beq.n	8004f88 <__gxx_personality_v0+0x214>
 8004efe:	9b03      	ldr	r3, [sp, #12]
 8004f00:	443b      	add	r3, r7
 8004f02:	461f      	mov	r7, r3
 8004f04:	e7bb      	b.n	8004e7e <__gxx_personality_v0+0x10a>
 8004f06:	2708      	movs	r7, #8
 8004f08:	e7e6      	b.n	8004ed8 <__gxx_personality_v0+0x164>
 8004f0a:	2700      	movs	r7, #0
 8004f0c:	e7e4      	b.n	8004ed8 <__gxx_personality_v0+0x164>
 8004f0e:	2704      	movs	r7, #4
 8004f10:	e7e2      	b.n	8004ed8 <__gxx_personality_v0+0x164>
 8004f12:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004f14:	3201      	adds	r2, #1
 8004f16:	b36c      	cbz	r4, 8004f74 <__gxx_personality_v0+0x200>
 8004f18:	9b02      	ldr	r3, [sp, #8]
 8004f1a:	bb5b      	cbnz	r3, 8004f74 <__gxx_personality_v0+0x200>
 8004f1c:	fb0b 7202 	mla	r2, fp, r2, r7
 8004f20:	9b04      	ldr	r3, [sp, #16]
 8004f22:	1f17      	subs	r7, r2, #4
 8004f24:	9306      	str	r3, [sp, #24]
 8004f26:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8004f2a:	b141      	cbz	r1, 8004f3e <__gxx_personality_v0+0x1ca>
 8004f2c:	ab06      	add	r3, sp, #24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	4439      	add	r1, r7
 8004f32:	4620      	mov	r0, r4
 8004f34:	f7ff fdb0 	bl	8004a98 <__cxa_type_match>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d0f4      	beq.n	8004f26 <__gxx_personality_v0+0x1b2>
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	f081 0101 	eor.w	r1, r1, #1
 8004f42:	2900      	cmp	r1, #0
 8004f44:	d0d8      	beq.n	8004ef8 <__gxx_personality_v0+0x184>
 8004f46:	f04f 0a03 	mov.w	sl, #3
 8004f4a:	9f07      	ldr	r7, [sp, #28]
 8004f4c:	07eb      	lsls	r3, r5, #31
 8004f4e:	d527      	bpl.n	8004fa0 <__gxx_personality_v0+0x22c>
 8004f50:	f1ba 0f02 	cmp.w	sl, #2
 8004f54:	f43f af21 	beq.w	8004d9a <__gxx_personality_v0+0x26>
 8004f58:	210d      	movs	r1, #13
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	9d04      	ldr	r5, [sp, #16]
 8004f5e:	f7ff fefd 	bl	8004d5c <_Unwind_GetGR>
 8004f62:	6265      	str	r5, [r4, #36]	; 0x24
 8004f64:	6220      	str	r0, [r4, #32]
 8004f66:	62a7      	str	r7, [r4, #40]	; 0x28
 8004f68:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8004f6c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8004f70:	2006      	movs	r0, #6
 8004f72:	e718      	b.n	8004da6 <__gxx_personality_v0+0x32>
 8004f74:	fb0b f202 	mul.w	r2, fp, r2
 8004f78:	58b9      	ldr	r1, [r7, r2]
 8004f7a:	fab1 f181 	clz	r1, r1
 8004f7e:	0949      	lsrs	r1, r1, #5
 8004f80:	e7df      	b.n	8004f42 <__gxx_personality_v0+0x1ce>
 8004f82:	f04f 0a01 	mov.w	sl, #1
 8004f86:	e7b7      	b.n	8004ef8 <__gxx_personality_v0+0x184>
 8004f88:	f1ba 0f00 	cmp.w	sl, #0
 8004f8c:	f43f af05 	beq.w	8004d9a <__gxx_personality_v0+0x26>
 8004f90:	f04f 0a02 	mov.w	sl, #2
 8004f94:	e7da      	b.n	8004f4c <__gxx_personality_v0+0x1d8>
 8004f96:	2700      	movs	r7, #0
 8004f98:	f04f 0a01 	mov.w	sl, #1
 8004f9c:	46b8      	mov	r8, r7
 8004f9e:	e7d5      	b.n	8004f4c <__gxx_personality_v0+0x1d8>
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	e731      	b.n	8004e08 <__gxx_personality_v0+0x94>
 8004fa4:	2f00      	cmp	r7, #0
 8004fa6:	da23      	bge.n	8004ff0 <__gxx_personality_v0+0x27c>
 8004fa8:	f000 fa4e 	bl	8005448 <_ZSt10unexpectedv>
 8004fac:	f1ba 0f01 	cmp.w	sl, #1
 8004fb0:	d102      	bne.n	8004fb8 <__gxx_personality_v0+0x244>
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f000 f9c0 	bl	8005338 <__cxa_call_terminate>
 8004fb8:	2f00      	cmp	r7, #0
 8004fba:	da19      	bge.n	8004ff0 <__gxx_personality_v0+0x27c>
 8004fbc:	aa0a      	add	r2, sp, #40	; 0x28
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	f7ff fe9e 	bl	8004d00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004fca:	f7ff fe66 	bl	8004c9a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004fce:	f06f 0303 	mvn.w	r3, #3
 8004fd2:	fb07 3203 	mla	r2, r7, r3, r3
 8004fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fd8:	900c      	str	r0, [sp, #48]	; 0x30
 8004fda:	4413      	add	r3, r2
 8004fdc:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004fe0:	b10a      	cbz	r2, 8004fe6 <__gxx_personality_v0+0x272>
 8004fe2:	3501      	adds	r5, #1
 8004fe4:	e7fa      	b.n	8004fdc <__gxx_personality_v0+0x268>
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	62a5      	str	r5, [r4, #40]	; 0x28
 8004fea:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004fec:	6322      	str	r2, [r4, #48]	; 0x30
 8004fee:	6363      	str	r3, [r4, #52]	; 0x34
 8004ff0:	ab10      	add	r3, sp, #64	; 0x40
 8004ff2:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7fb fe06 	bl	8000c10 <_Unwind_VRS_Set>
 8005004:	ab10      	add	r3, sp, #64	; 0x40
 8005006:	f843 7d20 	str.w	r7, [r3, #-32]!
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	2201      	movs	r2, #1
 8005010:	4619      	mov	r1, r3
 8005012:	4630      	mov	r0, r6
 8005014:	f7fb fdfc 	bl	8000c10 <_Unwind_VRS_Set>
 8005018:	210f      	movs	r1, #15
 800501a:	4630      	mov	r0, r6
 800501c:	f7ff fe9e 	bl	8004d5c <_Unwind_GetGR>
 8005020:	f000 0001 	and.w	r0, r0, #1
 8005024:	ab10      	add	r3, sp, #64	; 0x40
 8005026:	ea40 0008 	orr.w	r0, r0, r8
 800502a:	f843 0d24 	str.w	r0, [r3, #-36]!
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	220f      	movs	r2, #15
 8005034:	4619      	mov	r1, r3
 8005036:	4630      	mov	r0, r6
 8005038:	f7fb fdea 	bl	8000c10 <_Unwind_VRS_Set>
 800503c:	f1ba 0f02 	cmp.w	sl, #2
 8005040:	d102      	bne.n	8005048 <__gxx_personality_v0+0x2d4>
 8005042:	4620      	mov	r0, r4
 8005044:	f7ff fd86 	bl	8004b54 <__cxa_begin_cleanup>
 8005048:	2007      	movs	r0, #7
 800504a:	e6ac      	b.n	8004da6 <__gxx_personality_v0+0x32>
 800504c:	aa10      	add	r2, sp, #64	; 0x40
 800504e:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8005052:	9200      	str	r2, [sp, #0]
 8005054:	4643      	mov	r3, r8
 8005056:	220c      	movs	r2, #12
 8005058:	4641      	mov	r1, r8
 800505a:	4630      	mov	r0, r6
 800505c:	f045 0502 	orr.w	r5, r5, #2
 8005060:	f7fb fdd6 	bl	8000c10 <_Unwind_VRS_Set>
 8005064:	4630      	mov	r0, r6
 8005066:	f7fc fb4f 	bl	8001708 <_Unwind_GetLanguageSpecificData>
 800506a:	4681      	mov	r9, r0
 800506c:	2800      	cmp	r0, #0
 800506e:	f43f ae94 	beq.w	8004d9a <__gxx_personality_v0+0x26>
 8005072:	aa0a      	add	r2, sp, #40	; 0x28
 8005074:	4601      	mov	r1, r0
 8005076:	4630      	mov	r0, r6
 8005078:	f7ff fe42 	bl	8004d00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800507c:	4631      	mov	r1, r6
 800507e:	4680      	mov	r8, r0
 8005080:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005084:	f7ff fe09 	bl	8004c9a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005088:	210f      	movs	r1, #15
 800508a:	900c      	str	r0, [sp, #48]	; 0x30
 800508c:	4630      	mov	r0, r6
 800508e:	f7ff fe65 	bl	8004d5c <_Unwind_GetGR>
 8005092:	f020 0001 	bic.w	r0, r0, #1
 8005096:	1e47      	subs	r7, r0, #1
 8005098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800509a:	4598      	cmp	r8, r3
 800509c:	f4bf af7b 	bcs.w	8004f96 <__gxx_personality_v0+0x222>
 80050a0:	4642      	mov	r2, r8
 80050a2:	ab06      	add	r3, sp, #24
 80050a4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80050a8:	2000      	movs	r0, #0
 80050aa:	f7ff fe19 	bl	8004ce0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80050ae:	ab07      	add	r3, sp, #28
 80050b0:	4602      	mov	r2, r0
 80050b2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7ff fe12 	bl	8004ce0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80050bc:	ab08      	add	r3, sp, #32
 80050be:	4602      	mov	r2, r0
 80050c0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80050c4:	2000      	movs	r0, #0
 80050c6:	f7ff fe0b 	bl	8004ce0 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80050ca:	a909      	add	r1, sp, #36	; 0x24
 80050cc:	f7ff fd78 	bl	8004bc0 <_ZL12read_uleb128PKhPm>
 80050d0:	9a06      	ldr	r2, [sp, #24]
 80050d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d4:	4680      	mov	r8, r0
 80050d6:	4413      	add	r3, r2
 80050d8:	429f      	cmp	r7, r3
 80050da:	f4bf aea1 	bcs.w	8004e20 <__gxx_personality_v0+0xac>
 80050de:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80050e2:	e7d9      	b.n	8005098 <__gxx_personality_v0+0x324>

080050e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80050e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80050e6:	2310      	movs	r3, #16
 80050e8:	2400      	movs	r4, #0
 80050ea:	9302      	str	r3, [sp, #8]
 80050ec:	6803      	ldr	r3, [r0, #0]
 80050ee:	4615      	mov	r5, r2
 80050f0:	699e      	ldr	r6, [r3, #24]
 80050f2:	9400      	str	r4, [sp, #0]
 80050f4:	466b      	mov	r3, sp
 80050f6:	f88d 4004 	strb.w	r4, [sp, #4]
 80050fa:	9403      	str	r4, [sp, #12]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	47b0      	blx	r6
 8005100:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005104:	f003 0306 	and.w	r3, r3, #6
 8005108:	2b06      	cmp	r3, #6
 800510a:	bf09      	itett	eq
 800510c:	2001      	moveq	r0, #1
 800510e:	4620      	movne	r0, r4
 8005110:	9b00      	ldreq	r3, [sp, #0]
 8005112:	602b      	streq	r3, [r5, #0]
 8005114:	b004      	add	sp, #16
 8005116:	bd70      	pop	{r4, r5, r6, pc}

08005118 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8005118:	9800      	ldr	r0, [sp, #0]
 800511a:	4290      	cmp	r0, r2
 800511c:	bf0c      	ite	eq
 800511e:	2006      	moveq	r0, #6
 8005120:	2001      	movne	r0, #1
 8005122:	4770      	bx	lr

08005124 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005124:	b510      	push	{r4, lr}
 8005126:	4604      	mov	r4, r0
 8005128:	4b02      	ldr	r3, [pc, #8]	; (8005134 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800512a:	6003      	str	r3, [r0, #0]
 800512c:	f000 f84b 	bl	80051c6 <_ZNSt9type_infoD1Ev>
 8005130:	4620      	mov	r0, r4
 8005132:	bd10      	pop	{r4, pc}
 8005134:	0800586c 	.word	0x0800586c

08005138 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005138:	b510      	push	{r4, lr}
 800513a:	4604      	mov	r4, r0
 800513c:	f7ff fff2 	bl	8005124 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005140:	4620      	mov	r0, r4
 8005142:	2108      	movs	r1, #8
 8005144:	f000 f99a 	bl	800547c <_ZdlPvj>
 8005148:	4620      	mov	r0, r4
 800514a:	bd10      	pop	{r4, pc}

0800514c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4615      	mov	r5, r2
 8005150:	461c      	mov	r4, r3
 8005152:	f000 f83b 	bl	80051cc <_ZNKSt9type_infoeqERKS_>
 8005156:	b120      	cbz	r0, 8005162 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005158:	2308      	movs	r3, #8
 800515a:	60e3      	str	r3, [r4, #12]
 800515c:	2306      	movs	r3, #6
 800515e:	6025      	str	r5, [r4, #0]
 8005160:	7123      	strb	r3, [r4, #4]
 8005162:	bd38      	pop	{r3, r4, r5, pc}

08005164 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005168:	4605      	mov	r5, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4616      	mov	r6, r2
 800516e:	461f      	mov	r7, r3
 8005170:	f000 f82c 	bl	80051cc <_ZNKSt9type_infoeqERKS_>
 8005174:	b948      	cbnz	r0, 800518a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005176:	2f03      	cmp	r7, #3
 8005178:	d807      	bhi.n	800518a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	4632      	mov	r2, r6
 800517e:	4629      	mov	r1, r5
 8005180:	4620      	mov	r0, r4
 8005182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	4718      	bx	r3
 800518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800518e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800518e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	9e06      	ldr	r6, [sp, #24]
 8005194:	4698      	mov	r8, r3
 8005196:	9b08      	ldr	r3, [sp, #32]
 8005198:	4607      	mov	r7, r0
 800519a:	429e      	cmp	r6, r3
 800519c:	4615      	mov	r5, r2
 800519e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051a0:	d103      	bne.n	80051aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 80051a2:	9907      	ldr	r1, [sp, #28]
 80051a4:	f000 f812 	bl	80051cc <_ZNKSt9type_infoeqERKS_>
 80051a8:	b958      	cbnz	r0, 80051c2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 80051aa:	4641      	mov	r1, r8
 80051ac:	4638      	mov	r0, r7
 80051ae:	f000 f80d 	bl	80051cc <_ZNKSt9type_infoeqERKS_>
 80051b2:	b118      	cbz	r0, 80051bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 80051b4:	2301      	movs	r3, #1
 80051b6:	6026      	str	r6, [r4, #0]
 80051b8:	7125      	strb	r5, [r4, #4]
 80051ba:	71a3      	strb	r3, [r4, #6]
 80051bc:	2000      	movs	r0, #0
 80051be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c2:	7165      	strb	r5, [r4, #5]
 80051c4:	e7fa      	b.n	80051bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

080051c6 <_ZNSt9type_infoD1Ev>:
 80051c6:	4770      	bx	lr

080051c8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80051c8:	2000      	movs	r0, #0
 80051ca:	4770      	bx	lr

080051cc <_ZNKSt9type_infoeqERKS_>:
 80051cc:	4281      	cmp	r1, r0
 80051ce:	b508      	push	{r3, lr}
 80051d0:	d00e      	beq.n	80051f0 <_ZNKSt9type_infoeqERKS_+0x24>
 80051d2:	6840      	ldr	r0, [r0, #4]
 80051d4:	7803      	ldrb	r3, [r0, #0]
 80051d6:	2b2a      	cmp	r3, #42	; 0x2a
 80051d8:	d00c      	beq.n	80051f4 <_ZNKSt9type_infoeqERKS_+0x28>
 80051da:	6849      	ldr	r1, [r1, #4]
 80051dc:	780b      	ldrb	r3, [r1, #0]
 80051de:	2b2a      	cmp	r3, #42	; 0x2a
 80051e0:	bf08      	it	eq
 80051e2:	3101      	addeq	r1, #1
 80051e4:	f7fb f81e 	bl	8000224 <strcmp>
 80051e8:	fab0 f080 	clz	r0, r0
 80051ec:	0940      	lsrs	r0, r0, #5
 80051ee:	bd08      	pop	{r3, pc}
 80051f0:	2001      	movs	r0, #1
 80051f2:	bd08      	pop	{r3, pc}
 80051f4:	2000      	movs	r0, #0
 80051f6:	bd08      	pop	{r3, pc}

080051f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4604      	mov	r4, r0
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80051fe:	6003      	str	r3, [r0, #0]
 8005200:	f7ff ff90 	bl	8005124 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005204:	4620      	mov	r0, r4
 8005206:	bd10      	pop	{r4, pc}
 8005208:	08005938 	.word	0x08005938

0800520c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800520c:	b510      	push	{r4, lr}
 800520e:	4604      	mov	r4, r0
 8005210:	f7ff fff2 	bl	80051f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005214:	4620      	mov	r0, r4
 8005216:	210c      	movs	r1, #12
 8005218:	f000 f930 	bl	800547c <_ZdlPvj>
 800521c:	4620      	mov	r0, r4
 800521e:	bd10      	pop	{r4, pc}

08005220 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005224:	9e06      	ldr	r6, [sp, #24]
 8005226:	4680      	mov	r8, r0
 8005228:	4296      	cmp	r6, r2
 800522a:	460f      	mov	r7, r1
 800522c:	4614      	mov	r4, r2
 800522e:	461d      	mov	r5, r3
 8005230:	d103      	bne.n	800523a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8005232:	4619      	mov	r1, r3
 8005234:	f7ff ffca 	bl	80051cc <_ZNKSt9type_infoeqERKS_>
 8005238:	b958      	cbnz	r0, 8005252 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 800523a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800523e:	4622      	mov	r2, r4
 8005240:	6803      	ldr	r3, [r0, #0]
 8005242:	9606      	str	r6, [sp, #24]
 8005244:	6a1e      	ldr	r6, [r3, #32]
 8005246:	4639      	mov	r1, r7
 8005248:	462b      	mov	r3, r5
 800524a:	46b4      	mov	ip, r6
 800524c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	4760      	bx	ip
 8005252:	2006      	movs	r0, #6
 8005254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005258 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005258:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	460e      	mov	r6, r1
 800525e:	4619      	mov	r1, r3
 8005260:	4683      	mov	fp, r0
 8005262:	4617      	mov	r7, r2
 8005264:	4699      	mov	r9, r3
 8005266:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005268:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800526c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005270:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005272:	f7ff ffab 	bl	80051cc <_ZNKSt9type_infoeqERKS_>
 8005276:	b190      	cbz	r0, 800529e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8005278:	2e00      	cmp	r6, #0
 800527a:	602c      	str	r4, [r5, #0]
 800527c:	712f      	strb	r7, [r5, #4]
 800527e:	db09      	blt.n	8005294 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8005280:	4434      	add	r4, r6
 8005282:	45a0      	cmp	r8, r4
 8005284:	bf0c      	ite	eq
 8005286:	2406      	moveq	r4, #6
 8005288:	2401      	movne	r4, #1
 800528a:	71ac      	strb	r4, [r5, #6]
 800528c:	2000      	movs	r0, #0
 800528e:	b001      	add	sp, #4
 8005290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005294:	3602      	adds	r6, #2
 8005296:	d1f9      	bne.n	800528c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005298:	2301      	movs	r3, #1
 800529a:	71ab      	strb	r3, [r5, #6]
 800529c:	e7f6      	b.n	800528c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800529e:	4544      	cmp	r4, r8
 80052a0:	d104      	bne.n	80052ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80052a2:	4651      	mov	r1, sl
 80052a4:	4658      	mov	r0, fp
 80052a6:	f7ff ff91 	bl	80051cc <_ZNKSt9type_infoeqERKS_>
 80052aa:	b988      	cbnz	r0, 80052d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 80052ac:	f8db 0008 	ldr.w	r0, [fp, #8]
 80052b0:	463a      	mov	r2, r7
 80052b2:	6803      	ldr	r3, [r0, #0]
 80052b4:	950d      	str	r5, [sp, #52]	; 0x34
 80052b6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80052ba:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80052be:	940a      	str	r4, [sp, #40]	; 0x28
 80052c0:	69dc      	ldr	r4, [r3, #28]
 80052c2:	4631      	mov	r1, r6
 80052c4:	464b      	mov	r3, r9
 80052c6:	46a4      	mov	ip, r4
 80052c8:	b001      	add	sp, #4
 80052ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ce:	4760      	bx	ip
 80052d0:	716f      	strb	r7, [r5, #5]
 80052d2:	e7db      	b.n	800528c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

080052d4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80052d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d8:	4604      	mov	r4, r0
 80052da:	460d      	mov	r5, r1
 80052dc:	4616      	mov	r6, r2
 80052de:	461f      	mov	r7, r3
 80052e0:	f7ff ff34 	bl	800514c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80052e4:	b948      	cbnz	r0, 80052fa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80052e6:	68a0      	ldr	r0, [r4, #8]
 80052e8:	4632      	mov	r2, r6
 80052ea:	6803      	ldr	r3, [r0, #0]
 80052ec:	4629      	mov	r1, r5
 80052ee:	699c      	ldr	r4, [r3, #24]
 80052f0:	463b      	mov	r3, r7
 80052f2:	46a4      	mov	ip, r4
 80052f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052f8:	4760      	bx	ip
 80052fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80052fe:	7803      	ldrb	r3, [r0, #0]
 8005300:	2b47      	cmp	r3, #71	; 0x47
 8005302:	d117      	bne.n	8005334 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005304:	7843      	ldrb	r3, [r0, #1]
 8005306:	2b4e      	cmp	r3, #78	; 0x4e
 8005308:	d114      	bne.n	8005334 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800530a:	7883      	ldrb	r3, [r0, #2]
 800530c:	2b55      	cmp	r3, #85	; 0x55
 800530e:	d111      	bne.n	8005334 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005310:	78c3      	ldrb	r3, [r0, #3]
 8005312:	2b43      	cmp	r3, #67	; 0x43
 8005314:	d10e      	bne.n	8005334 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005316:	7903      	ldrb	r3, [r0, #4]
 8005318:	2b43      	cmp	r3, #67	; 0x43
 800531a:	d10b      	bne.n	8005334 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800531c:	7943      	ldrb	r3, [r0, #5]
 800531e:	2b2b      	cmp	r3, #43	; 0x2b
 8005320:	d108      	bne.n	8005334 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005322:	7983      	ldrb	r3, [r0, #6]
 8005324:	2b2b      	cmp	r3, #43	; 0x2b
 8005326:	d105      	bne.n	8005334 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005328:	79c0      	ldrb	r0, [r0, #7]
 800532a:	2801      	cmp	r0, #1
 800532c:	bf8c      	ite	hi
 800532e:	2000      	movhi	r0, #0
 8005330:	2001      	movls	r0, #1
 8005332:	4770      	bx	lr
 8005334:	2000      	movs	r0, #0
 8005336:	4770      	bx	lr

08005338 <__cxa_call_terminate>:
 8005338:	b510      	push	{r4, lr}
 800533a:	4604      	mov	r4, r0
 800533c:	b148      	cbz	r0, 8005352 <__cxa_call_terminate+0x1a>
 800533e:	f000 f83b 	bl	80053b8 <__cxa_begin_catch>
 8005342:	4620      	mov	r0, r4
 8005344:	f7ff ffdb 	bl	80052fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005348:	b118      	cbz	r0, 8005352 <__cxa_call_terminate+0x1a>
 800534a:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800534e:	f000 f85d 	bl	800540c <_ZN10__cxxabiv111__terminateEPFvvE>
 8005352:	f000 f867 	bl	8005424 <_ZSt9terminatev>

08005356 <__cxa_call_unexpected>:
 8005356:	b538      	push	{r3, r4, r5, lr}
 8005358:	4602      	mov	r2, r0
 800535a:	f7ff ffd0 	bl	80052fe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800535e:	b140      	cbz	r0, 8005372 <__cxa_call_unexpected+0x1c>
 8005360:	2500      	movs	r5, #0
 8005362:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8005366:	4610      	mov	r0, r2
 8005368:	f000 f826 	bl	80053b8 <__cxa_begin_catch>
 800536c:	b125      	cbz	r5, 8005378 <__cxa_call_unexpected+0x22>
 800536e:	f000 f86b 	bl	8005448 <_ZSt10unexpectedv>
 8005372:	4604      	mov	r4, r0
 8005374:	2501      	movs	r5, #1
 8005376:	e7f6      	b.n	8005366 <__cxa_call_unexpected+0x10>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 f858 	bl	800542e <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800537e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800537e:	7803      	ldrb	r3, [r0, #0]
 8005380:	2b47      	cmp	r3, #71	; 0x47
 8005382:	d117      	bne.n	80053b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005384:	7843      	ldrb	r3, [r0, #1]
 8005386:	2b4e      	cmp	r3, #78	; 0x4e
 8005388:	d114      	bne.n	80053b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800538a:	7883      	ldrb	r3, [r0, #2]
 800538c:	2b55      	cmp	r3, #85	; 0x55
 800538e:	d111      	bne.n	80053b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005390:	78c3      	ldrb	r3, [r0, #3]
 8005392:	2b43      	cmp	r3, #67	; 0x43
 8005394:	d10e      	bne.n	80053b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005396:	7903      	ldrb	r3, [r0, #4]
 8005398:	2b43      	cmp	r3, #67	; 0x43
 800539a:	d10b      	bne.n	80053b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800539c:	7943      	ldrb	r3, [r0, #5]
 800539e:	2b2b      	cmp	r3, #43	; 0x2b
 80053a0:	d108      	bne.n	80053b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053a2:	7983      	ldrb	r3, [r0, #6]
 80053a4:	2b2b      	cmp	r3, #43	; 0x2b
 80053a6:	d105      	bne.n	80053b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80053a8:	79c0      	ldrb	r0, [r0, #7]
 80053aa:	2801      	cmp	r0, #1
 80053ac:	bf8c      	ite	hi
 80053ae:	2000      	movhi	r0, #0
 80053b0:	2001      	movls	r0, #1
 80053b2:	4770      	bx	lr
 80053b4:	2000      	movs	r0, #0
 80053b6:	4770      	bx	lr

080053b8 <__cxa_begin_catch>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4605      	mov	r5, r0
 80053bc:	f000 f85a 	bl	8005474 <__cxa_get_globals>
 80053c0:	4601      	mov	r1, r0
 80053c2:	6802      	ldr	r2, [r0, #0]
 80053c4:	4628      	mov	r0, r5
 80053c6:	f1a5 0420 	sub.w	r4, r5, #32
 80053ca:	f7ff ffd8 	bl	800537e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80053ce:	b930      	cbnz	r0, 80053de <__cxa_begin_catch+0x26>
 80053d0:	b10a      	cbz	r2, 80053d6 <__cxa_begin_catch+0x1e>
 80053d2:	f000 f827 	bl	8005424 <_ZSt9terminatev>
 80053d6:	600c      	str	r4, [r1, #0]
 80053d8:	4614      	mov	r4, r2
 80053da:	4620      	mov	r0, r4
 80053dc:	bd38      	pop	{r3, r4, r5, pc}
 80053de:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 80053e2:	4628      	mov	r0, r5
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bfb4      	ite	lt
 80053e8:	f1c3 0301 	rsblt	r3, r3, #1
 80053ec:	3301      	addge	r3, #1
 80053ee:	f845 3c0c 	str.w	r3, [r5, #-12]
 80053f2:	684b      	ldr	r3, [r1, #4]
 80053f4:	42a2      	cmp	r2, r4
 80053f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053fa:	604b      	str	r3, [r1, #4]
 80053fc:	bf1c      	itt	ne
 80053fe:	f845 2c10 	strne.w	r2, [r5, #-16]
 8005402:	600c      	strne	r4, [r1, #0]
 8005404:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005406:	f7fb fbd5 	bl	8000bb4 <_Unwind_Complete>
 800540a:	e7e6      	b.n	80053da <__cxa_begin_catch+0x22>

0800540c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800540c:	b508      	push	{r3, lr}
 800540e:	4780      	blx	r0
 8005410:	f000 f83e 	bl	8005490 <abort>

08005414 <_ZSt13get_terminatev>:
 8005414:	4b02      	ldr	r3, [pc, #8]	; (8005420 <_ZSt13get_terminatev+0xc>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	f3bf 8f5b 	dmb	ish
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20000010 	.word	0x20000010

08005424 <_ZSt9terminatev>:
 8005424:	b508      	push	{r3, lr}
 8005426:	f7ff fff5 	bl	8005414 <_ZSt13get_terminatev>
 800542a:	f7ff ffef 	bl	800540c <_ZN10__cxxabiv111__terminateEPFvvE>

0800542e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800542e:	b508      	push	{r3, lr}
 8005430:	4780      	blx	r0
 8005432:	f7ff fff7 	bl	8005424 <_ZSt9terminatev>
	...

08005438 <_ZSt14get_unexpectedv>:
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <_ZSt14get_unexpectedv+0xc>)
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	f3bf 8f5b 	dmb	ish
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000014 	.word	0x20000014

08005448 <_ZSt10unexpectedv>:
 8005448:	b508      	push	{r3, lr}
 800544a:	f7ff fff5 	bl	8005438 <_ZSt14get_unexpectedv>
 800544e:	f7ff ffee 	bl	800542e <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005452 <_Znwj>:
 8005452:	b510      	push	{r4, lr}
 8005454:	2800      	cmp	r0, #0
 8005456:	bf14      	ite	ne
 8005458:	4604      	movne	r4, r0
 800545a:	2401      	moveq	r4, #1
 800545c:	4620      	mov	r0, r4
 800545e:	f000 f85f 	bl	8005520 <malloc>
 8005462:	b930      	cbnz	r0, 8005472 <_Znwj+0x20>
 8005464:	f000 f80c 	bl	8005480 <_ZSt15get_new_handlerv>
 8005468:	b908      	cbnz	r0, 800546e <_Znwj+0x1c>
 800546a:	f000 f811 	bl	8005490 <abort>
 800546e:	4780      	blx	r0
 8005470:	e7f4      	b.n	800545c <_Znwj+0xa>
 8005472:	bd10      	pop	{r4, pc}

08005474 <__cxa_get_globals>:
 8005474:	4800      	ldr	r0, [pc, #0]	; (8005478 <__cxa_get_globals+0x4>)
 8005476:	4770      	bx	lr
 8005478:	2000020c 	.word	0x2000020c

0800547c <_ZdlPvj>:
 800547c:	f7ff badd 	b.w	8004a3a <_ZdlPv>

08005480 <_ZSt15get_new_handlerv>:
 8005480:	4b02      	ldr	r3, [pc, #8]	; (800548c <_ZSt15get_new_handlerv+0xc>)
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	f3bf 8f5b 	dmb	ish
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20000218 	.word	0x20000218

08005490 <abort>:
 8005490:	b508      	push	{r3, lr}
 8005492:	2006      	movs	r0, #6
 8005494:	f000 f94c 	bl	8005730 <raise>
 8005498:	2001      	movs	r0, #1
 800549a:	f7fd fb7f 	bl	8002b9c <_exit>
	...

080054a0 <calloc>:
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <calloc+0xc>)
 80054a2:	460a      	mov	r2, r1
 80054a4:	4601      	mov	r1, r0
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	f000 b852 	b.w	8005550 <_calloc_r>
 80054ac:	20000018 	.word	0x20000018

080054b0 <__cxa_atexit>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4c05      	ldr	r4, [pc, #20]	; (80054c8 <__cxa_atexit+0x18>)
 80054b4:	4613      	mov	r3, r2
 80054b6:	b12c      	cbz	r4, 80054c4 <__cxa_atexit+0x14>
 80054b8:	460a      	mov	r2, r1
 80054ba:	4601      	mov	r1, r0
 80054bc:	2002      	movs	r0, #2
 80054be:	f3af 8000 	nop.w
 80054c2:	bd10      	pop	{r4, pc}
 80054c4:	4620      	mov	r0, r4
 80054c6:	bd10      	pop	{r4, pc}
 80054c8:	00000000 	.word	0x00000000

080054cc <__errno>:
 80054cc:	4b01      	ldr	r3, [pc, #4]	; (80054d4 <__errno+0x8>)
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000018 	.word	0x20000018

080054d8 <__libc_init_array>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	2500      	movs	r5, #0
 80054dc:	4e0c      	ldr	r6, [pc, #48]	; (8005510 <__libc_init_array+0x38>)
 80054de:	4c0d      	ldr	r4, [pc, #52]	; (8005514 <__libc_init_array+0x3c>)
 80054e0:	1ba4      	subs	r4, r4, r6
 80054e2:	10a4      	asrs	r4, r4, #2
 80054e4:	42a5      	cmp	r5, r4
 80054e6:	d109      	bne.n	80054fc <__libc_init_array+0x24>
 80054e8:	f000 f94c 	bl	8005784 <_init>
 80054ec:	2500      	movs	r5, #0
 80054ee:	4e0a      	ldr	r6, [pc, #40]	; (8005518 <__libc_init_array+0x40>)
 80054f0:	4c0a      	ldr	r4, [pc, #40]	; (800551c <__libc_init_array+0x44>)
 80054f2:	1ba4      	subs	r4, r4, r6
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	42a5      	cmp	r5, r4
 80054f8:	d105      	bne.n	8005506 <__libc_init_array+0x2e>
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005500:	4798      	blx	r3
 8005502:	3501      	adds	r5, #1
 8005504:	e7ee      	b.n	80054e4 <__libc_init_array+0xc>
 8005506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800550a:	4798      	blx	r3
 800550c:	3501      	adds	r5, #1
 800550e:	e7f2      	b.n	80054f6 <__libc_init_array+0x1e>
 8005510:	08005c80 	.word	0x08005c80
 8005514:	08005c80 	.word	0x08005c80
 8005518:	08005c80 	.word	0x08005c80
 800551c:	08005c90 	.word	0x08005c90

08005520 <malloc>:
 8005520:	4b02      	ldr	r3, [pc, #8]	; (800552c <malloc+0xc>)
 8005522:	4601      	mov	r1, r0
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	f000 b86d 	b.w	8005604 <_malloc_r>
 800552a:	bf00      	nop
 800552c:	20000018 	.word	0x20000018

08005530 <free>:
 8005530:	4b02      	ldr	r3, [pc, #8]	; (800553c <free+0xc>)
 8005532:	4601      	mov	r1, r0
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f000 b819 	b.w	800556c <_free_r>
 800553a:	bf00      	nop
 800553c:	20000018 	.word	0x20000018

08005540 <memset>:
 8005540:	4603      	mov	r3, r0
 8005542:	4402      	add	r2, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <_calloc_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	fb02 f401 	mul.w	r4, r2, r1
 8005556:	4621      	mov	r1, r4
 8005558:	f000 f854 	bl	8005604 <_malloc_r>
 800555c:	4605      	mov	r5, r0
 800555e:	b118      	cbz	r0, 8005568 <_calloc_r+0x18>
 8005560:	4622      	mov	r2, r4
 8005562:	2100      	movs	r1, #0
 8005564:	f7ff ffec 	bl	8005540 <memset>
 8005568:	4628      	mov	r0, r5
 800556a:	bd38      	pop	{r3, r4, r5, pc}

0800556c <_free_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4605      	mov	r5, r0
 8005570:	2900      	cmp	r1, #0
 8005572:	d043      	beq.n	80055fc <_free_r+0x90>
 8005574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005578:	1f0c      	subs	r4, r1, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	bfb8      	it	lt
 800557e:	18e4      	addlt	r4, r4, r3
 8005580:	f000 f8f2 	bl	8005768 <__malloc_lock>
 8005584:	4a1e      	ldr	r2, [pc, #120]	; (8005600 <_free_r+0x94>)
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	4610      	mov	r0, r2
 800558a:	b933      	cbnz	r3, 800559a <_free_r+0x2e>
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	6014      	str	r4, [r2, #0]
 8005590:	4628      	mov	r0, r5
 8005592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005596:	f000 b8e8 	b.w	800576a <__malloc_unlock>
 800559a:	42a3      	cmp	r3, r4
 800559c:	d90b      	bls.n	80055b6 <_free_r+0x4a>
 800559e:	6821      	ldr	r1, [r4, #0]
 80055a0:	1862      	adds	r2, r4, r1
 80055a2:	4293      	cmp	r3, r2
 80055a4:	bf01      	itttt	eq
 80055a6:	681a      	ldreq	r2, [r3, #0]
 80055a8:	685b      	ldreq	r3, [r3, #4]
 80055aa:	1852      	addeq	r2, r2, r1
 80055ac:	6022      	streq	r2, [r4, #0]
 80055ae:	6063      	str	r3, [r4, #4]
 80055b0:	6004      	str	r4, [r0, #0]
 80055b2:	e7ed      	b.n	8005590 <_free_r+0x24>
 80055b4:	4613      	mov	r3, r2
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	b10a      	cbz	r2, 80055be <_free_r+0x52>
 80055ba:	42a2      	cmp	r2, r4
 80055bc:	d9fa      	bls.n	80055b4 <_free_r+0x48>
 80055be:	6819      	ldr	r1, [r3, #0]
 80055c0:	1858      	adds	r0, r3, r1
 80055c2:	42a0      	cmp	r0, r4
 80055c4:	d10b      	bne.n	80055de <_free_r+0x72>
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	4401      	add	r1, r0
 80055ca:	1858      	adds	r0, r3, r1
 80055cc:	4282      	cmp	r2, r0
 80055ce:	6019      	str	r1, [r3, #0]
 80055d0:	d1de      	bne.n	8005590 <_free_r+0x24>
 80055d2:	6810      	ldr	r0, [r2, #0]
 80055d4:	6852      	ldr	r2, [r2, #4]
 80055d6:	4401      	add	r1, r0
 80055d8:	6019      	str	r1, [r3, #0]
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	e7d8      	b.n	8005590 <_free_r+0x24>
 80055de:	d902      	bls.n	80055e6 <_free_r+0x7a>
 80055e0:	230c      	movs	r3, #12
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	e7d4      	b.n	8005590 <_free_r+0x24>
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	1821      	adds	r1, r4, r0
 80055ea:	428a      	cmp	r2, r1
 80055ec:	bf01      	itttt	eq
 80055ee:	6811      	ldreq	r1, [r2, #0]
 80055f0:	6852      	ldreq	r2, [r2, #4]
 80055f2:	1809      	addeq	r1, r1, r0
 80055f4:	6021      	streq	r1, [r4, #0]
 80055f6:	6062      	str	r2, [r4, #4]
 80055f8:	605c      	str	r4, [r3, #4]
 80055fa:	e7c9      	b.n	8005590 <_free_r+0x24>
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
 80055fe:	bf00      	nop
 8005600:	2000021c 	.word	0x2000021c

08005604 <_malloc_r>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	1ccd      	adds	r5, r1, #3
 8005608:	f025 0503 	bic.w	r5, r5, #3
 800560c:	3508      	adds	r5, #8
 800560e:	2d0c      	cmp	r5, #12
 8005610:	bf38      	it	cc
 8005612:	250c      	movcc	r5, #12
 8005614:	2d00      	cmp	r5, #0
 8005616:	4606      	mov	r6, r0
 8005618:	db01      	blt.n	800561e <_malloc_r+0x1a>
 800561a:	42a9      	cmp	r1, r5
 800561c:	d903      	bls.n	8005626 <_malloc_r+0x22>
 800561e:	230c      	movs	r3, #12
 8005620:	6033      	str	r3, [r6, #0]
 8005622:	2000      	movs	r0, #0
 8005624:	bd70      	pop	{r4, r5, r6, pc}
 8005626:	f000 f89f 	bl	8005768 <__malloc_lock>
 800562a:	4a23      	ldr	r2, [pc, #140]	; (80056b8 <_malloc_r+0xb4>)
 800562c:	6814      	ldr	r4, [r2, #0]
 800562e:	4621      	mov	r1, r4
 8005630:	b991      	cbnz	r1, 8005658 <_malloc_r+0x54>
 8005632:	4c22      	ldr	r4, [pc, #136]	; (80056bc <_malloc_r+0xb8>)
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	b91b      	cbnz	r3, 8005640 <_malloc_r+0x3c>
 8005638:	4630      	mov	r0, r6
 800563a:	f000 f841 	bl	80056c0 <_sbrk_r>
 800563e:	6020      	str	r0, [r4, #0]
 8005640:	4629      	mov	r1, r5
 8005642:	4630      	mov	r0, r6
 8005644:	f000 f83c 	bl	80056c0 <_sbrk_r>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d126      	bne.n	800569a <_malloc_r+0x96>
 800564c:	230c      	movs	r3, #12
 800564e:	4630      	mov	r0, r6
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	f000 f88a 	bl	800576a <__malloc_unlock>
 8005656:	e7e4      	b.n	8005622 <_malloc_r+0x1e>
 8005658:	680b      	ldr	r3, [r1, #0]
 800565a:	1b5b      	subs	r3, r3, r5
 800565c:	d41a      	bmi.n	8005694 <_malloc_r+0x90>
 800565e:	2b0b      	cmp	r3, #11
 8005660:	d90f      	bls.n	8005682 <_malloc_r+0x7e>
 8005662:	600b      	str	r3, [r1, #0]
 8005664:	18cc      	adds	r4, r1, r3
 8005666:	50cd      	str	r5, [r1, r3]
 8005668:	4630      	mov	r0, r6
 800566a:	f000 f87e 	bl	800576a <__malloc_unlock>
 800566e:	f104 000b 	add.w	r0, r4, #11
 8005672:	1d23      	adds	r3, r4, #4
 8005674:	f020 0007 	bic.w	r0, r0, #7
 8005678:	1ac3      	subs	r3, r0, r3
 800567a:	d01b      	beq.n	80056b4 <_malloc_r+0xb0>
 800567c:	425a      	negs	r2, r3
 800567e:	50e2      	str	r2, [r4, r3]
 8005680:	bd70      	pop	{r4, r5, r6, pc}
 8005682:	428c      	cmp	r4, r1
 8005684:	bf0b      	itete	eq
 8005686:	6863      	ldreq	r3, [r4, #4]
 8005688:	684b      	ldrne	r3, [r1, #4]
 800568a:	6013      	streq	r3, [r2, #0]
 800568c:	6063      	strne	r3, [r4, #4]
 800568e:	bf18      	it	ne
 8005690:	460c      	movne	r4, r1
 8005692:	e7e9      	b.n	8005668 <_malloc_r+0x64>
 8005694:	460c      	mov	r4, r1
 8005696:	6849      	ldr	r1, [r1, #4]
 8005698:	e7ca      	b.n	8005630 <_malloc_r+0x2c>
 800569a:	1cc4      	adds	r4, r0, #3
 800569c:	f024 0403 	bic.w	r4, r4, #3
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d005      	beq.n	80056b0 <_malloc_r+0xac>
 80056a4:	1a21      	subs	r1, r4, r0
 80056a6:	4630      	mov	r0, r6
 80056a8:	f000 f80a 	bl	80056c0 <_sbrk_r>
 80056ac:	3001      	adds	r0, #1
 80056ae:	d0cd      	beq.n	800564c <_malloc_r+0x48>
 80056b0:	6025      	str	r5, [r4, #0]
 80056b2:	e7d9      	b.n	8005668 <_malloc_r+0x64>
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
 80056b6:	bf00      	nop
 80056b8:	2000021c 	.word	0x2000021c
 80056bc:	20000220 	.word	0x20000220

080056c0 <_sbrk_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	2300      	movs	r3, #0
 80056c4:	4c05      	ldr	r4, [pc, #20]	; (80056dc <_sbrk_r+0x1c>)
 80056c6:	4605      	mov	r5, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	f7fd fa6c 	bl	8002ba8 <_sbrk>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_sbrk_r+0x1a>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	b103      	cbz	r3, 80056da <_sbrk_r+0x1a>
 80056d8:	602b      	str	r3, [r5, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	2000040c 	.word	0x2000040c

080056e0 <_raise_r>:
 80056e0:	291f      	cmp	r1, #31
 80056e2:	b538      	push	{r3, r4, r5, lr}
 80056e4:	4604      	mov	r4, r0
 80056e6:	460d      	mov	r5, r1
 80056e8:	d904      	bls.n	80056f4 <_raise_r+0x14>
 80056ea:	2316      	movs	r3, #22
 80056ec:	6003      	str	r3, [r0, #0]
 80056ee:	f04f 30ff 	mov.w	r0, #4294967295
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80056f6:	b112      	cbz	r2, 80056fe <_raise_r+0x1e>
 80056f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056fc:	b94b      	cbnz	r3, 8005712 <_raise_r+0x32>
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 f830 	bl	8005764 <_getpid_r>
 8005704:	462a      	mov	r2, r5
 8005706:	4601      	mov	r1, r0
 8005708:	4620      	mov	r0, r4
 800570a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800570e:	f000 b817 	b.w	8005740 <_kill_r>
 8005712:	2b01      	cmp	r3, #1
 8005714:	d00a      	beq.n	800572c <_raise_r+0x4c>
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	d103      	bne.n	8005722 <_raise_r+0x42>
 800571a:	2316      	movs	r3, #22
 800571c:	6003      	str	r3, [r0, #0]
 800571e:	2001      	movs	r0, #1
 8005720:	bd38      	pop	{r3, r4, r5, pc}
 8005722:	2400      	movs	r4, #0
 8005724:	4628      	mov	r0, r5
 8005726:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800572a:	4798      	blx	r3
 800572c:	2000      	movs	r0, #0
 800572e:	bd38      	pop	{r3, r4, r5, pc}

08005730 <raise>:
 8005730:	4b02      	ldr	r3, [pc, #8]	; (800573c <raise+0xc>)
 8005732:	4601      	mov	r1, r0
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	f7ff bfd3 	b.w	80056e0 <_raise_r>
 800573a:	bf00      	nop
 800573c:	20000018 	.word	0x20000018

08005740 <_kill_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	2300      	movs	r3, #0
 8005744:	4c06      	ldr	r4, [pc, #24]	; (8005760 <_kill_r+0x20>)
 8005746:	4605      	mov	r5, r0
 8005748:	4608      	mov	r0, r1
 800574a:	4611      	mov	r1, r2
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	f7fd fa1d 	bl	8002b8c <_kill>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	d102      	bne.n	800575c <_kill_r+0x1c>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	b103      	cbz	r3, 800575c <_kill_r+0x1c>
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	bd38      	pop	{r3, r4, r5, pc}
 800575e:	bf00      	nop
 8005760:	2000040c 	.word	0x2000040c

08005764 <_getpid_r>:
 8005764:	f7fd ba10 	b.w	8002b88 <_getpid>

08005768 <__malloc_lock>:
 8005768:	4770      	bx	lr

0800576a <__malloc_unlock>:
 800576a:	4770      	bx	lr

0800576c <memcpy>:
 800576c:	b510      	push	{r4, lr}
 800576e:	1e43      	subs	r3, r0, #1
 8005770:	440a      	add	r2, r1
 8005772:	4291      	cmp	r1, r2
 8005774:	d100      	bne.n	8005778 <memcpy+0xc>
 8005776:	bd10      	pop	{r4, pc}
 8005778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800577c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005780:	e7f7      	b.n	8005772 <memcpy+0x6>
	...

08005784 <_init>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr

08005790 <_fini>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr
