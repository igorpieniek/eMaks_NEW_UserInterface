
User_interface_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080069a0  080069a0  000169a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000012c  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001b8  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000010  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000078  20000000  08006e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000320  20000078  08006ee8  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000500  20000398  08006ee8  00020398  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017e8e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003f84  00000000  00000000  00037f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e58  00000000  00000000  0003beb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010f8  00000000  00000000  0003cd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000087c6  00000000  00000000  0003de08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005a0d  00000000  00000000  000465ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004bfdb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000035e4  00000000  00000000  0004c058  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00007d47  00000000  00000000  0004f63c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	08006984 	.word	0x08006984

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	08006984 	.word	0x08006984

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <__aeabi_drsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000240:	e002      	b.n	8000248 <__adddf3>
 8000242:	bf00      	nop

08000244 <__aeabi_dsub>:
 8000244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000248 <__adddf3>:
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000252:	ea94 0f05 	teq	r4, r5
 8000256:	bf08      	it	eq
 8000258:	ea90 0f02 	teqeq	r0, r2
 800025c:	bf1f      	itttt	ne
 800025e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000262:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026e:	f000 80e2 	beq.w	8000436 <__adddf3+0x1ee>
 8000272:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027a:	bfb8      	it	lt
 800027c:	426d      	neglt	r5, r5
 800027e:	dd0c      	ble.n	800029a <__adddf3+0x52>
 8000280:	442c      	add	r4, r5
 8000282:	ea80 0202 	eor.w	r2, r0, r2
 8000286:	ea81 0303 	eor.w	r3, r1, r3
 800028a:	ea82 0000 	eor.w	r0, r2, r0
 800028e:	ea83 0101 	eor.w	r1, r3, r1
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	2d36      	cmp	r5, #54	; 0x36
 800029c:	bf88      	it	hi
 800029e:	bd30      	pophi	{r4, r5, pc}
 80002a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x70>
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x84>
 80002c6:	4252      	negs	r2, r2
 80002c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002cc:	ea94 0f05 	teq	r4, r5
 80002d0:	f000 80a7 	beq.w	8000422 <__adddf3+0x1da>
 80002d4:	f1a4 0401 	sub.w	r4, r4, #1
 80002d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002dc:	db0d      	blt.n	80002fa <__adddf3+0xb2>
 80002de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e2:	fa22 f205 	lsr.w	r2, r2, r5
 80002e6:	1880      	adds	r0, r0, r2
 80002e8:	f141 0100 	adc.w	r1, r1, #0
 80002ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f0:	1880      	adds	r0, r0, r2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	4159      	adcs	r1, r3
 80002f8:	e00e      	b.n	8000318 <__adddf3+0xd0>
 80002fa:	f1a5 0520 	sub.w	r5, r5, #32
 80002fe:	f10e 0e20 	add.w	lr, lr, #32
 8000302:	2a01      	cmp	r2, #1
 8000304:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000308:	bf28      	it	cs
 800030a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	18c0      	adds	r0, r0, r3
 8000314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800031c:	d507      	bpl.n	800032e <__adddf3+0xe6>
 800031e:	f04f 0e00 	mov.w	lr, #0
 8000322:	f1dc 0c00 	rsbs	ip, ip, #0
 8000326:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032a:	eb6e 0101 	sbc.w	r1, lr, r1
 800032e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000332:	d31b      	bcc.n	800036c <__adddf3+0x124>
 8000334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000338:	d30c      	bcc.n	8000354 <__adddf3+0x10c>
 800033a:	0849      	lsrs	r1, r1, #1
 800033c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000340:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000344:	f104 0401 	add.w	r4, r4, #1
 8000348:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800034c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000350:	f080 809a 	bcs.w	8000488 <__adddf3+0x240>
 8000354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000358:	bf08      	it	eq
 800035a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035e:	f150 0000 	adcs.w	r0, r0, #0
 8000362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000366:	ea41 0105 	orr.w	r1, r1, r5
 800036a:	bd30      	pop	{r4, r5, pc}
 800036c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000370:	4140      	adcs	r0, r0
 8000372:	eb41 0101 	adc.w	r1, r1, r1
 8000376:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037a:	f1a4 0401 	sub.w	r4, r4, #1
 800037e:	d1e9      	bne.n	8000354 <__adddf3+0x10c>
 8000380:	f091 0f00 	teq	r1, #0
 8000384:	bf04      	itt	eq
 8000386:	4601      	moveq	r1, r0
 8000388:	2000      	moveq	r0, #0
 800038a:	fab1 f381 	clz	r3, r1
 800038e:	bf08      	it	eq
 8000390:	3320      	addeq	r3, #32
 8000392:	f1a3 030b 	sub.w	r3, r3, #11
 8000396:	f1b3 0220 	subs.w	r2, r3, #32
 800039a:	da0c      	bge.n	80003b6 <__adddf3+0x16e>
 800039c:	320c      	adds	r2, #12
 800039e:	dd08      	ble.n	80003b2 <__adddf3+0x16a>
 80003a0:	f102 0c14 	add.w	ip, r2, #20
 80003a4:	f1c2 020c 	rsb	r2, r2, #12
 80003a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ac:	fa21 f102 	lsr.w	r1, r1, r2
 80003b0:	e00c      	b.n	80003cc <__adddf3+0x184>
 80003b2:	f102 0214 	add.w	r2, r2, #20
 80003b6:	bfd8      	it	le
 80003b8:	f1c2 0c20 	rsble	ip, r2, #32
 80003bc:	fa01 f102 	lsl.w	r1, r1, r2
 80003c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c4:	bfdc      	itt	le
 80003c6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ca:	4090      	lslle	r0, r2
 80003cc:	1ae4      	subs	r4, r4, r3
 80003ce:	bfa2      	ittt	ge
 80003d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d4:	4329      	orrge	r1, r5
 80003d6:	bd30      	popge	{r4, r5, pc}
 80003d8:	ea6f 0404 	mvn.w	r4, r4
 80003dc:	3c1f      	subs	r4, #31
 80003de:	da1c      	bge.n	800041a <__adddf3+0x1d2>
 80003e0:	340c      	adds	r4, #12
 80003e2:	dc0e      	bgt.n	8000402 <__adddf3+0x1ba>
 80003e4:	f104 0414 	add.w	r4, r4, #20
 80003e8:	f1c4 0220 	rsb	r2, r4, #32
 80003ec:	fa20 f004 	lsr.w	r0, r0, r4
 80003f0:	fa01 f302 	lsl.w	r3, r1, r2
 80003f4:	ea40 0003 	orr.w	r0, r0, r3
 80003f8:	fa21 f304 	lsr.w	r3, r1, r4
 80003fc:	ea45 0103 	orr.w	r1, r5, r3
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	f1c4 040c 	rsb	r4, r4, #12
 8000406:	f1c4 0220 	rsb	r2, r4, #32
 800040a:	fa20 f002 	lsr.w	r0, r0, r2
 800040e:	fa01 f304 	lsl.w	r3, r1, r4
 8000412:	ea40 0003 	orr.w	r0, r0, r3
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	fa21 f004 	lsr.w	r0, r1, r4
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f094 0f00 	teq	r4, #0
 8000426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042a:	bf06      	itte	eq
 800042c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000430:	3401      	addeq	r4, #1
 8000432:	3d01      	subne	r5, #1
 8000434:	e74e      	b.n	80002d4 <__adddf3+0x8c>
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf18      	it	ne
 800043c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000440:	d029      	beq.n	8000496 <__adddf3+0x24e>
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	d005      	beq.n	800045a <__adddf3+0x212>
 800044e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000452:	bf04      	itt	eq
 8000454:	4619      	moveq	r1, r3
 8000456:	4610      	moveq	r0, r2
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea91 0f03 	teq	r1, r3
 800045e:	bf1e      	ittt	ne
 8000460:	2100      	movne	r1, #0
 8000462:	2000      	movne	r0, #0
 8000464:	bd30      	popne	{r4, r5, pc}
 8000466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046a:	d105      	bne.n	8000478 <__adddf3+0x230>
 800046c:	0040      	lsls	r0, r0, #1
 800046e:	4149      	adcs	r1, r1
 8000470:	bf28      	it	cs
 8000472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000476:	bd30      	pop	{r4, r5, pc}
 8000478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800047c:	bf3c      	itt	cc
 800047e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000482:	bd30      	popcc	{r4, r5, pc}
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf1a      	itte	ne
 800049c:	4619      	movne	r1, r3
 800049e:	4610      	movne	r0, r2
 80004a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a4:	bf1c      	itt	ne
 80004a6:	460b      	movne	r3, r1
 80004a8:	4602      	movne	r2, r0
 80004aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ae:	bf06      	itte	eq
 80004b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b4:	ea91 0f03 	teqeq	r1, r3
 80004b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	bf00      	nop

080004c0 <__aeabi_ui2d>:
 80004c0:	f090 0f00 	teq	r0, #0
 80004c4:	bf04      	itt	eq
 80004c6:	2100      	moveq	r1, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d4:	f04f 0500 	mov.w	r5, #0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e750      	b.n	8000380 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_i2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f8:	bf48      	it	mi
 80004fa:	4240      	negmi	r0, r0
 80004fc:	f04f 0100 	mov.w	r1, #0
 8000500:	e73e      	b.n	8000380 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_f2d>:
 8000504:	0042      	lsls	r2, r0, #1
 8000506:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050a:	ea4f 0131 	mov.w	r1, r1, rrx
 800050e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000512:	bf1f      	itttt	ne
 8000514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800051c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000520:	4770      	bxne	lr
 8000522:	f092 0f00 	teq	r2, #0
 8000526:	bf14      	ite	ne
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e720      	b.n	8000380 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aedc 	beq.w	800032e <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6c1      	b.n	800032e <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpun>:
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__aeabi_dcmpun+0x10>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d10a      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x20>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0001 	mov.w	r0, #1
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_frsub>:
 8000b4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b50:	e002      	b.n	8000b58 <__addsf3>
 8000b52:	bf00      	nop

08000b54 <__aeabi_fsub>:
 8000b54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b58 <__addsf3>:
 8000b58:	0042      	lsls	r2, r0, #1
 8000b5a:	bf1f      	itttt	ne
 8000b5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b60:	ea92 0f03 	teqne	r2, r3
 8000b64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6c:	d06a      	beq.n	8000c44 <__addsf3+0xec>
 8000b6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b76:	bfc1      	itttt	gt
 8000b78:	18d2      	addgt	r2, r2, r3
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	4048      	eorgt	r0, r1
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	bfb8      	it	lt
 8000b82:	425b      	neglt	r3, r3
 8000b84:	2b19      	cmp	r3, #25
 8000b86:	bf88      	it	hi
 8000b88:	4770      	bxhi	lr
 8000b8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4249      	negne	r1, r1
 8000baa:	ea92 0f03 	teq	r2, r3
 8000bae:	d03f      	beq.n	8000c30 <__addsf3+0xd8>
 8000bb0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb8:	eb10 000c 	adds.w	r0, r0, ip
 8000bbc:	f1c3 0320 	rsb	r3, r3, #32
 8000bc0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__addsf3+0x78>
 8000bca:	4249      	negs	r1, r1
 8000bcc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd4:	d313      	bcc.n	8000bfe <__addsf3+0xa6>
 8000bd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bda:	d306      	bcc.n	8000bea <__addsf3+0x92>
 8000bdc:	0840      	lsrs	r0, r0, #1
 8000bde:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be2:	f102 0201 	add.w	r2, r2, #1
 8000be6:	2afe      	cmp	r2, #254	; 0xfe
 8000be8:	d251      	bcs.n	8000c8e <__addsf3+0x136>
 8000bea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf2:	bf08      	it	eq
 8000bf4:	f020 0001 	biceq.w	r0, r0, #1
 8000bf8:	ea40 0003 	orr.w	r0, r0, r3
 8000bfc:	4770      	bx	lr
 8000bfe:	0049      	lsls	r1, r1, #1
 8000c00:	eb40 0000 	adc.w	r0, r0, r0
 8000c04:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c08:	f1a2 0201 	sub.w	r2, r2, #1
 8000c0c:	d1ed      	bne.n	8000bea <__addsf3+0x92>
 8000c0e:	fab0 fc80 	clz	ip, r0
 8000c12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c16:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1e:	bfaa      	itet	ge
 8000c20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c24:	4252      	neglt	r2, r2
 8000c26:	4318      	orrge	r0, r3
 8000c28:	bfbc      	itt	lt
 8000c2a:	40d0      	lsrlt	r0, r2
 8000c2c:	4318      	orrlt	r0, r3
 8000c2e:	4770      	bx	lr
 8000c30:	f092 0f00 	teq	r2, #0
 8000c34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c38:	bf06      	itte	eq
 8000c3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3e:	3201      	addeq	r2, #1
 8000c40:	3b01      	subne	r3, #1
 8000c42:	e7b5      	b.n	8000bb0 <__addsf3+0x58>
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d021      	beq.n	8000c98 <__addsf3+0x140>
 8000c54:	ea92 0f03 	teq	r2, r3
 8000c58:	d004      	beq.n	8000c64 <__addsf3+0x10c>
 8000c5a:	f092 0f00 	teq	r2, #0
 8000c5e:	bf08      	it	eq
 8000c60:	4608      	moveq	r0, r1
 8000c62:	4770      	bx	lr
 8000c64:	ea90 0f01 	teq	r0, r1
 8000c68:	bf1c      	itt	ne
 8000c6a:	2000      	movne	r0, #0
 8000c6c:	4770      	bxne	lr
 8000c6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c72:	d104      	bne.n	8000c7e <__addsf3+0x126>
 8000c74:	0040      	lsls	r0, r0, #1
 8000c76:	bf28      	it	cs
 8000c78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	4770      	bx	lr
 8000c7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c82:	bf3c      	itt	cc
 8000c84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bxcc	lr
 8000c8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c96:	4770      	bx	lr
 8000c98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c9c:	bf16      	itet	ne
 8000c9e:	4608      	movne	r0, r1
 8000ca0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca4:	4601      	movne	r1, r0
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	bf06      	itte	eq
 8000caa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cae:	ea90 0f01 	teqeq	r0, r1
 8000cb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_ui2f>:
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e004      	b.n	8000cc8 <__aeabi_i2f+0x8>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_i2f>:
 8000cc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	bf48      	it	mi
 8000cc6:	4240      	negmi	r0, r0
 8000cc8:	ea5f 0c00 	movs.w	ip, r0
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	f04f 0000 	mov.w	r0, #0
 8000cda:	e01c      	b.n	8000d16 <__aeabi_l2f+0x2a>

08000cdc <__aeabi_ul2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e00a      	b.n	8000d00 <__aeabi_l2f+0x14>
 8000cea:	bf00      	nop

08000cec <__aeabi_l2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf8:	d502      	bpl.n	8000d00 <__aeabi_l2f+0x14>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	ea5f 0c01 	movs.w	ip, r1
 8000d04:	bf02      	ittt	eq
 8000d06:	4684      	moveq	ip, r0
 8000d08:	4601      	moveq	r1, r0
 8000d0a:	2000      	moveq	r0, #0
 8000d0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d10:	bf08      	it	eq
 8000d12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1a:	fabc f28c 	clz	r2, ip
 8000d1e:	3a08      	subs	r2, #8
 8000d20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d24:	db10      	blt.n	8000d48 <__aeabi_l2f+0x5c>
 8000d26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d38:	fa20 f202 	lsr.w	r2, r0, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f102 0220 	add.w	r2, r2, #32
 8000d4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d58:	fa21 f202 	lsr.w	r2, r1, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_fmul>:
 8000d68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d70:	bf1e      	ittt	ne
 8000d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d76:	ea92 0f0c 	teqne	r2, ip
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d06f      	beq.n	8000e60 <__aeabi_fmul+0xf8>
 8000d80:	441a      	add	r2, r3
 8000d82:	ea80 0c01 	eor.w	ip, r0, r1
 8000d86:	0240      	lsls	r0, r0, #9
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8e:	d01e      	beq.n	8000dce <__aeabi_fmul+0x66>
 8000d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000da0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000da8:	bf3e      	ittt	cc
 8000daa:	0049      	lslcc	r1, r1, #1
 8000dac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db0:	005b      	lslcc	r3, r3, #1
 8000db2:	ea40 0001 	orr.w	r0, r0, r1
 8000db6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dba:	2afd      	cmp	r2, #253	; 0xfd
 8000dbc:	d81d      	bhi.n	8000dfa <__aeabi_fmul+0x92>
 8000dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc6:	bf08      	it	eq
 8000dc8:	f020 0001 	biceq.w	r0, r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd6:	bf08      	it	eq
 8000dd8:	0249      	lsleq	r1, r1, #9
 8000dda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de2:	3a7f      	subs	r2, #127	; 0x7f
 8000de4:	bfc2      	ittt	gt
 8000de6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dee:	4770      	bxgt	lr
 8000df0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	dc5d      	bgt.n	8000eb8 <__aeabi_fmul+0x150>
 8000dfc:	f112 0f19 	cmn.w	r2, #25
 8000e00:	bfdc      	itt	le
 8000e02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e06:	4770      	bxle	lr
 8000e08:	f1c2 0200 	rsb	r2, r2, #0
 8000e0c:	0041      	lsls	r1, r0, #1
 8000e0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e12:	f1c2 0220 	rsb	r2, r2, #32
 8000e16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1e:	f140 0000 	adc.w	r0, r0, #0
 8000e22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e26:	bf08      	it	eq
 8000e28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e2c:	4770      	bx	lr
 8000e2e:	f092 0f00 	teq	r2, #0
 8000e32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0040      	lsleq	r0, r0, #1
 8000e3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3e:	3a01      	subeq	r2, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fmul+0xce>
 8000e42:	ea40 000c 	orr.w	r0, r0, ip
 8000e46:	f093 0f00 	teq	r3, #0
 8000e4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0049      	lsleq	r1, r1, #1
 8000e52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e56:	3b01      	subeq	r3, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xe6>
 8000e5a:	ea41 010c 	orr.w	r1, r1, ip
 8000e5e:	e78f      	b.n	8000d80 <__aeabi_fmul+0x18>
 8000e60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	bf18      	it	ne
 8000e6a:	ea93 0f0c 	teqne	r3, ip
 8000e6e:	d00a      	beq.n	8000e86 <__aeabi_fmul+0x11e>
 8000e70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e74:	bf18      	it	ne
 8000e76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	d1d8      	bne.n	8000e2e <__aeabi_fmul+0xc6>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e84:	4770      	bx	lr
 8000e86:	f090 0f00 	teq	r0, #0
 8000e8a:	bf17      	itett	ne
 8000e8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e90:	4608      	moveq	r0, r1
 8000e92:	f091 0f00 	teqne	r1, #0
 8000e96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9a:	d014      	beq.n	8000ec6 <__aeabi_fmul+0x15e>
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d101      	bne.n	8000ea6 <__aeabi_fmul+0x13e>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	d10f      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000ea6:	ea93 0f0c 	teq	r3, ip
 8000eaa:	d103      	bne.n	8000eb4 <__aeabi_fmul+0x14c>
 8000eac:	024b      	lsls	r3, r1, #9
 8000eae:	bf18      	it	ne
 8000eb0:	4608      	movne	r0, r1
 8000eb2:	d108      	bne.n	8000ec6 <__aeabi_fmul+0x15e>
 8000eb4:	ea80 0001 	eor.w	r0, r0, r1
 8000eb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ebc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec4:	4770      	bx	lr
 8000ec6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_fdiv>:
 8000ed0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed8:	bf1e      	ittt	ne
 8000eda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ede:	ea92 0f0c 	teqne	r2, ip
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d069      	beq.n	8000fbc <__aeabi_fdiv+0xec>
 8000ee8:	eba2 0203 	sub.w	r2, r2, r3
 8000eec:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef0:	0249      	lsls	r1, r1, #9
 8000ef2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef6:	d037      	beq.n	8000f68 <__aeabi_fdiv+0x98>
 8000ef8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000efc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	bf38      	it	cc
 8000f0c:	005b      	lslcc	r3, r3, #1
 8000f0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f16:	428b      	cmp	r3, r1
 8000f18:	bf24      	itt	cs
 8000f1a:	1a5b      	subcs	r3, r3, r1
 8000f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f32:	bf24      	itt	cs
 8000f34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	bf18      	it	ne
 8000f4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f52:	d1e0      	bne.n	8000f16 <__aeabi_fdiv+0x46>
 8000f54:	2afd      	cmp	r2, #253	; 0xfd
 8000f56:	f63f af50 	bhi.w	8000dfa <__aeabi_fmul+0x92>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f60:	bf08      	it	eq
 8000f62:	f020 0001 	biceq.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f70:	327f      	adds	r2, #127	; 0x7f
 8000f72:	bfc2      	ittt	gt
 8000f74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f7c:	4770      	bxgt	lr
 8000f7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	3a01      	subs	r2, #1
 8000f88:	e737      	b.n	8000dfa <__aeabi_fmul+0x92>
 8000f8a:	f092 0f00 	teq	r2, #0
 8000f8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0040      	lsleq	r0, r0, #1
 8000f96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9a:	3a01      	subeq	r2, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fdiv+0xc2>
 8000f9e:	ea40 000c 	orr.w	r0, r0, ip
 8000fa2:	f093 0f00 	teq	r3, #0
 8000fa6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0049      	lsleq	r1, r1, #1
 8000fae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb2:	3b01      	subeq	r3, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xda>
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	e795      	b.n	8000ee8 <__aeabi_fdiv+0x18>
 8000fbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc0:	ea92 0f0c 	teq	r2, ip
 8000fc4:	d108      	bne.n	8000fd8 <__aeabi_fdiv+0x108>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	f47f af7d 	bne.w	8000ec6 <__aeabi_fmul+0x15e>
 8000fcc:	ea93 0f0c 	teq	r3, ip
 8000fd0:	f47f af70 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e776      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	d104      	bne.n	8000fe8 <__aeabi_fdiv+0x118>
 8000fde:	024b      	lsls	r3, r1, #9
 8000fe0:	f43f af4c 	beq.w	8000e7c <__aeabi_fmul+0x114>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e76e      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8000fe8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fec:	bf18      	it	ne
 8000fee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff2:	d1ca      	bne.n	8000f8a <__aeabi_fdiv+0xba>
 8000ff4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ff8:	f47f af5c 	bne.w	8000eb4 <__aeabi_fmul+0x14c>
 8000ffc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001000:	f47f af3c 	bne.w	8000e7c <__aeabi_fmul+0x114>
 8001004:	e75f      	b.n	8000ec6 <__aeabi_fmul+0x15e>
 8001006:	bf00      	nop

08001008 <__gesf2>:
 8001008:	f04f 3cff 	mov.w	ip, #4294967295
 800100c:	e006      	b.n	800101c <__cmpsf2+0x4>
 800100e:	bf00      	nop

08001010 <__lesf2>:
 8001010:	f04f 0c01 	mov.w	ip, #1
 8001014:	e002      	b.n	800101c <__cmpsf2+0x4>
 8001016:	bf00      	nop

08001018 <__cmpsf2>:
 8001018:	f04f 0c01 	mov.w	ip, #1
 800101c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001028:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800102c:	bf18      	it	ne
 800102e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001032:	d011      	beq.n	8001058 <__cmpsf2+0x40>
 8001034:	b001      	add	sp, #4
 8001036:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103a:	bf18      	it	ne
 800103c:	ea90 0f01 	teqne	r0, r1
 8001040:	bf58      	it	pl
 8001042:	ebb2 0003 	subspl.w	r0, r2, r3
 8001046:	bf88      	it	hi
 8001048:	17c8      	asrhi	r0, r1, #31
 800104a:	bf38      	it	cc
 800104c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001050:	bf18      	it	ne
 8001052:	f040 0001 	orrne.w	r0, r0, #1
 8001056:	4770      	bx	lr
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__cmpsf2+0x4c>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d105      	bne.n	8001070 <__cmpsf2+0x58>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d1e4      	bne.n	8001034 <__cmpsf2+0x1c>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d0e1      	beq.n	8001034 <__cmpsf2+0x1c>
 8001070:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__aeabi_cfrcmple>:
 8001078:	4684      	mov	ip, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4661      	mov	r1, ip
 800107e:	e7ff      	b.n	8001080 <__aeabi_cfcmpeq>

08001080 <__aeabi_cfcmpeq>:
 8001080:	b50f      	push	{r0, r1, r2, r3, lr}
 8001082:	f7ff ffc9 	bl	8001018 <__cmpsf2>
 8001086:	2800      	cmp	r0, #0
 8001088:	bf48      	it	mi
 800108a:	f110 0f00 	cmnmi.w	r0, #0
 800108e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001090 <__aeabi_fcmpeq>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff fff4 	bl	8001080 <__aeabi_cfcmpeq>
 8001098:	bf0c      	ite	eq
 800109a:	2001      	moveq	r0, #1
 800109c:	2000      	movne	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmplt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffea 	bl	8001080 <__aeabi_cfcmpeq>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmple>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffe0 	bl	8001080 <__aeabi_cfcmpeq>
 80010c0:	bf94      	ite	ls
 80010c2:	2001      	movls	r0, #1
 80010c4:	2000      	movhi	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmpge>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffd2 	bl	8001078 <__aeabi_cfrcmple>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpgt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffc8 	bl	8001078 <__aeabi_cfrcmple>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_f2uiz>:
 80010f4:	0042      	lsls	r2, r0, #1
 80010f6:	d20e      	bcs.n	8001116 <__aeabi_f2uiz+0x22>
 80010f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010fc:	d30b      	bcc.n	8001116 <__aeabi_f2uiz+0x22>
 80010fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001102:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001106:	d409      	bmi.n	800111c <__aeabi_f2uiz+0x28>
 8001108:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800110c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2uiz+0x32>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d102      	bne.n	800112c <__aeabi_f2uiz+0x38>
 8001126:	f04f 30ff 	mov.w	r0, #4294967295
 800112a:	4770      	bx	lr
 800112c:	f04f 0000 	mov.w	r0, #0
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <selfrel_offset31>:
 8001134:	6803      	ldr	r3, [r0, #0]
 8001136:	005a      	lsls	r2, r3, #1
 8001138:	bf4c      	ite	mi
 800113a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800113e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8001142:	4418      	add	r0, r3
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <search_EIT_table>:
 8001148:	b361      	cbz	r1, 80011a4 <search_EIT_table+0x5c>
 800114a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114e:	f101 3aff 	add.w	sl, r1, #4294967295
 8001152:	4690      	mov	r8, r2
 8001154:	4606      	mov	r6, r0
 8001156:	46d1      	mov	r9, sl
 8001158:	2700      	movs	r7, #0
 800115a:	eb07 0409 	add.w	r4, r7, r9
 800115e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001162:	1064      	asrs	r4, r4, #1
 8001164:	00e5      	lsls	r5, r4, #3
 8001166:	1971      	adds	r1, r6, r5
 8001168:	4608      	mov	r0, r1
 800116a:	f7ff ffe3 	bl	8001134 <selfrel_offset31>
 800116e:	45a2      	cmp	sl, r4
 8001170:	4683      	mov	fp, r0
 8001172:	f105 0008 	add.w	r0, r5, #8
 8001176:	4430      	add	r0, r6
 8001178:	d009      	beq.n	800118e <search_EIT_table+0x46>
 800117a:	f7ff ffdb 	bl	8001134 <selfrel_offset31>
 800117e:	45c3      	cmp	fp, r8
 8001180:	f100 30ff 	add.w	r0, r0, #4294967295
 8001184:	d805      	bhi.n	8001192 <search_EIT_table+0x4a>
 8001186:	4540      	cmp	r0, r8
 8001188:	d209      	bcs.n	800119e <search_EIT_table+0x56>
 800118a:	1c67      	adds	r7, r4, #1
 800118c:	e7e5      	b.n	800115a <search_EIT_table+0x12>
 800118e:	45c3      	cmp	fp, r8
 8001190:	d905      	bls.n	800119e <search_EIT_table+0x56>
 8001192:	42a7      	cmp	r7, r4
 8001194:	d002      	beq.n	800119c <search_EIT_table+0x54>
 8001196:	f104 39ff 	add.w	r9, r4, #4294967295
 800119a:	e7de      	b.n	800115a <search_EIT_table+0x12>
 800119c:	2100      	movs	r1, #0
 800119e:	4608      	mov	r0, r1
 80011a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011a4:	4608      	mov	r0, r1
 80011a6:	4770      	bx	lr

080011a8 <__gnu_unwind_get_pr_addr>:
 80011a8:	2801      	cmp	r0, #1
 80011aa:	d007      	beq.n	80011bc <__gnu_unwind_get_pr_addr+0x14>
 80011ac:	2802      	cmp	r0, #2
 80011ae:	d007      	beq.n	80011c0 <__gnu_unwind_get_pr_addr+0x18>
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__gnu_unwind_get_pr_addr+0x1c>)
 80011b2:	2800      	cmp	r0, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	4618      	moveq	r0, r3
 80011b8:	2000      	movne	r0, #0
 80011ba:	4770      	bx	lr
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <__gnu_unwind_get_pr_addr+0x20>)
 80011be:	4770      	bx	lr
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <__gnu_unwind_get_pr_addr+0x24>)
 80011c2:	4770      	bx	lr
 80011c4:	080018b9 	.word	0x080018b9
 80011c8:	080018bd 	.word	0x080018bd
 80011cc:	080018c1 	.word	0x080018c1

080011d0 <get_eit_entry>:
 80011d0:	b530      	push	{r4, r5, lr}
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <get_eit_entry+0x98>)
 80011d4:	b083      	sub	sp, #12
 80011d6:	4604      	mov	r4, r0
 80011d8:	1e8d      	subs	r5, r1, #2
 80011da:	b373      	cbz	r3, 800123a <get_eit_entry+0x6a>
 80011dc:	a901      	add	r1, sp, #4
 80011de:	4628      	mov	r0, r5
 80011e0:	f3af 8000 	nop.w
 80011e4:	b318      	cbz	r0, 800122e <get_eit_entry+0x5e>
 80011e6:	9901      	ldr	r1, [sp, #4]
 80011e8:	462a      	mov	r2, r5
 80011ea:	f7ff ffad 	bl	8001148 <search_EIT_table>
 80011ee:	4601      	mov	r1, r0
 80011f0:	b1e8      	cbz	r0, 800122e <get_eit_entry+0x5e>
 80011f2:	f7ff ff9f 	bl	8001134 <selfrel_offset31>
 80011f6:	684b      	ldr	r3, [r1, #4]
 80011f8:	64a0      	str	r0, [r4, #72]	; 0x48
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d011      	beq.n	8001222 <get_eit_entry+0x52>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db22      	blt.n	8001248 <get_eit_entry+0x78>
 8001202:	1d08      	adds	r0, r1, #4
 8001204:	f7ff ff96 	bl	8001134 <selfrel_offset31>
 8001208:	2300      	movs	r3, #0
 800120a:	64e0      	str	r0, [r4, #76]	; 0x4c
 800120c:	6523      	str	r3, [r4, #80]	; 0x50
 800120e:	6803      	ldr	r3, [r0, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db1e      	blt.n	8001252 <get_eit_entry+0x82>
 8001214:	f7ff ff8e 	bl	8001134 <selfrel_offset31>
 8001218:	2300      	movs	r3, #0
 800121a:	6120      	str	r0, [r4, #16]
 800121c:	4618      	mov	r0, r3
 800121e:	b003      	add	sp, #12
 8001220:	bd30      	pop	{r4, r5, pc}
 8001222:	2305      	movs	r3, #5
 8001224:	2200      	movs	r2, #0
 8001226:	4618      	mov	r0, r3
 8001228:	6122      	str	r2, [r4, #16]
 800122a:	b003      	add	sp, #12
 800122c:	bd30      	pop	{r4, r5, pc}
 800122e:	2309      	movs	r3, #9
 8001230:	2200      	movs	r2, #0
 8001232:	4618      	mov	r0, r3
 8001234:	6122      	str	r2, [r4, #16]
 8001236:	b003      	add	sp, #12
 8001238:	bd30      	pop	{r4, r5, pc}
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <get_eit_entry+0x9c>)
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <get_eit_entry+0xa0>)
 800123e:	4618      	mov	r0, r3
 8001240:	1ac9      	subs	r1, r1, r3
 8001242:	10c9      	asrs	r1, r1, #3
 8001244:	9101      	str	r1, [sp, #4]
 8001246:	e7cf      	b.n	80011e8 <get_eit_entry+0x18>
 8001248:	2301      	movs	r3, #1
 800124a:	1d08      	adds	r0, r1, #4
 800124c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800124e:	6523      	str	r3, [r4, #80]	; 0x50
 8001250:	e7dd      	b.n	800120e <get_eit_entry+0x3e>
 8001252:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8001256:	f7ff ffa7 	bl	80011a8 <__gnu_unwind_get_pr_addr>
 800125a:	2800      	cmp	r0, #0
 800125c:	6120      	str	r0, [r4, #16]
 800125e:	bf14      	ite	ne
 8001260:	2300      	movne	r3, #0
 8001262:	2309      	moveq	r3, #9
 8001264:	e7da      	b.n	800121c <get_eit_entry+0x4c>
 8001266:	bf00      	nop
 8001268:	00000000 	.word	0x00000000
 800126c:	08006ca4 	.word	0x08006ca4
 8001270:	08006e5c 	.word	0x08006e5c

08001274 <restore_non_core_regs>:
 8001274:	6803      	ldr	r3, [r0, #0]
 8001276:	b510      	push	{r4, lr}
 8001278:	07da      	lsls	r2, r3, #31
 800127a:	4604      	mov	r4, r0
 800127c:	d406      	bmi.n	800128c <restore_non_core_regs+0x18>
 800127e:	079b      	lsls	r3, r3, #30
 8001280:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001284:	d509      	bpl.n	800129a <restore_non_core_regs+0x26>
 8001286:	f000 fc57 	bl	8001b38 <__gnu_Unwind_Restore_VFP_D>
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	0759      	lsls	r1, r3, #29
 800128e:	d509      	bpl.n	80012a4 <restore_non_core_regs+0x30>
 8001290:	071a      	lsls	r2, r3, #28
 8001292:	d50e      	bpl.n	80012b2 <restore_non_core_regs+0x3e>
 8001294:	06db      	lsls	r3, r3, #27
 8001296:	d513      	bpl.n	80012c0 <restore_non_core_regs+0x4c>
 8001298:	bd10      	pop	{r4, pc}
 800129a:	f000 fc45 	bl	8001b28 <__gnu_Unwind_Restore_VFP>
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	0759      	lsls	r1, r3, #29
 80012a2:	d4f5      	bmi.n	8001290 <restore_non_core_regs+0x1c>
 80012a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80012a8:	f000 fc4e 	bl	8001b48 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	071a      	lsls	r2, r3, #28
 80012b0:	d4f0      	bmi.n	8001294 <restore_non_core_regs+0x20>
 80012b2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80012b6:	f000 fc4f 	bl	8001b58 <__gnu_Unwind_Restore_WMMXD>
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	06db      	lsls	r3, r3, #27
 80012be:	d4eb      	bmi.n	8001298 <restore_non_core_regs+0x24>
 80012c0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80012c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012c8:	f000 bc8a 	b.w	8001be0 <__gnu_Unwind_Restore_WMMXC>

080012cc <_Unwind_decode_typeinfo_ptr.isra.0>:
 80012cc:	6803      	ldr	r3, [r0, #0]
 80012ce:	b103      	cbz	r3, 80012d2 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80012d0:	4403      	add	r3, r0
 80012d2:	4618      	mov	r0, r3
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <__gnu_unwind_24bit.isra.1>:
 80012d8:	2009      	movs	r0, #9
 80012da:	4770      	bx	lr

080012dc <_Unwind_DebugHook>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <unwind_phase2>:
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	e008      	b.n	80012fa <unwind_phase2+0x1a>
 80012e8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80012ea:	6923      	ldr	r3, [r4, #16]
 80012ec:	6162      	str	r2, [r4, #20]
 80012ee:	4621      	mov	r1, r4
 80012f0:	462a      	mov	r2, r5
 80012f2:	2001      	movs	r0, #1
 80012f4:	4798      	blx	r3
 80012f6:	2808      	cmp	r0, #8
 80012f8:	d108      	bne.n	800130c <unwind_phase2+0x2c>
 80012fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012fc:	4620      	mov	r0, r4
 80012fe:	f7ff ff67 	bl	80011d0 <get_eit_entry>
 8001302:	4606      	mov	r6, r0
 8001304:	2800      	cmp	r0, #0
 8001306:	d0ef      	beq.n	80012e8 <unwind_phase2+0x8>
 8001308:	f005 fae6 	bl	80068d8 <abort>
 800130c:	2807      	cmp	r0, #7
 800130e:	d1fb      	bne.n	8001308 <unwind_phase2+0x28>
 8001310:	4630      	mov	r0, r6
 8001312:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001314:	f7ff ffe2 	bl	80012dc <_Unwind_DebugHook>
 8001318:	1d28      	adds	r0, r5, #4
 800131a:	f000 fbf9 	bl	8001b10 <__restore_core_regs>
 800131e:	bf00      	nop

08001320 <unwind_phase2_forced>:
 8001320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001324:	4605      	mov	r5, r0
 8001326:	2700      	movs	r7, #0
 8001328:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800132c:	ac03      	add	r4, sp, #12
 800132e:	1d0e      	adds	r6, r1, #4
 8001330:	4692      	mov	sl, r2
 8001332:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001336:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001342:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8001346:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800134a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800134e:	ac02      	add	r4, sp, #8
 8001350:	4628      	mov	r0, r5
 8001352:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001354:	6027      	str	r7, [r4, #0]
 8001356:	f7ff ff3b 	bl	80011d0 <get_eit_entry>
 800135a:	f1ba 0f00 	cmp.w	sl, #0
 800135e:	4607      	mov	r7, r0
 8001360:	bf14      	ite	ne
 8001362:	260a      	movne	r6, #10
 8001364:	2609      	moveq	r6, #9
 8001366:	b17f      	cbz	r7, 8001388 <unwind_phase2_forced+0x68>
 8001368:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800136a:	f046 0110 	orr.w	r1, r6, #16
 800136e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8001372:	462a      	mov	r2, r5
 8001374:	6463      	str	r3, [r4, #68]	; 0x44
 8001376:	2001      	movs	r0, #1
 8001378:	462b      	mov	r3, r5
 800137a:	47c0      	blx	r8
 800137c:	bb78      	cbnz	r0, 80013de <unwind_phase2_forced+0xbe>
 800137e:	4638      	mov	r0, r7
 8001380:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800138a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800138e:	616b      	str	r3, [r5, #20]
 8001390:	4621      	mov	r1, r4
 8001392:	a87a      	add	r0, sp, #488	; 0x1e8
 8001394:	f005 faa7 	bl	80068e6 <memcpy>
 8001398:	692b      	ldr	r3, [r5, #16]
 800139a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800139c:	4629      	mov	r1, r5
 800139e:	4630      	mov	r0, r6
 80013a0:	4798      	blx	r3
 80013a2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80013a4:	4682      	mov	sl, r0
 80013a6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80013aa:	4631      	mov	r1, r6
 80013ac:	6463      	str	r3, [r4, #68]	; 0x44
 80013ae:	462a      	mov	r2, r5
 80013b0:	462b      	mov	r3, r5
 80013b2:	2001      	movs	r0, #1
 80013b4:	47c0      	blx	r8
 80013b6:	b990      	cbnz	r0, 80013de <unwind_phase2_forced+0xbe>
 80013b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013bc:	a97a      	add	r1, sp, #488	; 0x1e8
 80013be:	4620      	mov	r0, r4
 80013c0:	f005 fa91 	bl	80068e6 <memcpy>
 80013c4:	f1ba 0f08 	cmp.w	sl, #8
 80013c8:	d106      	bne.n	80013d8 <unwind_phase2_forced+0xb8>
 80013ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013cc:	4628      	mov	r0, r5
 80013ce:	f7ff feff 	bl	80011d0 <get_eit_entry>
 80013d2:	2609      	movs	r6, #9
 80013d4:	4607      	mov	r7, r0
 80013d6:	e7c6      	b.n	8001366 <unwind_phase2_forced+0x46>
 80013d8:	f1ba 0f07 	cmp.w	sl, #7
 80013dc:	d005      	beq.n	80013ea <unwind_phase2_forced+0xca>
 80013de:	2709      	movs	r7, #9
 80013e0:	4638      	mov	r0, r7
 80013e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80013e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ea:	4638      	mov	r0, r7
 80013ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013ee:	f7ff ff75 	bl	80012dc <_Unwind_DebugHook>
 80013f2:	a803      	add	r0, sp, #12
 80013f4:	f000 fb8c 	bl	8001b10 <__restore_core_regs>

080013f8 <_Unwind_GetCFA>:
 80013f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80013fa:	4770      	bx	lr

080013fc <__gnu_Unwind_RaiseException>:
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	f04f 3eff 	mov.w	lr, #4294967295
 8001402:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001404:	b0f9      	sub	sp, #484	; 0x1e4
 8001406:	640b      	str	r3, [r1, #64]	; 0x40
 8001408:	1d0e      	adds	r6, r1, #4
 800140a:	ad01      	add	r5, sp, #4
 800140c:	460f      	mov	r7, r1
 800140e:	4604      	mov	r4, r0
 8001410:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800141a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001420:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001424:	f8cd e000 	str.w	lr, [sp]
 8001428:	e006      	b.n	8001438 <__gnu_Unwind_RaiseException+0x3c>
 800142a:	6923      	ldr	r3, [r4, #16]
 800142c:	466a      	mov	r2, sp
 800142e:	4621      	mov	r1, r4
 8001430:	4798      	blx	r3
 8001432:	2808      	cmp	r0, #8
 8001434:	4605      	mov	r5, r0
 8001436:	d108      	bne.n	800144a <__gnu_Unwind_RaiseException+0x4e>
 8001438:	9910      	ldr	r1, [sp, #64]	; 0x40
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff fec8 	bl	80011d0 <get_eit_entry>
 8001440:	2800      	cmp	r0, #0
 8001442:	d0f2      	beq.n	800142a <__gnu_Unwind_RaiseException+0x2e>
 8001444:	2009      	movs	r0, #9
 8001446:	b079      	add	sp, #484	; 0x1e4
 8001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144a:	4668      	mov	r0, sp
 800144c:	f7ff ff12 	bl	8001274 <restore_non_core_regs>
 8001450:	2d06      	cmp	r5, #6
 8001452:	d1f7      	bne.n	8001444 <__gnu_Unwind_RaiseException+0x48>
 8001454:	4639      	mov	r1, r7
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff ff42 	bl	80012e0 <unwind_phase2>

0800145c <__gnu_Unwind_ForcedUnwind>:
 800145c:	b430      	push	{r4, r5}
 800145e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001460:	60c1      	str	r1, [r0, #12]
 8001462:	6182      	str	r2, [r0, #24]
 8001464:	4619      	mov	r1, r3
 8001466:	641d      	str	r5, [r3, #64]	; 0x40
 8001468:	2200      	movs	r2, #0
 800146a:	bc30      	pop	{r4, r5}
 800146c:	e758      	b.n	8001320 <unwind_phase2_forced>
 800146e:	bf00      	nop

08001470 <__gnu_Unwind_Resume>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	6943      	ldr	r3, [r0, #20]
 8001474:	68c6      	ldr	r6, [r0, #12]
 8001476:	640b      	str	r3, [r1, #64]	; 0x40
 8001478:	b126      	cbz	r6, 8001484 <__gnu_Unwind_Resume+0x14>
 800147a:	2201      	movs	r2, #1
 800147c:	f7ff ff50 	bl	8001320 <unwind_phase2_forced>
 8001480:	f005 fa2a 	bl	80068d8 <abort>
 8001484:	6903      	ldr	r3, [r0, #16]
 8001486:	460a      	mov	r2, r1
 8001488:	4604      	mov	r4, r0
 800148a:	460d      	mov	r5, r1
 800148c:	4601      	mov	r1, r0
 800148e:	2002      	movs	r0, #2
 8001490:	4798      	blx	r3
 8001492:	2807      	cmp	r0, #7
 8001494:	d007      	beq.n	80014a6 <__gnu_Unwind_Resume+0x36>
 8001496:	2808      	cmp	r0, #8
 8001498:	d103      	bne.n	80014a2 <__gnu_Unwind_Resume+0x32>
 800149a:	4629      	mov	r1, r5
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ff1f 	bl	80012e0 <unwind_phase2>
 80014a2:	f005 fa19 	bl	80068d8 <abort>
 80014a6:	4630      	mov	r0, r6
 80014a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80014aa:	f7ff ff17 	bl	80012dc <_Unwind_DebugHook>
 80014ae:	1d28      	adds	r0, r5, #4
 80014b0:	f000 fb2e 	bl	8001b10 <__restore_core_regs>

080014b4 <__gnu_Unwind_Resume_or_Rethrow>:
 80014b4:	68c2      	ldr	r2, [r0, #12]
 80014b6:	b12a      	cbz	r2, 80014c4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80014b8:	b410      	push	{r4}
 80014ba:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80014bc:	2200      	movs	r2, #0
 80014be:	640c      	str	r4, [r1, #64]	; 0x40
 80014c0:	bc10      	pop	{r4}
 80014c2:	e72d      	b.n	8001320 <unwind_phase2_forced>
 80014c4:	e79a      	b.n	80013fc <__gnu_Unwind_RaiseException>
 80014c6:	bf00      	nop

080014c8 <_Unwind_Complete>:
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <_Unwind_DeleteException>:
 80014cc:	6883      	ldr	r3, [r0, #8]
 80014ce:	b113      	cbz	r3, 80014d6 <_Unwind_DeleteException+0xa>
 80014d0:	4601      	mov	r1, r0
 80014d2:	2001      	movs	r0, #1
 80014d4:	4718      	bx	r3
 80014d6:	4770      	bx	lr

080014d8 <_Unwind_VRS_Get>:
 80014d8:	b500      	push	{lr}
 80014da:	2904      	cmp	r1, #4
 80014dc:	d807      	bhi.n	80014ee <_Unwind_VRS_Get+0x16>
 80014de:	e8df f001 	tbb	[pc, r1]
 80014e2:	0903      	.short	0x0903
 80014e4:	0906      	.short	0x0906
 80014e6:	09          	.byte	0x09
 80014e7:	00          	.byte	0x00
 80014e8:	b90b      	cbnz	r3, 80014ee <_Unwind_VRS_Get+0x16>
 80014ea:	2a0f      	cmp	r2, #15
 80014ec:	d905      	bls.n	80014fa <_Unwind_VRS_Get+0x22>
 80014ee:	2002      	movs	r0, #2
 80014f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014f4:	2001      	movs	r0, #1
 80014f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80014fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80014fe:	6852      	ldr	r2, [r2, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	9b01      	ldr	r3, [sp, #4]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f85d fb04 	ldr.w	pc, [sp], #4
 800150a:	bf00      	nop

0800150c <_Unwind_GetGR>:
 800150c:	2300      	movs	r3, #0
 800150e:	b510      	push	{r4, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	ac03      	add	r4, sp, #12
 8001514:	460a      	mov	r2, r1
 8001516:	9400      	str	r4, [sp, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff ffdd 	bl	80014d8 <_Unwind_VRS_Get>
 800151e:	9803      	ldr	r0, [sp, #12]
 8001520:	b004      	add	sp, #16
 8001522:	bd10      	pop	{r4, pc}

08001524 <_Unwind_VRS_Set>:
 8001524:	b500      	push	{lr}
 8001526:	2904      	cmp	r1, #4
 8001528:	d807      	bhi.n	800153a <_Unwind_VRS_Set+0x16>
 800152a:	e8df f001 	tbb	[pc, r1]
 800152e:	0903      	.short	0x0903
 8001530:	0906      	.short	0x0906
 8001532:	09          	.byte	0x09
 8001533:	00          	.byte	0x00
 8001534:	b90b      	cbnz	r3, 800153a <_Unwind_VRS_Set+0x16>
 8001536:	2a0f      	cmp	r2, #15
 8001538:	d905      	bls.n	8001546 <_Unwind_VRS_Set+0x22>
 800153a:	2002      	movs	r0, #2
 800153c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001540:	2001      	movs	r0, #1
 8001542:	f85d fb04 	ldr.w	pc, [sp], #4
 8001546:	9901      	ldr	r1, [sp, #4]
 8001548:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800154c:	6809      	ldr	r1, [r1, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	6051      	str	r1, [r2, #4]
 8001552:	f85d fb04 	ldr.w	pc, [sp], #4
 8001556:	bf00      	nop

08001558 <_Unwind_SetGR>:
 8001558:	2300      	movs	r3, #0
 800155a:	b510      	push	{r4, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	ac04      	add	r4, sp, #16
 8001560:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001564:	9400      	str	r4, [sp, #0]
 8001566:	460a      	mov	r2, r1
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff ffdb 	bl	8001524 <_Unwind_VRS_Set>
 800156e:	b004      	add	sp, #16
 8001570:	bd10      	pop	{r4, pc}
 8001572:	bf00      	nop

08001574 <__gnu_Unwind_Backtrace>:
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	f04f 3eff 	mov.w	lr, #4294967295
 800157a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800157c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	1d15      	adds	r5, r2, #4
 8001584:	ac17      	add	r4, sp, #92	; 0x5c
 8001586:	4607      	mov	r7, r0
 8001588:	460e      	mov	r6, r1
 800158a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001596:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800159a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800159e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80015a2:	e012      	b.n	80015ca <__gnu_Unwind_Backtrace+0x56>
 80015a4:	210c      	movs	r1, #12
 80015a6:	a816      	add	r0, sp, #88	; 0x58
 80015a8:	466a      	mov	r2, sp
 80015aa:	f7ff ffd5 	bl	8001558 <_Unwind_SetGR>
 80015ae:	4631      	mov	r1, r6
 80015b0:	a816      	add	r0, sp, #88	; 0x58
 80015b2:	47b8      	blx	r7
 80015b4:	b978      	cbnz	r0, 80015d6 <__gnu_Unwind_Backtrace+0x62>
 80015b6:	9b04      	ldr	r3, [sp, #16]
 80015b8:	aa16      	add	r2, sp, #88	; 0x58
 80015ba:	4669      	mov	r1, sp
 80015bc:	2008      	movs	r0, #8
 80015be:	4798      	blx	r3
 80015c0:	2805      	cmp	r0, #5
 80015c2:	4604      	mov	r4, r0
 80015c4:	d008      	beq.n	80015d8 <__gnu_Unwind_Backtrace+0x64>
 80015c6:	2809      	cmp	r0, #9
 80015c8:	d005      	beq.n	80015d6 <__gnu_Unwind_Backtrace+0x62>
 80015ca:	9926      	ldr	r1, [sp, #152]	; 0x98
 80015cc:	4668      	mov	r0, sp
 80015ce:	f7ff fdff 	bl	80011d0 <get_eit_entry>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d0e6      	beq.n	80015a4 <__gnu_Unwind_Backtrace+0x30>
 80015d6:	2409      	movs	r4, #9
 80015d8:	a816      	add	r0, sp, #88	; 0x58
 80015da:	f7ff fe4b 	bl	8001274 <restore_non_core_regs>
 80015de:	4620      	mov	r0, r4
 80015e0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e6:	bf00      	nop

080015e8 <__gnu_unwind_pr_common>:
 80015e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ec:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80015ee:	4691      	mov	r9, r2
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	3404      	adds	r4, #4
 80015f6:	460d      	mov	r5, r1
 80015f8:	9207      	str	r2, [sp, #28]
 80015fa:	9408      	str	r4, [sp, #32]
 80015fc:	f000 0b03 	and.w	fp, r0, #3
 8001600:	461e      	mov	r6, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d160      	bne.n	80016c8 <__gnu_unwind_pr_common+0xe0>
 8001606:	2303      	movs	r3, #3
 8001608:	0212      	lsls	r2, r2, #8
 800160a:	9207      	str	r2, [sp, #28]
 800160c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8001610:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001614:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001616:	f1bb 0f02 	cmp.w	fp, #2
 800161a:	bf08      	it	eq
 800161c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800161e:	f013 0301 	ands.w	r3, r3, #1
 8001622:	d140      	bne.n	80016a6 <__gnu_unwind_pr_common+0xbe>
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	f000 0308 	and.w	r3, r0, #8
 800162a:	9303      	str	r3, [sp, #12]
 800162c:	f8d4 8000 	ldr.w	r8, [r4]
 8001630:	f1b8 0f00 	cmp.w	r8, #0
 8001634:	d039      	beq.n	80016aa <__gnu_unwind_pr_common+0xc2>
 8001636:	2e02      	cmp	r6, #2
 8001638:	d043      	beq.n	80016c2 <__gnu_unwind_pr_common+0xda>
 800163a:	f8b4 8000 	ldrh.w	r8, [r4]
 800163e:	8867      	ldrh	r7, [r4, #2]
 8001640:	3404      	adds	r4, #4
 8001642:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001644:	f027 0a01 	bic.w	sl, r7, #1
 8001648:	210f      	movs	r1, #15
 800164a:	4648      	mov	r0, r9
 800164c:	449a      	add	sl, r3
 800164e:	f7ff ff5d 	bl	800150c <_Unwind_GetGR>
 8001652:	4582      	cmp	sl, r0
 8001654:	d833      	bhi.n	80016be <__gnu_unwind_pr_common+0xd6>
 8001656:	f028 0301 	bic.w	r3, r8, #1
 800165a:	449a      	add	sl, r3
 800165c:	4550      	cmp	r0, sl
 800165e:	bf2c      	ite	cs
 8001660:	2000      	movcs	r0, #0
 8001662:	2001      	movcc	r0, #1
 8001664:	007f      	lsls	r7, r7, #1
 8001666:	f007 0702 	and.w	r7, r7, #2
 800166a:	f008 0801 	and.w	r8, r8, #1
 800166e:	ea47 0708 	orr.w	r7, r7, r8
 8001672:	2f01      	cmp	r7, #1
 8001674:	d03e      	beq.n	80016f4 <__gnu_unwind_pr_common+0x10c>
 8001676:	d335      	bcc.n	80016e4 <__gnu_unwind_pr_common+0xfc>
 8001678:	2f02      	cmp	r7, #2
 800167a:	d11c      	bne.n	80016b6 <__gnu_unwind_pr_common+0xce>
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001682:	9202      	str	r2, [sp, #8]
 8001684:	f1bb 0f00 	cmp.w	fp, #0
 8001688:	d176      	bne.n	8001778 <__gnu_unwind_pr_common+0x190>
 800168a:	b128      	cbz	r0, 8001698 <__gnu_unwind_pr_common+0xb0>
 800168c:	9903      	ldr	r1, [sp, #12]
 800168e:	2900      	cmp	r1, #0
 8001690:	d07e      	beq.n	8001790 <__gnu_unwind_pr_common+0x1a8>
 8001692:	2a00      	cmp	r2, #0
 8001694:	f000 80a6 	beq.w	80017e4 <__gnu_unwind_pr_common+0x1fc>
 8001698:	2b00      	cmp	r3, #0
 800169a:	db77      	blt.n	800178c <__gnu_unwind_pr_common+0x1a4>
 800169c:	9b02      	ldr	r3, [sp, #8]
 800169e:	3301      	adds	r3, #1
 80016a0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80016a4:	e7c2      	b.n	800162c <__gnu_unwind_pr_common+0x44>
 80016a6:	2300      	movs	r3, #0
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2e02      	cmp	r6, #2
 80016ac:	dd3e      	ble.n	800172c <__gnu_unwind_pr_common+0x144>
 80016ae:	f7ff fe13 	bl	80012d8 <__gnu_unwind_24bit.isra.1>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d040      	beq.n	8001738 <__gnu_unwind_pr_common+0x150>
 80016b6:	2009      	movs	r0, #9
 80016b8:	b00b      	add	sp, #44	; 0x2c
 80016ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016be:	2000      	movs	r0, #0
 80016c0:	e7d0      	b.n	8001664 <__gnu_unwind_pr_common+0x7c>
 80016c2:	6867      	ldr	r7, [r4, #4]
 80016c4:	3408      	adds	r4, #8
 80016c6:	e7bc      	b.n	8001642 <__gnu_unwind_pr_common+0x5a>
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	dca3      	bgt.n	8001614 <__gnu_unwind_pr_common+0x2c>
 80016cc:	2102      	movs	r1, #2
 80016ce:	0c13      	lsrs	r3, r2, #16
 80016d0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80016d4:	0412      	lsls	r2, r2, #16
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80016dc:	9207      	str	r2, [sp, #28]
 80016de:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80016e2:	e797      	b.n	8001614 <__gnu_unwind_pr_common+0x2c>
 80016e4:	f1bb 0f00 	cmp.w	fp, #0
 80016e8:	d002      	beq.n	80016f0 <__gnu_unwind_pr_common+0x108>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	f040 80bd 	bne.w	800186a <__gnu_unwind_pr_common+0x282>
 80016f0:	3404      	adds	r4, #4
 80016f2:	e79b      	b.n	800162c <__gnu_unwind_pr_common+0x44>
 80016f4:	f1bb 0f00 	cmp.w	fp, #0
 80016f8:	d125      	bne.n	8001746 <__gnu_unwind_pr_common+0x15e>
 80016fa:	b1a8      	cbz	r0, 8001728 <__gnu_unwind_pr_common+0x140>
 80016fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001700:	1c99      	adds	r1, r3, #2
 8001702:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001706:	d0d6      	beq.n	80016b6 <__gnu_unwind_pr_common+0xce>
 8001708:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800170c:	3301      	adds	r3, #1
 800170e:	9106      	str	r1, [sp, #24]
 8001710:	f000 80a3 	beq.w	800185a <__gnu_unwind_pr_common+0x272>
 8001714:	1d20      	adds	r0, r4, #4
 8001716:	f7ff fdd9 	bl	80012cc <_Unwind_decode_typeinfo_ptr.isra.0>
 800171a:	ab06      	add	r3, sp, #24
 800171c:	4601      	mov	r1, r0
 800171e:	4628      	mov	r0, r5
 8001720:	f3af 8000 	nop.w
 8001724:	2800      	cmp	r0, #0
 8001726:	d177      	bne.n	8001818 <__gnu_unwind_pr_common+0x230>
 8001728:	3408      	adds	r4, #8
 800172a:	e77f      	b.n	800162c <__gnu_unwind_pr_common+0x44>
 800172c:	a907      	add	r1, sp, #28
 800172e:	4648      	mov	r0, r9
 8001730:	f000 faf0 	bl	8001d14 <__gnu_unwind_execute>
 8001734:	2800      	cmp	r0, #0
 8001736:	d1be      	bne.n	80016b6 <__gnu_unwind_pr_common+0xce>
 8001738:	9b01      	ldr	r3, [sp, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d15c      	bne.n	80017f8 <__gnu_unwind_pr_common+0x210>
 800173e:	2008      	movs	r0, #8
 8001740:	b00b      	add	sp, #44	; 0x2c
 8001742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001746:	210d      	movs	r1, #13
 8001748:	4648      	mov	r0, r9
 800174a:	6a2f      	ldr	r7, [r5, #32]
 800174c:	f7ff fede 	bl	800150c <_Unwind_GetGR>
 8001750:	4287      	cmp	r7, r0
 8001752:	d1e9      	bne.n	8001728 <__gnu_unwind_pr_common+0x140>
 8001754:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001756:	429c      	cmp	r4, r3
 8001758:	d1e6      	bne.n	8001728 <__gnu_unwind_pr_common+0x140>
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff fcea 	bl	8001134 <selfrel_offset31>
 8001760:	210f      	movs	r1, #15
 8001762:	4602      	mov	r2, r0
 8001764:	4648      	mov	r0, r9
 8001766:	f7ff fef7 	bl	8001558 <_Unwind_SetGR>
 800176a:	4648      	mov	r0, r9
 800176c:	462a      	mov	r2, r5
 800176e:	2100      	movs	r1, #0
 8001770:	f7ff fef2 	bl	8001558 <_Unwind_SetGR>
 8001774:	2007      	movs	r0, #7
 8001776:	e79f      	b.n	80016b8 <__gnu_unwind_pr_common+0xd0>
 8001778:	210d      	movs	r1, #13
 800177a:	4648      	mov	r0, r9
 800177c:	6a2f      	ldr	r7, [r5, #32]
 800177e:	f7ff fec5 	bl	800150c <_Unwind_GetGR>
 8001782:	4287      	cmp	r7, r0
 8001784:	d058      	beq.n	8001838 <__gnu_unwind_pr_common+0x250>
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da87      	bge.n	800169c <__gnu_unwind_pr_common+0xb4>
 800178c:	3404      	adds	r4, #4
 800178e:	e785      	b.n	800169c <__gnu_unwind_pr_common+0xb4>
 8001790:	9b02      	ldr	r3, [sp, #8]
 8001792:	b33b      	cbz	r3, 80017e4 <__gnu_unwind_pr_common+0x1fc>
 8001794:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001798:	1d27      	adds	r7, r4, #4
 800179a:	f8cd b010 	str.w	fp, [sp, #16]
 800179e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80017a2:	46a3      	mov	fp, r4
 80017a4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80017a8:	461c      	mov	r4, r3
 80017aa:	9605      	str	r6, [sp, #20]
 80017ac:	e002      	b.n	80017b4 <__gnu_unwind_pr_common+0x1cc>
 80017ae:	45b2      	cmp	sl, r6
 80017b0:	46b0      	mov	r8, r6
 80017b2:	d016      	beq.n	80017e2 <__gnu_unwind_pr_common+0x1fa>
 80017b4:	4638      	mov	r0, r7
 80017b6:	9406      	str	r4, [sp, #24]
 80017b8:	f7ff fd88 	bl	80012cc <_Unwind_decode_typeinfo_ptr.isra.0>
 80017bc:	ab06      	add	r3, sp, #24
 80017be:	4601      	mov	r1, r0
 80017c0:	2200      	movs	r2, #0
 80017c2:	4628      	mov	r0, r5
 80017c4:	f3af 8000 	nop.w
 80017c8:	f108 0601 	add.w	r6, r8, #1
 80017cc:	3704      	adds	r7, #4
 80017ce:	2800      	cmp	r0, #0
 80017d0:	d0ed      	beq.n	80017ae <__gnu_unwind_pr_common+0x1c6>
 80017d2:	9b02      	ldr	r3, [sp, #8]
 80017d4:	465c      	mov	r4, fp
 80017d6:	4543      	cmp	r3, r8
 80017d8:	f8dd b010 	ldr.w	fp, [sp, #16]
 80017dc:	9e05      	ldr	r6, [sp, #20]
 80017de:	d1d2      	bne.n	8001786 <__gnu_unwind_pr_common+0x19e>
 80017e0:	e000      	b.n	80017e4 <__gnu_unwind_pr_common+0x1fc>
 80017e2:	465c      	mov	r4, fp
 80017e4:	4648      	mov	r0, r9
 80017e6:	210d      	movs	r1, #13
 80017e8:	f7ff fe90 	bl	800150c <_Unwind_GetGR>
 80017ec:	9b06      	ldr	r3, [sp, #24]
 80017ee:	6228      	str	r0, [r5, #32]
 80017f0:	62ac      	str	r4, [r5, #40]	; 0x28
 80017f2:	626b      	str	r3, [r5, #36]	; 0x24
 80017f4:	2006      	movs	r0, #6
 80017f6:	e75f      	b.n	80016b8 <__gnu_unwind_pr_common+0xd0>
 80017f8:	210f      	movs	r1, #15
 80017fa:	4648      	mov	r0, r9
 80017fc:	f7ff fe86 	bl	800150c <_Unwind_GetGR>
 8001800:	210e      	movs	r1, #14
 8001802:	4602      	mov	r2, r0
 8001804:	4648      	mov	r0, r9
 8001806:	f7ff fea7 	bl	8001558 <_Unwind_SetGR>
 800180a:	4648      	mov	r0, r9
 800180c:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <__gnu_unwind_pr_common+0x2cc>)
 800180e:	210f      	movs	r1, #15
 8001810:	f7ff fea2 	bl	8001558 <_Unwind_SetGR>
 8001814:	2007      	movs	r0, #7
 8001816:	e74f      	b.n	80016b8 <__gnu_unwind_pr_common+0xd0>
 8001818:	4607      	mov	r7, r0
 800181a:	210d      	movs	r1, #13
 800181c:	4648      	mov	r0, r9
 800181e:	f7ff fe75 	bl	800150c <_Unwind_GetGR>
 8001822:	2f02      	cmp	r7, #2
 8001824:	6228      	str	r0, [r5, #32]
 8001826:	d11d      	bne.n	8001864 <__gnu_unwind_pr_common+0x27c>
 8001828:	462b      	mov	r3, r5
 800182a:	9a06      	ldr	r2, [sp, #24]
 800182c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001830:	626b      	str	r3, [r5, #36]	; 0x24
 8001832:	62ac      	str	r4, [r5, #40]	; 0x28
 8001834:	2006      	movs	r0, #6
 8001836:	e73f      	b.n	80016b8 <__gnu_unwind_pr_common+0xd0>
 8001838:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800183a:	429c      	cmp	r4, r3
 800183c:	d1a3      	bne.n	8001786 <__gnu_unwind_pr_common+0x19e>
 800183e:	2204      	movs	r2, #4
 8001840:	2700      	movs	r7, #0
 8001842:	9902      	ldr	r1, [sp, #8]
 8001844:	18a3      	adds	r3, r4, r2
 8001846:	62a9      	str	r1, [r5, #40]	; 0x28
 8001848:	62ef      	str	r7, [r5, #44]	; 0x2c
 800184a:	632a      	str	r2, [r5, #48]	; 0x30
 800184c:	636b      	str	r3, [r5, #52]	; 0x34
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	42bb      	cmp	r3, r7
 8001852:	db1d      	blt.n	8001890 <__gnu_unwind_pr_common+0x2a8>
 8001854:	2301      	movs	r3, #1
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	e720      	b.n	800169c <__gnu_unwind_pr_common+0xb4>
 800185a:	4648      	mov	r0, r9
 800185c:	210d      	movs	r1, #13
 800185e:	f7ff fe55 	bl	800150c <_Unwind_GetGR>
 8001862:	6228      	str	r0, [r5, #32]
 8001864:	9b06      	ldr	r3, [sp, #24]
 8001866:	626b      	str	r3, [r5, #36]	; 0x24
 8001868:	e7e3      	b.n	8001832 <__gnu_unwind_pr_common+0x24a>
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff fc62 	bl	8001134 <selfrel_offset31>
 8001870:	3404      	adds	r4, #4
 8001872:	4606      	mov	r6, r0
 8001874:	63ac      	str	r4, [r5, #56]	; 0x38
 8001876:	4628      	mov	r0, r5
 8001878:	f3af 8000 	nop.w
 800187c:	2800      	cmp	r0, #0
 800187e:	f43f af1a 	beq.w	80016b6 <__gnu_unwind_pr_common+0xce>
 8001882:	4648      	mov	r0, r9
 8001884:	4632      	mov	r2, r6
 8001886:	210f      	movs	r1, #15
 8001888:	f7ff fe66 	bl	8001558 <_Unwind_SetGR>
 800188c:	2007      	movs	r0, #7
 800188e:	e713      	b.n	80016b8 <__gnu_unwind_pr_common+0xd0>
 8001890:	4608      	mov	r0, r1
 8001892:	3001      	adds	r0, #1
 8001894:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001898:	f7ff fc4c 	bl	8001134 <selfrel_offset31>
 800189c:	210f      	movs	r1, #15
 800189e:	4602      	mov	r2, r0
 80018a0:	4648      	mov	r0, r9
 80018a2:	f7ff fe59 	bl	8001558 <_Unwind_SetGR>
 80018a6:	4648      	mov	r0, r9
 80018a8:	462a      	mov	r2, r5
 80018aa:	4639      	mov	r1, r7
 80018ac:	f7ff fe54 	bl	8001558 <_Unwind_SetGR>
 80018b0:	2007      	movs	r0, #7
 80018b2:	e701      	b.n	80016b8 <__gnu_unwind_pr_common+0xd0>
 80018b4:	00000000 	.word	0x00000000

080018b8 <__aeabi_unwind_cpp_pr0>:
 80018b8:	2300      	movs	r3, #0
 80018ba:	e695      	b.n	80015e8 <__gnu_unwind_pr_common>

080018bc <__aeabi_unwind_cpp_pr1>:
 80018bc:	2301      	movs	r3, #1
 80018be:	e693      	b.n	80015e8 <__gnu_unwind_pr_common>

080018c0 <__aeabi_unwind_cpp_pr2>:
 80018c0:	2302      	movs	r3, #2
 80018c2:	e691      	b.n	80015e8 <__gnu_unwind_pr_common>

080018c4 <_Unwind_VRS_Pop>:
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	4604      	mov	r4, r0
 80018c8:	b0c5      	sub	sp, #276	; 0x114
 80018ca:	2904      	cmp	r1, #4
 80018cc:	d80d      	bhi.n	80018ea <_Unwind_VRS_Pop+0x26>
 80018ce:	e8df f001 	tbb	[pc, r1]
 80018d2:	0355      	.short	0x0355
 80018d4:	310c      	.short	0x310c
 80018d6:	0f          	.byte	0x0f
 80018d7:	00          	.byte	0x00
 80018d8:	2b01      	cmp	r3, #1
 80018da:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80018de:	b295      	uxth	r5, r2
 80018e0:	d164      	bne.n	80019ac <_Unwind_VRS_Pop+0xe8>
 80018e2:	1972      	adds	r2, r6, r5
 80018e4:	2a10      	cmp	r2, #16
 80018e6:	f240 809d 	bls.w	8001a24 <_Unwind_VRS_Pop+0x160>
 80018ea:	2002      	movs	r0, #2
 80018ec:	b045      	add	sp, #276	; 0x114
 80018ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1fa      	bne.n	80018ea <_Unwind_VRS_Pop+0x26>
 80018f4:	2a10      	cmp	r2, #16
 80018f6:	d8f8      	bhi.n	80018ea <_Unwind_VRS_Pop+0x26>
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	06d8      	lsls	r0, r3, #27
 80018fc:	f100 80c8 	bmi.w	8001a90 <_Unwind_VRS_Pop+0x1cc>
 8001900:	ae22      	add	r6, sp, #136	; 0x88
 8001902:	4630      	mov	r0, r6
 8001904:	9201      	str	r2, [sp, #4]
 8001906:	2501      	movs	r5, #1
 8001908:	f000 f974 	bl	8001bf4 <__gnu_Unwind_Save_WMMXC>
 800190c:	2300      	movs	r3, #0
 800190e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001910:	9a01      	ldr	r2, [sp, #4]
 8001912:	fa05 f103 	lsl.w	r1, r5, r3
 8001916:	4211      	tst	r1, r2
 8001918:	d003      	beq.n	8001922 <_Unwind_VRS_Pop+0x5e>
 800191a:	6801      	ldr	r1, [r0, #0]
 800191c:	3004      	adds	r0, #4
 800191e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8001922:	3301      	adds	r3, #1
 8001924:	2b04      	cmp	r3, #4
 8001926:	d1f4      	bne.n	8001912 <_Unwind_VRS_Pop+0x4e>
 8001928:	63a0      	str	r0, [r4, #56]	; 0x38
 800192a:	4630      	mov	r0, r6
 800192c:	f000 f958 	bl	8001be0 <__gnu_Unwind_Restore_WMMXC>
 8001930:	2000      	movs	r0, #0
 8001932:	e7db      	b.n	80018ec <_Unwind_VRS_Pop+0x28>
 8001934:	2b03      	cmp	r3, #3
 8001936:	d1d8      	bne.n	80018ea <_Unwind_VRS_Pop+0x26>
 8001938:	0c15      	lsrs	r5, r2, #16
 800193a:	b297      	uxth	r7, r2
 800193c:	19eb      	adds	r3, r5, r7
 800193e:	2b10      	cmp	r3, #16
 8001940:	d8d3      	bhi.n	80018ea <_Unwind_VRS_Pop+0x26>
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	071e      	lsls	r6, r3, #28
 8001946:	f100 80b7 	bmi.w	8001ab8 <_Unwind_VRS_Pop+0x1f4>
 800194a:	ae22      	add	r6, sp, #136	; 0x88
 800194c:	4630      	mov	r0, r6
 800194e:	f000 f925 	bl	8001b9c <__gnu_Unwind_Save_WMMXD>
 8001952:	00ed      	lsls	r5, r5, #3
 8001954:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001956:	b15f      	cbz	r7, 8001970 <_Unwind_VRS_Pop+0xac>
 8001958:	3d04      	subs	r5, #4
 800195a:	4603      	mov	r3, r0
 800195c:	1971      	adds	r1, r6, r5
 800195e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8001962:	f853 2b04 	ldr.w	r2, [r3], #4
 8001966:	4283      	cmp	r3, r0
 8001968:	f841 2f04 	str.w	r2, [r1, #4]!
 800196c:	d1f9      	bne.n	8001962 <_Unwind_VRS_Pop+0x9e>
 800196e:	4618      	mov	r0, r3
 8001970:	63a0      	str	r0, [r4, #56]	; 0x38
 8001972:	4630      	mov	r0, r6
 8001974:	f000 f8f0 	bl	8001b58 <__gnu_Unwind_Restore_WMMXD>
 8001978:	2000      	movs	r0, #0
 800197a:	e7b7      	b.n	80018ec <_Unwind_VRS_Pop+0x28>
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1b4      	bne.n	80018ea <_Unwind_VRS_Pop+0x26>
 8001980:	2701      	movs	r7, #1
 8001982:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001984:	b296      	uxth	r6, r2
 8001986:	1d20      	adds	r0, r4, #4
 8001988:	fa07 f103 	lsl.w	r1, r7, r3
 800198c:	4231      	tst	r1, r6
 800198e:	f103 0301 	add.w	r3, r3, #1
 8001992:	d002      	beq.n	800199a <_Unwind_VRS_Pop+0xd6>
 8001994:	6829      	ldr	r1, [r5, #0]
 8001996:	3504      	adds	r5, #4
 8001998:	6001      	str	r1, [r0, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	f100 0004 	add.w	r0, r0, #4
 80019a0:	d1f2      	bne.n	8001988 <_Unwind_VRS_Pop+0xc4>
 80019a2:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80019a6:	d13b      	bne.n	8001a20 <_Unwind_VRS_Pop+0x15c>
 80019a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80019aa:	e79f      	b.n	80018ec <_Unwind_VRS_Pop+0x28>
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d19c      	bne.n	80018ea <_Unwind_VRS_Pop+0x26>
 80019b0:	1977      	adds	r7, r6, r5
 80019b2:	2f20      	cmp	r7, #32
 80019b4:	d899      	bhi.n	80018ea <_Unwind_VRS_Pop+0x26>
 80019b6:	2e0f      	cmp	r6, #15
 80019b8:	d966      	bls.n	8001a88 <_Unwind_VRS_Pop+0x1c4>
 80019ba:	462f      	mov	r7, r5
 80019bc:	2d00      	cmp	r5, #0
 80019be:	d13a      	bne.n	8001a36 <_Unwind_VRS_Pop+0x172>
 80019c0:	462a      	mov	r2, r5
 80019c2:	2700      	movs	r7, #0
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019c8:	dd72      	ble.n	8001ab0 <_Unwind_VRS_Pop+0x1ec>
 80019ca:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80019ce:	4601      	mov	r1, r0
 80019d0:	a844      	add	r0, sp, #272	; 0x110
 80019d2:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80019d6:	388c      	subs	r0, #140	; 0x8c
 80019d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80019dc:	4291      	cmp	r1, r2
 80019de:	f840 5f04 	str.w	r5, [r0, #4]!
 80019e2:	d1f9      	bne.n	80019d8 <_Unwind_VRS_Pop+0x114>
 80019e4:	4608      	mov	r0, r1
 80019e6:	b197      	cbz	r7, 8001a0e <_Unwind_VRS_Pop+0x14a>
 80019e8:	2e10      	cmp	r6, #16
 80019ea:	4632      	mov	r2, r6
 80019ec:	bf38      	it	cc
 80019ee:	2210      	movcc	r2, #16
 80019f0:	a944      	add	r1, sp, #272	; 0x110
 80019f2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80019f6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80019fa:	0079      	lsls	r1, r7, #1
 80019fc:	3a04      	subs	r2, #4
 80019fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001a02:	f850 5b04 	ldr.w	r5, [r0], #4
 8001a06:	4288      	cmp	r0, r1
 8001a08:	f842 5f04 	str.w	r5, [r2, #4]!
 8001a0c:	d1f9      	bne.n	8001a02 <_Unwind_VRS_Pop+0x13e>
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d048      	beq.n	8001aa4 <_Unwind_VRS_Pop+0x1e0>
 8001a12:	2e0f      	cmp	r6, #15
 8001a14:	63a1      	str	r1, [r4, #56]	; 0x38
 8001a16:	d933      	bls.n	8001a80 <_Unwind_VRS_Pop+0x1bc>
 8001a18:	b117      	cbz	r7, 8001a20 <_Unwind_VRS_Pop+0x15c>
 8001a1a:	a802      	add	r0, sp, #8
 8001a1c:	f000 f894 	bl	8001b48 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001a20:	2000      	movs	r0, #0
 8001a22:	e763      	b.n	80018ec <_Unwind_VRS_Pop+0x28>
 8001a24:	2e0f      	cmp	r6, #15
 8001a26:	f63f af60 	bhi.w	80018ea <_Unwind_VRS_Pop+0x26>
 8001a2a:	2700      	movs	r7, #0
 8001a2c:	6822      	ldr	r2, [r4, #0]
 8001a2e:	07d1      	lsls	r1, r2, #31
 8001a30:	d417      	bmi.n	8001a62 <_Unwind_VRS_Pop+0x19e>
 8001a32:	2f00      	cmp	r7, #0
 8001a34:	d060      	beq.n	8001af8 <_Unwind_VRS_Pop+0x234>
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	0751      	lsls	r1, r2, #29
 8001a3a:	d445      	bmi.n	8001ac8 <_Unwind_VRS_Pop+0x204>
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d04d      	beq.n	8001adc <_Unwind_VRS_Pop+0x218>
 8001a40:	2e0f      	cmp	r6, #15
 8001a42:	d806      	bhi.n	8001a52 <_Unwind_VRS_Pop+0x18e>
 8001a44:	a822      	add	r0, sp, #136	; 0x88
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	f000 f87a 	bl	8001b40 <__gnu_Unwind_Save_VFP_D>
 8001a4c:	9b01      	ldr	r3, [sp, #4]
 8001a4e:	2f00      	cmp	r7, #0
 8001a50:	d0b6      	beq.n	80019c0 <_Unwind_VRS_Pop+0xfc>
 8001a52:	a802      	add	r0, sp, #8
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	f000 f87b 	bl	8001b50 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	f1c6 0210 	rsb	r2, r6, #16
 8001a60:	e7b0      	b.n	80019c4 <_Unwind_VRS_Pop+0x100>
 8001a62:	f022 0101 	bic.w	r1, r2, #1
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	6021      	str	r1, [r4, #0]
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	d03b      	beq.n	8001ae8 <_Unwind_VRS_Pop+0x224>
 8001a70:	f022 0203 	bic.w	r2, r2, #3
 8001a74:	f840 2b48 	str.w	r2, [r0], #72
 8001a78:	f000 f85a 	bl	8001b30 <__gnu_Unwind_Save_VFP>
 8001a7c:	9b01      	ldr	r3, [sp, #4]
 8001a7e:	e7d8      	b.n	8001a32 <_Unwind_VRS_Pop+0x16e>
 8001a80:	a822      	add	r0, sp, #136	; 0x88
 8001a82:	f000 f859 	bl	8001b38 <__gnu_Unwind_Restore_VFP_D>
 8001a86:	e7c7      	b.n	8001a18 <_Unwind_VRS_Pop+0x154>
 8001a88:	2f10      	cmp	r7, #16
 8001a8a:	d9ce      	bls.n	8001a2a <_Unwind_VRS_Pop+0x166>
 8001a8c:	3f10      	subs	r7, #16
 8001a8e:	e7cd      	b.n	8001a2c <_Unwind_VRS_Pop+0x168>
 8001a90:	f023 0310 	bic.w	r3, r3, #16
 8001a94:	6023      	str	r3, [r4, #0]
 8001a96:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001a9a:	9201      	str	r2, [sp, #4]
 8001a9c:	f000 f8aa 	bl	8001bf4 <__gnu_Unwind_Save_WMMXC>
 8001aa0:	9a01      	ldr	r2, [sp, #4]
 8001aa2:	e72d      	b.n	8001900 <_Unwind_VRS_Pop+0x3c>
 8001aa4:	3104      	adds	r1, #4
 8001aa6:	63a1      	str	r1, [r4, #56]	; 0x38
 8001aa8:	a822      	add	r0, sp, #136	; 0x88
 8001aaa:	f000 f83d 	bl	8001b28 <__gnu_Unwind_Restore_VFP>
 8001aae:	e7b7      	b.n	8001a20 <_Unwind_VRS_Pop+0x15c>
 8001ab0:	2f00      	cmp	r7, #0
 8001ab2:	d199      	bne.n	80019e8 <_Unwind_VRS_Pop+0x124>
 8001ab4:	4601      	mov	r1, r0
 8001ab6:	e7aa      	b.n	8001a0e <_Unwind_VRS_Pop+0x14a>
 8001ab8:	f023 0308 	bic.w	r3, r3, #8
 8001abc:	6023      	str	r3, [r4, #0]
 8001abe:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001ac2:	f000 f86b 	bl	8001b9c <__gnu_Unwind_Save_WMMXD>
 8001ac6:	e740      	b.n	800194a <_Unwind_VRS_Pop+0x86>
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	f840 2bd0 	str.w	r2, [r0], #208
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	f000 f83c 	bl	8001b50 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	e7af      	b.n	8001a3c <_Unwind_VRS_Pop+0x178>
 8001adc:	a822      	add	r0, sp, #136	; 0x88
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	f000 f826 	bl	8001b30 <__gnu_Unwind_Save_VFP>
 8001ae4:	9b01      	ldr	r3, [sp, #4]
 8001ae6:	e7b9      	b.n	8001a5c <_Unwind_VRS_Pop+0x198>
 8001ae8:	f041 0102 	orr.w	r1, r1, #2
 8001aec:	f840 1b48 	str.w	r1, [r0], #72
 8001af0:	f000 f826 	bl	8001b40 <__gnu_Unwind_Save_VFP_D>
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	e79c      	b.n	8001a32 <_Unwind_VRS_Pop+0x16e>
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d003      	beq.n	8001b04 <_Unwind_VRS_Pop+0x240>
 8001afc:	2e0f      	cmp	r6, #15
 8001afe:	f63f af5f 	bhi.w	80019c0 <_Unwind_VRS_Pop+0xfc>
 8001b02:	e79f      	b.n	8001a44 <_Unwind_VRS_Pop+0x180>
 8001b04:	a822      	add	r0, sp, #136	; 0x88
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	f000 f812 	bl	8001b30 <__gnu_Unwind_Save_VFP>
 8001b0c:	9b01      	ldr	r3, [sp, #4]
 8001b0e:	e757      	b.n	80019c0 <_Unwind_VRS_Pop+0xfc>

08001b10 <__restore_core_regs>:
 8001b10:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001b14:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001b18:	469c      	mov	ip, r3
 8001b1a:	46a6      	mov	lr, r4
 8001b1c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001b20:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001b24:	46e5      	mov	sp, ip
 8001b26:	bd00      	pop	{pc}

08001b28 <__gnu_Unwind_Restore_VFP>:
 8001b28:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <__gnu_Unwind_Save_VFP>:
 8001b30:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <__gnu_Unwind_Restore_VFP_D>:
 8001b38:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop

08001b40 <__gnu_Unwind_Save_VFP_D>:
 8001b40:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop

08001b48 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001b48:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001b50:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop

08001b58 <__gnu_Unwind_Restore_WMMXD>:
 8001b58:	ecf0 0102 	ldfe	f0, [r0], #8
 8001b5c:	ecf0 1102 	ldfe	f1, [r0], #8
 8001b60:	ecf0 2102 	ldfe	f2, [r0], #8
 8001b64:	ecf0 3102 	ldfe	f3, [r0], #8
 8001b68:	ecf0 4102 	ldfe	f4, [r0], #8
 8001b6c:	ecf0 5102 	ldfe	f5, [r0], #8
 8001b70:	ecf0 6102 	ldfe	f6, [r0], #8
 8001b74:	ecf0 7102 	ldfe	f7, [r0], #8
 8001b78:	ecf0 8102 	ldfp	f0, [r0], #8
 8001b7c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001b80:	ecf0 a102 	ldfp	f2, [r0], #8
 8001b84:	ecf0 b102 	ldfp	f3, [r0], #8
 8001b88:	ecf0 c102 	ldfp	f4, [r0], #8
 8001b8c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001b90:	ecf0 e102 	ldfp	f6, [r0], #8
 8001b94:	ecf0 f102 	ldfp	f7, [r0], #8
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop

08001b9c <__gnu_Unwind_Save_WMMXD>:
 8001b9c:	ece0 0102 	stfe	f0, [r0], #8
 8001ba0:	ece0 1102 	stfe	f1, [r0], #8
 8001ba4:	ece0 2102 	stfe	f2, [r0], #8
 8001ba8:	ece0 3102 	stfe	f3, [r0], #8
 8001bac:	ece0 4102 	stfe	f4, [r0], #8
 8001bb0:	ece0 5102 	stfe	f5, [r0], #8
 8001bb4:	ece0 6102 	stfe	f6, [r0], #8
 8001bb8:	ece0 7102 	stfe	f7, [r0], #8
 8001bbc:	ece0 8102 	stfp	f0, [r0], #8
 8001bc0:	ece0 9102 	stfp	f1, [r0], #8
 8001bc4:	ece0 a102 	stfp	f2, [r0], #8
 8001bc8:	ece0 b102 	stfp	f3, [r0], #8
 8001bcc:	ece0 c102 	stfp	f4, [r0], #8
 8001bd0:	ece0 d102 	stfp	f5, [r0], #8
 8001bd4:	ece0 e102 	stfp	f6, [r0], #8
 8001bd8:	ece0 f102 	stfp	f7, [r0], #8
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <__gnu_Unwind_Restore_WMMXC>:
 8001be0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001be4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001be8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001bec:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop

08001bf4 <__gnu_Unwind_Save_WMMXC>:
 8001bf4:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001bf8:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001bfc:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001c00:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop

08001c08 <_Unwind_RaiseException>:
 8001c08:	46ec      	mov	ip, sp
 8001c0a:	b500      	push	{lr}
 8001c0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c1c:	a901      	add	r1, sp, #4
 8001c1e:	f7ff fbed 	bl	80013fc <__gnu_Unwind_RaiseException>
 8001c22:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c26:	b012      	add	sp, #72	; 0x48
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <_Unwind_Resume>:
 8001c2c:	46ec      	mov	ip, sp
 8001c2e:	b500      	push	{lr}
 8001c30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c40:	a901      	add	r1, sp, #4
 8001c42:	f7ff fc15 	bl	8001470 <__gnu_Unwind_Resume>
 8001c46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c4a:	b012      	add	sp, #72	; 0x48
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <_Unwind_Resume_or_Rethrow>:
 8001c50:	46ec      	mov	ip, sp
 8001c52:	b500      	push	{lr}
 8001c54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c64:	a901      	add	r1, sp, #4
 8001c66:	f7ff fc25 	bl	80014b4 <__gnu_Unwind_Resume_or_Rethrow>
 8001c6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c6e:	b012      	add	sp, #72	; 0x48
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop

08001c74 <_Unwind_ForcedUnwind>:
 8001c74:	46ec      	mov	ip, sp
 8001c76:	b500      	push	{lr}
 8001c78:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c88:	ab01      	add	r3, sp, #4
 8001c8a:	f7ff fbe7 	bl	800145c <__gnu_Unwind_ForcedUnwind>
 8001c8e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c92:	b012      	add	sp, #72	; 0x48
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <_Unwind_Backtrace>:
 8001c98:	46ec      	mov	ip, sp
 8001c9a:	b500      	push	{lr}
 8001c9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ca0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001cac:	aa01      	add	r2, sp, #4
 8001cae:	f7ff fc61 	bl	8001574 <__gnu_Unwind_Backtrace>
 8001cb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001cb6:	b012      	add	sp, #72	; 0x48
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <next_unwind_byte>:
 8001cbc:	7a02      	ldrb	r2, [r0, #8]
 8001cbe:	b91a      	cbnz	r2, 8001cc8 <next_unwind_byte+0xc>
 8001cc0:	7a43      	ldrb	r3, [r0, #9]
 8001cc2:	b943      	cbnz	r3, 8001cd6 <next_unwind_byte+0x1a>
 8001cc4:	20b0      	movs	r0, #176	; 0xb0
 8001cc6:	4770      	bx	lr
 8001cc8:	6803      	ldr	r3, [r0, #0]
 8001cca:	3a01      	subs	r2, #1
 8001ccc:	7202      	strb	r2, [r0, #8]
 8001cce:	021a      	lsls	r2, r3, #8
 8001cd0:	6002      	str	r2, [r0, #0]
 8001cd2:	0e18      	lsrs	r0, r3, #24
 8001cd4:	4770      	bx	lr
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	6842      	ldr	r2, [r0, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b410      	push	{r4}
 8001cde:	7243      	strb	r3, [r0, #9]
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	1d14      	adds	r4, r2, #4
 8001ce4:	7201      	strb	r1, [r0, #8]
 8001ce6:	021a      	lsls	r2, r3, #8
 8001ce8:	6044      	str	r4, [r0, #4]
 8001cea:	6002      	str	r2, [r0, #0]
 8001cec:	bc10      	pop	{r4}
 8001cee:	0e18      	lsrs	r0, r3, #24
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop

08001cf4 <_Unwind_GetGR.constprop.0>:
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	b500      	push	{lr}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	aa03      	add	r2, sp, #12
 8001cfc:	9200      	str	r2, [sp, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	220c      	movs	r2, #12
 8001d02:	f7ff fbe9 	bl	80014d8 <_Unwind_VRS_Get>
 8001d06:	9803      	ldr	r0, [sp, #12]
 8001d08:	b005      	add	sp, #20
 8001d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d0e:	bf00      	nop

08001d10 <unwind_UCB_from_context>:
 8001d10:	e7f0      	b.n	8001cf4 <_Unwind_GetGR.constprop.0>
 8001d12:	bf00      	nop

08001d14 <__gnu_unwind_execute>:
 8001d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d18:	4606      	mov	r6, r0
 8001d1a:	460f      	mov	r7, r1
 8001d1c:	f04f 0800 	mov.w	r8, #0
 8001d20:	b085      	sub	sp, #20
 8001d22:	4638      	mov	r0, r7
 8001d24:	f7ff ffca 	bl	8001cbc <next_unwind_byte>
 8001d28:	28b0      	cmp	r0, #176	; 0xb0
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	d023      	beq.n	8001d76 <__gnu_unwind_execute+0x62>
 8001d2e:	0605      	lsls	r5, r0, #24
 8001d30:	d427      	bmi.n	8001d82 <__gnu_unwind_execute+0x6e>
 8001d32:	2300      	movs	r3, #0
 8001d34:	f10d 090c 	add.w	r9, sp, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	0085      	lsls	r5, r0, #2
 8001d3c:	220d      	movs	r2, #13
 8001d3e:	f8cd 9000 	str.w	r9, [sp]
 8001d42:	4630      	mov	r0, r6
 8001d44:	f7ff fbc8 	bl	80014d8 <_Unwind_VRS_Get>
 8001d48:	b2ed      	uxtb	r5, r5
 8001d4a:	9b03      	ldr	r3, [sp, #12]
 8001d4c:	0660      	lsls	r0, r4, #25
 8001d4e:	f105 0504 	add.w	r5, r5, #4
 8001d52:	bf4c      	ite	mi
 8001d54:	1b5d      	submi	r5, r3, r5
 8001d56:	18ed      	addpl	r5, r5, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	220d      	movs	r2, #13
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f8cd 9000 	str.w	r9, [sp]
 8001d62:	4630      	mov	r0, r6
 8001d64:	9503      	str	r5, [sp, #12]
 8001d66:	f7ff fbdd 	bl	8001524 <_Unwind_VRS_Set>
 8001d6a:	4638      	mov	r0, r7
 8001d6c:	f7ff ffa6 	bl	8001cbc <next_unwind_byte>
 8001d70:	28b0      	cmp	r0, #176	; 0xb0
 8001d72:	4604      	mov	r4, r0
 8001d74:	d1db      	bne.n	8001d2e <__gnu_unwind_execute+0x1a>
 8001d76:	f1b8 0f00 	cmp.w	r8, #0
 8001d7a:	f000 8094 	beq.w	8001ea6 <__gnu_unwind_execute+0x192>
 8001d7e:	2000      	movs	r0, #0
 8001d80:	e01c      	b.n	8001dbc <__gnu_unwind_execute+0xa8>
 8001d82:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001d86:	2b80      	cmp	r3, #128	; 0x80
 8001d88:	d05c      	beq.n	8001e44 <__gnu_unwind_execute+0x130>
 8001d8a:	2b90      	cmp	r3, #144	; 0x90
 8001d8c:	d019      	beq.n	8001dc2 <__gnu_unwind_execute+0xae>
 8001d8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d90:	d02c      	beq.n	8001dec <__gnu_unwind_execute+0xd8>
 8001d92:	2bb0      	cmp	r3, #176	; 0xb0
 8001d94:	d03e      	beq.n	8001e14 <__gnu_unwind_execute+0x100>
 8001d96:	2bc0      	cmp	r3, #192	; 0xc0
 8001d98:	d06b      	beq.n	8001e72 <__gnu_unwind_execute+0x15e>
 8001d9a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001d9e:	2bd0      	cmp	r3, #208	; 0xd0
 8001da0:	d10b      	bne.n	8001dba <__gnu_unwind_execute+0xa6>
 8001da2:	f000 0207 	and.w	r2, r0, #7
 8001da6:	3201      	adds	r2, #1
 8001da8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001dac:	2305      	movs	r3, #5
 8001dae:	2101      	movs	r1, #1
 8001db0:	4630      	mov	r0, r6
 8001db2:	f7ff fd87 	bl	80018c4 <_Unwind_VRS_Pop>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d0b3      	beq.n	8001d22 <__gnu_unwind_execute+0xe>
 8001dba:	2009      	movs	r0, #9
 8001dbc:	b005      	add	sp, #20
 8001dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dc2:	f000 030d 	and.w	r3, r0, #13
 8001dc6:	2b0d      	cmp	r3, #13
 8001dc8:	d0f7      	beq.n	8001dba <__gnu_unwind_execute+0xa6>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	ad03      	add	r5, sp, #12
 8001dce:	f000 020f 	and.w	r2, r0, #15
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	9500      	str	r5, [sp, #0]
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff fb7e 	bl	80014d8 <_Unwind_VRS_Get>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9500      	str	r5, [sp, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	220d      	movs	r2, #13
 8001de4:	4630      	mov	r0, r6
 8001de6:	f7ff fb9d 	bl	8001524 <_Unwind_VRS_Set>
 8001dea:	e79a      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001dec:	43c3      	mvns	r3, r0
 8001dee:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	411a      	asrs	r2, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	0701      	lsls	r1, r0, #28
 8001dfc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001e00:	bf48      	it	mi
 8001e02:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001e06:	4619      	mov	r1, r3
 8001e08:	4630      	mov	r0, r6
 8001e0a:	f7ff fd5b 	bl	80018c4 <_Unwind_VRS_Pop>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d1d3      	bne.n	8001dba <__gnu_unwind_execute+0xa6>
 8001e12:	e786      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001e14:	28b1      	cmp	r0, #177	; 0xb1
 8001e16:	d057      	beq.n	8001ec8 <__gnu_unwind_execute+0x1b4>
 8001e18:	28b2      	cmp	r0, #178	; 0xb2
 8001e1a:	d068      	beq.n	8001eee <__gnu_unwind_execute+0x1da>
 8001e1c:	28b3      	cmp	r0, #179	; 0xb3
 8001e1e:	f000 8095 	beq.w	8001f4c <__gnu_unwind_execute+0x238>
 8001e22:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001e26:	2bb4      	cmp	r3, #180	; 0xb4
 8001e28:	d0c7      	beq.n	8001dba <__gnu_unwind_execute+0xa6>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f000 0207 	and.w	r2, r0, #7
 8001e30:	441a      	add	r2, r3
 8001e32:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e36:	4619      	mov	r1, r3
 8001e38:	4630      	mov	r0, r6
 8001e3a:	f7ff fd43 	bl	80018c4 <_Unwind_VRS_Pop>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d1bb      	bne.n	8001dba <__gnu_unwind_execute+0xa6>
 8001e42:	e76e      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001e44:	4638      	mov	r0, r7
 8001e46:	f7ff ff39 	bl	8001cbc <next_unwind_byte>
 8001e4a:	0224      	lsls	r4, r4, #8
 8001e4c:	4304      	orrs	r4, r0
 8001e4e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001e52:	d0b2      	beq.n	8001dba <__gnu_unwind_execute+0xa6>
 8001e54:	2300      	movs	r3, #0
 8001e56:	0124      	lsls	r4, r4, #4
 8001e58:	b2a2      	uxth	r2, r4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f7ff fd31 	bl	80018c4 <_Unwind_VRS_Pop>
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d1a9      	bne.n	8001dba <__gnu_unwind_execute+0xa6>
 8001e66:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001e6a:	bf18      	it	ne
 8001e6c:	f04f 0801 	movne.w	r8, #1
 8001e70:	e757      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001e72:	28c6      	cmp	r0, #198	; 0xc6
 8001e74:	d07d      	beq.n	8001f72 <__gnu_unwind_execute+0x25e>
 8001e76:	28c7      	cmp	r0, #199	; 0xc7
 8001e78:	f000 8086 	beq.w	8001f88 <__gnu_unwind_execute+0x274>
 8001e7c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001e80:	2bc0      	cmp	r3, #192	; 0xc0
 8001e82:	f000 8094 	beq.w	8001fae <__gnu_unwind_execute+0x29a>
 8001e86:	28c8      	cmp	r0, #200	; 0xc8
 8001e88:	f000 809f 	beq.w	8001fca <__gnu_unwind_execute+0x2b6>
 8001e8c:	28c9      	cmp	r0, #201	; 0xc9
 8001e8e:	d194      	bne.n	8001dba <__gnu_unwind_execute+0xa6>
 8001e90:	4638      	mov	r0, r7
 8001e92:	f7ff ff13 	bl	8001cbc <next_unwind_byte>
 8001e96:	0302      	lsls	r2, r0, #12
 8001e98:	f000 000f 	and.w	r0, r0, #15
 8001e9c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	e782      	b.n	8001dac <__gnu_unwind_execute+0x98>
 8001ea6:	ac03      	add	r4, sp, #12
 8001ea8:	4643      	mov	r3, r8
 8001eaa:	220e      	movs	r2, #14
 8001eac:	4641      	mov	r1, r8
 8001eae:	9400      	str	r4, [sp, #0]
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f7ff fb11 	bl	80014d8 <_Unwind_VRS_Get>
 8001eb6:	9400      	str	r4, [sp, #0]
 8001eb8:	4630      	mov	r0, r6
 8001eba:	4643      	mov	r3, r8
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	f7ff fb30 	bl	8001524 <_Unwind_VRS_Set>
 8001ec4:	4640      	mov	r0, r8
 8001ec6:	e779      	b.n	8001dbc <__gnu_unwind_execute+0xa8>
 8001ec8:	4638      	mov	r0, r7
 8001eca:	f7ff fef7 	bl	8001cbc <next_unwind_byte>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	f43f af73 	beq.w	8001dba <__gnu_unwind_execute+0xa6>
 8001ed4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001ed8:	f47f af6f 	bne.w	8001dba <__gnu_unwind_execute+0xa6>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f7ff fcef 	bl	80018c4 <_Unwind_VRS_Pop>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	f47f af67 	bne.w	8001dba <__gnu_unwind_execute+0xa6>
 8001eec:	e719      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f10d 090c 	add.w	r9, sp, #12
 8001ef4:	220d      	movs	r2, #13
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f8cd 9000 	str.w	r9, [sp]
 8001efc:	4630      	mov	r0, r6
 8001efe:	f7ff faeb 	bl	80014d8 <_Unwind_VRS_Get>
 8001f02:	4638      	mov	r0, r7
 8001f04:	f7ff feda 	bl	8001cbc <next_unwind_byte>
 8001f08:	0602      	lsls	r2, r0, #24
 8001f0a:	f04f 0402 	mov.w	r4, #2
 8001f0e:	d50c      	bpl.n	8001f2a <__gnu_unwind_execute+0x216>
 8001f10:	9b03      	ldr	r3, [sp, #12]
 8001f12:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001f16:	40a0      	lsls	r0, r4
 8001f18:	4403      	add	r3, r0
 8001f1a:	4638      	mov	r0, r7
 8001f1c:	9303      	str	r3, [sp, #12]
 8001f1e:	f7ff fecd 	bl	8001cbc <next_unwind_byte>
 8001f22:	0603      	lsls	r3, r0, #24
 8001f24:	f104 0407 	add.w	r4, r4, #7
 8001f28:	d4f2      	bmi.n	8001f10 <__gnu_unwind_execute+0x1fc>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9903      	ldr	r1, [sp, #12]
 8001f2e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001f32:	40a2      	lsls	r2, r4
 8001f34:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001f38:	188c      	adds	r4, r1, r2
 8001f3a:	f8cd 9000 	str.w	r9, [sp]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	220d      	movs	r2, #13
 8001f42:	4630      	mov	r0, r6
 8001f44:	9403      	str	r4, [sp, #12]
 8001f46:	f7ff faed 	bl	8001524 <_Unwind_VRS_Set>
 8001f4a:	e6ea      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001f4c:	4638      	mov	r0, r7
 8001f4e:	f7ff feb5 	bl	8001cbc <next_unwind_byte>
 8001f52:	2301      	movs	r3, #1
 8001f54:	0301      	lsls	r1, r0, #12
 8001f56:	f000 000f 	and.w	r0, r0, #15
 8001f5a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001f5e:	18c2      	adds	r2, r0, r3
 8001f60:	430a      	orrs	r2, r1
 8001f62:	4630      	mov	r0, r6
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7ff fcad 	bl	80018c4 <_Unwind_VRS_Pop>
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	f47f af25 	bne.w	8001dba <__gnu_unwind_execute+0xa6>
 8001f70:	e6d7      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001f72:	4638      	mov	r0, r7
 8001f74:	f7ff fea2 	bl	8001cbc <next_unwind_byte>
 8001f78:	0301      	lsls	r1, r0, #12
 8001f7a:	f000 000f 	and.w	r0, r0, #15
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001f84:	1c42      	adds	r2, r0, #1
 8001f86:	e7eb      	b.n	8001f60 <__gnu_unwind_execute+0x24c>
 8001f88:	4638      	mov	r0, r7
 8001f8a:	f7ff fe97 	bl	8001cbc <next_unwind_byte>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	f43f af13 	beq.w	8001dba <__gnu_unwind_execute+0xa6>
 8001f94:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001f98:	f47f af0f 	bne.w	8001dba <__gnu_unwind_execute+0xa6>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	f7ff fc8f 	bl	80018c4 <_Unwind_VRS_Pop>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	f47f af07 	bne.w	8001dba <__gnu_unwind_execute+0xa6>
 8001fac:	e6b9      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	f000 020f 	and.w	r2, r0, #15
 8001fb4:	3201      	adds	r2, #1
 8001fb6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f7ff fc81 	bl	80018c4 <_Unwind_VRS_Pop>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	f47f aef9 	bne.w	8001dba <__gnu_unwind_execute+0xa6>
 8001fc8:	e6ab      	b.n	8001d22 <__gnu_unwind_execute+0xe>
 8001fca:	4638      	mov	r0, r7
 8001fcc:	f7ff fe76 	bl	8001cbc <next_unwind_byte>
 8001fd0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001fd4:	f000 030f 	and.w	r3, r0, #15
 8001fd8:	3210      	adds	r2, #16
 8001fda:	3301      	adds	r3, #1
 8001fdc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001fe0:	e6e4      	b.n	8001dac <__gnu_unwind_execute+0x98>
 8001fe2:	bf00      	nop

08001fe4 <__gnu_unwind_frame>:
 8001fe4:	b530      	push	{r4, r5, lr}
 8001fe6:	2403      	movs	r4, #3
 8001fe8:	460d      	mov	r5, r1
 8001fea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001fec:	b085      	sub	sp, #20
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	f88d 400c 	strb.w	r4, [sp, #12]
 8001ff4:	79dc      	ldrb	r4, [r3, #7]
 8001ff6:	0212      	lsls	r2, r2, #8
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	a901      	add	r1, sp, #4
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	9201      	str	r2, [sp, #4]
 8002000:	f88d 400d 	strb.w	r4, [sp, #13]
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	f7ff fe85 	bl	8001d14 <__gnu_unwind_execute>
 800200a:	b005      	add	sp, #20
 800200c:	bd30      	pop	{r4, r5, pc}
 800200e:	bf00      	nop

08002010 <_Unwind_GetRegionStart>:
 8002010:	b508      	push	{r3, lr}
 8002012:	f7ff fe7d 	bl	8001d10 <unwind_UCB_from_context>
 8002016:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002018:	bd08      	pop	{r3, pc}
 800201a:	bf00      	nop

0800201c <_Unwind_GetLanguageSpecificData>:
 800201c:	b508      	push	{r3, lr}
 800201e:	f7ff fe77 	bl	8001d10 <unwind_UCB_from_context>
 8002022:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002024:	79c3      	ldrb	r3, [r0, #7]
 8002026:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800202a:	3008      	adds	r0, #8
 800202c:	bd08      	pop	{r3, pc}
 800202e:	bf00      	nop

08002030 <_Unwind_GetTextRelBase>:
 8002030:	b508      	push	{r3, lr}
 8002032:	f004 fc51 	bl	80068d8 <abort>
 8002036:	bf00      	nop

08002038 <_Unwind_GetDataRelBase>:
 8002038:	b508      	push	{r3, lr}
 800203a:	f7ff fff9 	bl	8002030 <_Unwind_GetTextRelBase>
 800203e:	bf00      	nop

08002040 <HAL_TIM_PeriodElapsedCallback>:

#include "CanManager.h"
#include "ModeManager.h"
#include "Joystick.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d102      	bne.n	8002058 <HAL_TIM_PeriodElapsedCallback+0x18>
	  canManager.stopAllMotors();
 8002052:	4811      	ldr	r0, [pc, #68]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002054:	f000 fa2e 	bl	80024b4 <_ZN10CanManager13stopAllMotorsEv>
  }
  if (htim->Instance == TIM3) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d113      	bne.n	800208a <HAL_TIM_PeriodElapsedCallback+0x4a>

	  if (modeManager.isJoystickMode()){
 8002062:	480f      	ldr	r0, [pc, #60]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002064:	f000 ff14 	bl	8002e90 <_ZN11ModeManager14isJoystickModeEv>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_TIM_PeriodElapsedCallback+0x4a>
		  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800207e:	4809      	ldr	r0, [pc, #36]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002080:	f002 fbd8 	bl	8004834 <HAL_GPIO_WritePin>
		joystick.process();
 8002084:	4808      	ldr	r0, [pc, #32]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002086:	f000 fd71 	bl	8002b6c <_ZN8Joystick7processEv>
	  }
  }
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40000800 	.word	0x40000800
 8002098:	20000094 	.word	0x20000094
 800209c:	40000400 	.word	0x40000400
 80020a0:	20000198 	.word	0x20000198
 80020a4:	40011000 	.word	0x40011000
 80020a8:	200000e4 	.word	0x200000e4

080020ac <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback (CAN_HandleTypeDef* hcan ){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
			&canManager.canMsgRx.header,
			canManager.canMsgRx.data );
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 80020ba:	2100      	movs	r1, #0
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f001 ff88 	bl	8003fd2 <HAL_CAN_GetRxMessage>

	canManager.process();
 80020c2:	4803      	ldr	r0, [pc, #12]	; (80020d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80020c4:	f000 f813 	bl	80020ee <_ZN10CanManager7processEv>

}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000094 	.word	0x20000094
 80020d4:	200000c0 	.word	0x200000c0

080020d8 <_ZN10CanManager4initEv>:
#include "CanManager.h"
#include <math.h>

CanManager canManager;

void CanManager::init(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	hal_can_filter_init();
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fa27 	bl	8002534 <_ZN10CanManager19hal_can_filter_initEv>

}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZN10CanManager7processEv>:
void CanManager::process(){
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
	getData_Rx(canMsgRx.header.StdId,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
			canMsgRx.data,
			canMsgRx.header.DLC);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	getData_Rx(canMsgRx.header.StdId,
 8002102:	b2db      	uxtb	r3, r3
			canMsgRx.header.DLC);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f89d 	bl	8002244 <_ZN10CanManager10getData_RxEmPhh>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <_ZN10CanManager20convertStatusData_RxEPh>:
/////////////////////////RX PART///////////////////////////////////////////

void CanManager::convertStatusData_Rx(uint8_t * data){
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]

	uint8_t status = data[STATUS_MODE_BYTE];
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	73fb      	strb	r3, [r7, #15]
	uint8_t permition = data[STATUS_PERMITION_BYTE];
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	785b      	ldrb	r3, [r3, #1]
 8002128:	73bb      	strb	r3, [r7, #14]
	modeManager.statusUpdate(getRCmodeStatus_Rx( status ), getDriveModestatus_Rx( permition ) );
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f814 	bl	800215c <_ZN10CanManager18getRCmodeStatus_RxEh>
 8002134:	4603      	mov	r3, r0
 8002136:	461c      	mov	r4, r3
 8002138:	7bbb      	ldrb	r3, [r7, #14]
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f82c 	bl	800219a <_ZN10CanManager21getDriveModestatus_RxEh>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	4621      	mov	r1, r4
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <_ZN10CanManager20convertStatusData_RxEPh+0x44>)
 800214a:	f000 fe41 	bl	8002dd0 <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE>
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	20000198 	.word	0x20000198

0800215c <_ZN10CanManager18getRCmodeStatus_RxEh>:

ModeManager::RC_MODE CanManager::getRCmodeStatus_Rx(uint8_t status){
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
	if (status == JOYSTICK_MODE_MSG ) 		return ModeManager::MODE_JOYSICK;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <_ZN10CanManager18getRCmodeStatus_RxEh+0x16>
 800216e:	2300      	movs	r3, #0
 8002170:	e00e      	b.n	8002190 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == ACRO_MODE_MSG ) 		return ModeManager::MODE_ACRO;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <_ZN10CanManager18getRCmodeStatus_RxEh+0x20>
 8002178:	2303      	movs	r3, #3
 800217a:	e009      	b.n	8002190 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == SEMI_MODE_MSG ) 		return ModeManager::MODE_SEMI;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d101      	bne.n	8002186 <_ZN10CanManager18getRCmodeStatus_RxEh+0x2a>
 8002182:	2302      	movs	r3, #2
 8002184:	e004      	b.n	8002190 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
	else if(status == AUTONOMOUS_MODE_MSG ) return ModeManager::MODE_AUTONOMOUS;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d101      	bne.n	8002190 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
 800218c:	2301      	movs	r3, #1
 800218e:	e7ff      	b.n	8002190 <_ZN10CanManager18getRCmodeStatus_RxEh+0x34>
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_ZN10CanManager21getDriveModestatus_RxEh>:

ModeManager::DRIVE_MODE CanManager::getDriveModestatus_Rx(uint8_t permition){
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	70fb      	strb	r3, [r7, #3]
	if (permition == ENABLE_DRIVE_MSG  ) 		return ModeManager::ENABLE;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <_ZN10CanManager21getDriveModestatus_RxEh+0x16>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e004      	b.n	80021ba <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
	else if(permition ==  DISABLE_DRIVE_MSG ) 	return ModeManager::DISABLE;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
 80021b6:	2300      	movs	r3, #0
 80021b8:	e7ff      	b.n	80021ba <_ZN10CanManager21getDriveModestatus_RxEh+0x20>
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>:

void CanManager::setVelocity(uint8_t* vel, ModeManager::MSG_ORIGIN origin){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	71fb      	strb	r3, [r7, #7]
	if (modeManager.velocityPermission(origin)) sendMsg(VELOCITY, vel);
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4619      	mov	r1, r3
 80021d6:	480a      	ldr	r0, [pc, #40]	; (8002200 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE+0x3c>)
 80021d8:	f000 fd78 	bl	8002ccc <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d004      	beq.n	80021f6 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE+0x32>
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	2101      	movs	r1, #1
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f867 	bl	80022c4 <_ZN10CanManager7sendMsgENS_9SEND_MODEEPh>

}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000198 	.word	0x20000198

08002204 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>:
void CanManager::setTurn(uint8_t* turn, ModeManager::MSG_ORIGIN origin){
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	71fb      	strb	r3, [r7, #7]
	if (modeManager.turnPermission(origin)) sendMsg(TURN,turn);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	4619      	mov	r1, r3
 8002216:	480a      	ldr	r0, [pc, #40]	; (8002240 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE+0x3c>)
 8002218:	f000 fd99 	bl	8002d4e <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf14      	ite	ne
 8002222:	2301      	movne	r3, #1
 8002224:	2300      	moveq	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE+0x32>
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	2100      	movs	r1, #0
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f847 	bl	80022c4 <_ZN10CanManager7sendMsgENS_9SEND_MODEEPh>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000198 	.word	0x20000198

08002244 <_ZN10CanManager10getData_RxEmPhh>:

void CanManager::getData_Rx(uint32_t frame_id, uint8_t* data, uint8_t dlc){
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	70fb      	strb	r3, [r7, #3]
	if (frame_id == STATUS_FRAME_ID) convertStatusData_Rx( data); // function also update status in modemanager
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f240 225d 	movw	r2, #605	; 0x25d
 8002258:	4293      	cmp	r3, r2
 800225a:	d104      	bne.n	8002266 <_ZN10CanManager10getData_RxEmPhh+0x22>
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff ff58 	bl	8002114 <_ZN10CanManager20convertStatusData_RxEPh>
	else if ( frame_id == VELOCITY_FRAME_ID ) 		setVelocity( data , ModeManager::RC );
	else if ( frame_id == I3_VELOCITY_FRAME_ID )	setVelocity( data ,ModeManager::I3  );
	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, ModeManager::RC  );
	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, ModeManager::I3  );
}
 8002264:	e02a      	b.n	80022bc <_ZN10CanManager10getData_RxEmPhh+0x78>
	else if ( frame_id == VELOCITY_FRAME_ID ) 		setVelocity( data , ModeManager::RC );
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f240 223e 	movw	r2, #574	; 0x23e
 800226c:	4293      	cmp	r3, r2
 800226e:	d105      	bne.n	800227c <_ZN10CanManager10getData_RxEmPhh+0x38>
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff ffa5 	bl	80021c4 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>
}
 800227a:	e01f      	b.n	80022bc <_ZN10CanManager10getData_RxEmPhh+0x78>
	else if ( frame_id == I3_VELOCITY_FRAME_ID )	setVelocity( data ,ModeManager::I3  );
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f240 226d 	movw	r2, #621	; 0x26d
 8002282:	4293      	cmp	r3, r2
 8002284:	d105      	bne.n	8002292 <_ZN10CanManager10getData_RxEmPhh+0x4e>
 8002286:	2201      	movs	r2, #1
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7ff ff9a 	bl	80021c4 <_ZN10CanManager11setVelocityEPhN11ModeManager10MSG_ORIGINE>
}
 8002290:	e014      	b.n	80022bc <_ZN10CanManager10getData_RxEmPhh+0x78>
	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, ModeManager::RC  );
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f240 224d 	movw	r2, #589	; 0x24d
 8002298:	4293      	cmp	r3, r2
 800229a:	d105      	bne.n	80022a8 <_ZN10CanManager10getData_RxEmPhh+0x64>
 800229c:	2200      	movs	r2, #0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff ffaf 	bl	8002204 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>
}
 80022a6:	e009      	b.n	80022bc <_ZN10CanManager10getData_RxEmPhh+0x78>
	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, ModeManager::I3  );
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f240 227d 	movw	r2, #637	; 0x27d
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d104      	bne.n	80022bc <_ZN10CanManager10getData_RxEmPhh+0x78>
 80022b2:	2201      	movs	r2, #1
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7ff ffa4 	bl	8002204 <_ZN10CanManager7setTurnEPhN11ModeManager10MSG_ORIGINE>
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN10CanManager7sendMsgENS_9SEND_MODEEPh>:

/////////////////////////TX PART///////////////////////////////////////////

void CanManager::sendMsg(SEND_MODE mode, uint8_t * msgData){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	460b      	mov	r3, r1
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	72fb      	strb	r3, [r7, #11]
	if (mode == TURN && sizeof(msgData)==STEERING_FRAME_LENGTH ){
 80022d2:	7afb      	ldrb	r3, [r7, #11]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <_ZN10CanManager7sendMsgENS_9SEND_MODEEPh+0x24>
		hal_can_send( STEERING_VELOCITY_FRAME_ID, STEERING_FRAME_LENGTH , msgData);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2204      	movs	r2, #4
 80022dc:	f240 211d 	movw	r1, #541	; 0x21d
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f8fd 	bl	80024e0 <_ZN10CanManager12hal_can_sendEthPh>
	}
	else if (mode == VELOCITY && sizeof(msgData)==STEERING_FRAME_LENGTH){
		hal_can_send( STEERING_TURN_FRAME_ID,  STEERING_FRAME_LENGTH , msgData);
	}
}
 80022e6:	e009      	b.n	80022fc <_ZN10CanManager7sendMsgENS_9SEND_MODEEPh+0x38>
	else if (mode == VELOCITY && sizeof(msgData)==STEERING_FRAME_LENGTH){
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d106      	bne.n	80022fc <_ZN10CanManager7sendMsgENS_9SEND_MODEEPh+0x38>
		hal_can_send( STEERING_TURN_FRAME_ID,  STEERING_FRAME_LENGTH , msgData);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	f240 212d 	movw	r1, #557	; 0x22d
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f8f2 	bl	80024e0 <_ZN10CanManager12hal_can_sendEthPh>
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_ZN10CanManager21convertFloatToUint16tEf>:

uint16_t CanManager::convertFloatToUint16t(float value){
 8002304:	b5b0      	push	{r4, r5, r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
	float range = 128;
 800230e:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 8002312:	60fb      	str	r3, [r7, #12]
	if( value > range){
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f7fe fee2 	bl	80010e0 <__aeabi_fcmpgt>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <_ZN10CanManager21convertFloatToUint16tEf+0x2a>
		return range;
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7fe fee6 	bl	80010f4 <__aeabi_f2uiz>
 8002328:	4603      	mov	r3, r0
 800232a:	b29b      	uxth	r3, r3
 800232c:	e023      	b.n	8002376 <_ZN10CanManager21convertFloatToUint16tEf+0x72>
	}
	return(uint16_t)(value * pow(2, 16) /range);
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	f7fe f8e8 	bl	8000504 <__aeabi_f2d>
 8002334:	4604      	mov	r4, r0
 8002336:	460d      	mov	r5, r1
 8002338:	2110      	movs	r1, #16
 800233a:	2002      	movs	r0, #2
 800233c:	f000 f94f 	bl	80025de <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4620      	mov	r0, r4
 8002346:	4629      	mov	r1, r5
 8002348:	f7fe f930 	bl	80005ac <__aeabi_dmul>
 800234c:	4603      	mov	r3, r0
 800234e:	460c      	mov	r4, r1
 8002350:	4625      	mov	r5, r4
 8002352:	461c      	mov	r4, r3
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7fe f8d5 	bl	8000504 <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fe fa4d 	bl	8000800 <__aeabi_ddiv>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	4618      	mov	r0, r3
 800236c:	4621      	mov	r1, r4
 800236e:	f7fe fbcd 	bl	8000b0c <__aeabi_d2uiz>
 8002372:	4603      	mov	r3, r0
 8002374:	b29b      	uxth	r3, r3
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bdb0      	pop	{r4, r5, r7, pc}

0800237e <_ZN10CanManager17convertToFrame_TxEhtNS_9SEND_MODEE>:

uint8_t * CanManager::convertToFrame_Tx(uint8_t sign, uint16_t value, SEND_MODE mode){
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	4608      	mov	r0, r1
 8002388:	4611      	mov	r1, r2
 800238a:	461a      	mov	r2, r3
 800238c:	4603      	mov	r3, r0
 800238e:	70fb      	strb	r3, [r7, #3]
 8002390:	460b      	mov	r3, r1
 8002392:	803b      	strh	r3, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	70bb      	strb	r3, [r7, #2]
	if (mode == VELOCITY || mode == TURN ){
 8002398:	78bb      	ldrb	r3, [r7, #2]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d002      	beq.n	80023a4 <_ZN10CanManager17convertToFrame_TxEhtNS_9SEND_MODEE+0x26>
 800239e:	78bb      	ldrb	r3, [r7, #2]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d115      	bne.n	80023d0 <_ZN10CanManager17convertToFrame_TxEhtNS_9SEND_MODEE+0x52>
		uint8_t data_to_encode[]={
				(uint8_t)(sign >> 8),
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	121b      	asrs	r3, r3, #8
				(uint8_t) sign,
				(uint8_t)(value >> 8 ),
				(uint8_t) value,
		};
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	733b      	strb	r3, [r7, #12]
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	737b      	strb	r3, [r7, #13]
				(uint8_t)(value >> 8 ),
 80023b0:	883b      	ldrh	r3, [r7, #0]
 80023b2:	121b      	asrs	r3, r3, #8
		};
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	73bb      	strb	r3, [r7, #14]
 80023b8:	883b      	ldrh	r3, [r7, #0]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	73fb      	strb	r3, [r7, #15]
		return encode_frame_big_endian(data_to_encode,STEERING_FRAME_LENGTH);
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	2204      	movs	r2, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f807 	bl	80023da <_ZN10CanManager23encode_frame_big_endianEPhh>
 80023cc:	4603      	mov	r3, r0
 80023ce:	e000      	b.n	80023d2 <_ZN10CanManager17convertToFrame_TxEhtNS_9SEND_MODEE+0x54>
	}else{return 0;}
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <_ZN10CanManager23encode_frame_big_endianEPhh>:

uint8_t* CanManager::encode_frame_big_endian(uint8_t* data , uint8_t data_length){
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	4613      	mov	r3, r2
 80023e6:	71fb      	strb	r3, [r7, #7]
	 uint8_t* encoded_data = (uint8_t*)calloc(data_length, sizeof(uint8_t));
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f004 f959 	bl	80066a4 <calloc>
 80023f2:	4603      	mov	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]
	for( uint8_t i = 1 ; i <= data_length  ;i++){
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
 80023fa:	7dfa      	ldrb	r2, [r7, #23]
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dc0e      	bgt.n	8002420 <_ZN10CanManager23encode_frame_big_endianEPhh+0x46>
		encoded_data[i] = data[data_length-i];
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	79f9      	ldrb	r1, [r7, #7]
 800240a:	7dfa      	ldrb	r2, [r7, #23]
 800240c:	1a8a      	subs	r2, r1, r2
 800240e:	4611      	mov	r1, r2
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	440a      	add	r2, r1
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	701a      	strb	r2, [r3, #0]
	for( uint8_t i = 1 ; i <= data_length  ;i++){
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	3301      	adds	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
 800241e:	e7ec      	b.n	80023fa <_ZN10CanManager23encode_frame_big_endianEPhh+0x20>
	}
	return encoded_data;
 8002420:	693b      	ldr	r3, [r7, #16]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_ZN10CanManager26convertVelocityTurnData_TxEfhNS_9SEND_MODEE>:
void CanManager::convertVelocityTurnData_Tx(float value, uint8_t sign, SEND_MODE mode){
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	4611      	mov	r1, r2
 8002436:	461a      	mov	r2, r3
 8002438:	460b      	mov	r3, r1
 800243a:	71fb      	strb	r3, [r7, #7]
 800243c:	4613      	mov	r3, r2
 800243e:	71bb      	strb	r3, [r7, #6]
	uint16_t convertedData = convertFloatToUint16t(value);
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff ff5e 	bl	8002304 <_ZN10CanManager21convertFloatToUint16tEf>
 8002448:	4603      	mov	r3, r0
 800244a:	82fb      	strh	r3, [r7, #22]
	uint8_t * frameData = convertToFrame_Tx(sign, convertedData , mode);
 800244c:	79bb      	ldrb	r3, [r7, #6]
 800244e:	8afa      	ldrh	r2, [r7, #22]
 8002450:	79f9      	ldrb	r1, [r7, #7]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7ff ff93 	bl	800237e <_ZN10CanManager17convertToFrame_TxEhtNS_9SEND_MODEE>
 8002458:	4603      	mov	r3, r0
 800245a:	613b      	str	r3, [r7, #16]
	sendMsg(mode, frameData );
 800245c:	79bb      	ldrb	r3, [r7, #6]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4619      	mov	r1, r3
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7ff ff2e 	bl	80022c4 <_ZN10CanManager7sendMsgENS_9SEND_MODEEPh>
}
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZN10CanManager12sendVelocityEfh>:
void CanManager::sendVelocity(float vel, uint8_t sign){
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	71fb      	strb	r3, [r7, #7]
	convertVelocityTurnData_Tx(vel, sign, VELOCITY);
 800247e:	79fa      	ldrb	r2, [r7, #7]
 8002480:	2301      	movs	r3, #1
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff ffd0 	bl	800242a <_ZN10CanManager26convertVelocityTurnData_TxEfhNS_9SEND_MODEE>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_ZN10CanManager8sendTurnEfh>:
void CanManager::sendTurn(float turn, uint8_t sign){
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	4613      	mov	r3, r2
 800249e:	71fb      	strb	r3, [r7, #7]
	convertVelocityTurnData_Tx(turn, sign, TURN);
 80024a0:	79fa      	ldrb	r2, [r7, #7]
 80024a2:	2300      	movs	r3, #0
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff ffbf 	bl	800242a <_ZN10CanManager26convertVelocityTurnData_TxEfhNS_9SEND_MODEE>
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_ZN10CanManager13stopAllMotorsEv>:

void CanManager::stopAllMotors(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	convertVelocityTurnData_Tx(0.f, 0,VELOCITY);
 80024bc:	2301      	movs	r3, #1
 80024be:	2200      	movs	r2, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ffb0 	bl	800242a <_ZN10CanManager26convertVelocityTurnData_TxEfhNS_9SEND_MODEE>
	convertVelocityTurnData_Tx(0.f, 0,TURN);
 80024ca:	2300      	movs	r3, #0
 80024cc:	2200      	movs	r2, #0
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ffa9 	bl	800242a <_ZN10CanManager26convertVelocityTurnData_TxEfhNS_9SEND_MODEE>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_ZN10CanManager12hal_can_sendEthPh>:

void CanManager::hal_can_send(uint16_t frame_id, uint8_t dlc, uint8_t* data){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	817b      	strh	r3, [r7, #10]
 80024ee:	4613      	mov	r3, r2
 80024f0:	727b      	strb	r3, [r7, #9]
	HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f8:	480c      	ldr	r0, [pc, #48]	; (800252c <_ZN10CanManager12hal_can_sendEthPh+0x4c>)
 80024fa:	f002 f99b 	bl	8004834 <HAL_GPIO_WritePin>
	hal_can_messageTx canMsgTx;
	canMsgTx.data = data;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
	canMsgTx.header.DLC = dlc;
 8002502:	7a7b      	ldrb	r3, [r7, #9]
 8002504:	623b      	str	r3, [r7, #32]
	canMsgTx.header.RTR = CAN_RTR_DATA;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
	canMsgTx.header.IDE  = CAN_ID_STD;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
	canMsgTx.header.StdId = frame_id;
 800250e:	897b      	ldrh	r3, [r7, #10]
 8002510:	613b      	str	r3, [r7, #16]

	HAL_CAN_AddTxMessage(&hcan, &(canMsgTx.header),canMsgTx.data,&(canMsgTx.mailbox));
 8002512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	3318      	adds	r3, #24
 800251a:	f107 0110 	add.w	r1, r7, #16
 800251e:	4804      	ldr	r0, [pc, #16]	; (8002530 <_ZN10CanManager12hal_can_sendEthPh+0x50>)
 8002520:	f001 fd09 	bl	8003f36 <HAL_CAN_AddTxMessage>

}
 8002524:	bf00      	nop
 8002526:	3730      	adds	r7, #48	; 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40011000 	.word	0x40011000
 8002530:	20000220 	.word	0x20000220

08002534 <_ZN10CanManager19hal_can_filter_initEv>:

void CanManager::hal_can_filter_init(void){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	hcan_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
	hcan_filter.FilterIdHigh = 0xFFFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002548:	605a      	str	r2, [r3, #4]
	hcan_filter.FilterIdLow = 0x0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
	hcan_filter.FilterIdHigh = 0x0;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	605a      	str	r2, [r3, #4]
	hcan_filter.FilterIdLow = 0x0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	621a      	str	r2, [r3, #32]
	hcan_filter.FilterActivation = ENABLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4803      	ldr	r0, [pc, #12]	; (800257c <_ZN10CanManager19hal_can_filter_initEv+0x48>)
 8002570:	f001 fc75 	bl	8003e5e <HAL_CAN_ConfigFilter>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000220 	.word	0x20000220

08002580 <_ZN10CanManagerC1Ev>:
CanManager::CanManager() {
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <_ZN10CanManagerC1Ev+0x1c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]

}
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	080069a8 	.word	0x080069a8

080025a0 <_ZN10CanManagerD1Ev>:

CanManager::~CanManager() {
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <_ZN10CanManagerD1Ev+0x1c>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	080069a8 	.word	0x080069a8

080025c0 <_ZN10CanManagerD0Ev>:
CanManager::~CanManager() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
}
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ffe9 	bl	80025a0 <_ZN10CanManagerD1Ev>
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f002 ff3d 	bl	800544e <_ZdlPv>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80025de:	b5b0      	push	{r4, r5, r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7fd ff79 	bl	80004e0 <__aeabi_i2d>
 80025ee:	4604      	mov	r4, r0
 80025f0:	460d      	mov	r5, r1
 80025f2:	6838      	ldr	r0, [r7, #0]
 80025f4:	f7fd ff74 	bl	80004e0 <__aeabi_i2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4620      	mov	r0, r4
 80025fe:	4629      	mov	r1, r5
 8002600:	f003 f83c 	bl	800567c <pow>
 8002604:	4603      	mov	r3, r0
 8002606:	460c      	mov	r4, r1
    }
 8002608:	4618      	mov	r0, r3
 800260a:	4621      	mov	r1, r4
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002614 <_Z41__static_initialization_and_destruction_0ii>:
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10c      	bne.n	800263e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262a:	4293      	cmp	r3, r2
 800262c:	d107      	bne.n	800263e <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanManager canManager;
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002630:	f7ff ffa6 	bl	8002580 <_ZN10CanManagerC1Ev>
 8002634:	4a05      	ldr	r2, [pc, #20]	; (800264c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002636:	4906      	ldr	r1, [pc, #24]	; (8002650 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800263a:	f002 ff0a 	bl	8005452 <__aeabi_atexit>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000094 	.word	0x20000094
 800264c:	20000000 	.word	0x20000000
 8002650:	080025a1 	.word	0x080025a1

08002654 <_GLOBAL__sub_I_canManager>:
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
 8002658:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800265c:	2001      	movs	r0, #1
 800265e:	f7ff ffd9 	bl	8002614 <_Z41__static_initialization_and_destruction_0ii>
 8002662:	bd80      	pop	{r7, pc}

08002664 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <_ZN8Joystick4initEv>:

#include "Joystick.h"

Joystick joystick;

void Joystick::init(void){
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(&hadc1);
 8002684:	482f      	ldr	r0, [pc, #188]	; (8002744 <_ZN8Joystick4initEv+0xc8>)
 8002686:	f001 f9d3 	bl	8003a30 <HAL_ADC_Start>
    HAL_ADC_Start_DMA(&hadc1,adc_raw_values,NUMBER_OF_CHANNELS);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	33a4      	adds	r3, #164	; 0xa4
 800268e:	2204      	movs	r2, #4
 8002690:	4619      	mov	r1, r3
 8002692:	482c      	ldr	r0, [pc, #176]	; (8002744 <_ZN8Joystick4initEv+0xc8>)
 8002694:	f001 fa2e 	bl	8003af4 <HAL_ADC_Start_DMA>

	for(uint8_t i = 0; i < axis.size; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	da49      	bge.n	800273c <_ZN8Joystick4initEv+0xc0>
	 joy.measurements[axis.params[i].index].v_max_normalized =
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461c      	mov	r4, r3
			 axis.params[i].v_max -axis.params[i].v_neutral;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	4413      	add	r3, r2
 80026c4:	6858      	ldr	r0, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa3d 	bl	8000b54 <__aeabi_fsub>
 80026da:	4603      	mov	r3, r0
 80026dc:	4619      	mov	r1, r3
	 joy.measurements[axis.params[i].index].v_max_normalized =
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4623      	mov	r3, r4
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	1b1b      	subs	r3, r3, r4
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	330c      	adds	r3, #12
 80026ec:	6019      	str	r1, [r3, #0]
	 joy.measurements[axis.params[i].index].v_min_normalized =
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461c      	mov	r4, r3
			 axis.params[i].v_min -axis.params[i].v_neutral;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	4413      	add	r3, r2
 800270a:	6898      	ldr	r0, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	4413      	add	r3, r2
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa1a 	bl	8000b54 <__aeabi_fsub>
 8002720:	4603      	mov	r3, r0
 8002722:	4619      	mov	r1, r3
	 joy.measurements[axis.params[i].index].v_min_normalized =
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4623      	mov	r3, r4
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	1b1b      	subs	r3, r3, r4
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3310      	adds	r3, #16
 8002732:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0; i < axis.size; i++){
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	3301      	adds	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e7af      	b.n	800269c <_ZN8Joystick4initEv+0x20>
	}
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bd90      	pop	{r4, r7, pc}
 8002744:	200001ac 	.word	0x200001ac

08002748 <_ZN8Joystick12get_adc_dataEPNS_13joystick_dataEPm>:

//joystick* Joystick::get_joy_pointer(void){
//	return &joy;
//}

void Joystick::get_adc_data(joystick_data* joy,uint32_t* data){
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	for(uint8_t i = 0 ; i < NUMBER_OF_CHANNELS; i++){
 8002754:	2300      	movs	r3, #0
 8002756:	75fb      	strb	r3, [r7, #23]
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b03      	cmp	r3, #3
 800275c:	dc10      	bgt.n	8002780 <_ZN8Joystick12get_adc_dataEPNS_13joystick_dataEPm+0x38>
		joy->measurements[i].raw_data = data[i];
 800275e:	7dfa      	ldrb	r2, [r7, #23]
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	440b      	add	r3, r1
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	68b8      	ldr	r0, [r7, #8]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4403      	add	r3, r0
 8002776:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0 ; i < NUMBER_OF_CHANNELS; i++){
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	3301      	adds	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
 800277e:	e7eb      	b.n	8002758 <_ZN8Joystick12get_adc_dataEPNS_13joystick_dataEPm+0x10>
	}
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <_ZN8Joystick20get_hal_adc_raw_dataEv>:

uint32_t* Joystick::get_hal_adc_raw_data(void){
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
	return adc_raw_values;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	33a4      	adds	r3, #164	; 0xa4
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <_ZN8Joystick18convert_adc_valuesEv>:

void Joystick::convert_adc_values(void){
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	get_adc_data(&joy,get_hal_adc_raw_data());
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	1d1c      	adds	r4, r3, #4
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ffec 	bl	800278a <_ZN8Joystick20get_hal_adc_raw_dataEv>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	4621      	mov	r1, r4
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ffc5 	bl	8002748 <_ZN8Joystick12get_adc_dataEPNS_13joystick_dataEPm>
	uint32_t divider = pow(2, joy.bit_resolution);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027c4:	4619      	mov	r1, r3
 80027c6:	2002      	movs	r0, #2
 80027c8:	f000 fa27 	bl	8002c1a <_ZSt3powIihEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027cc:	4603      	mov	r3, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	4618      	mov	r0, r3
 80027d2:	4621      	mov	r1, r4
 80027d4:	f7fe f99a 	bl	8000b0c <__aeabi_d2uiz>
 80027d8:	4603      	mov	r3, r0
 80027da:	60bb      	str	r3, [r7, #8]
	//todo Lukas: add offset
	for(uint8_t i = 0 ; i < NUMBER_OF_CHANNELS;i++){
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	dc41      	bgt.n	800286a <_ZN8Joystick18convert_adc_valuesEv+0xca>
		if(joy.measurements[i].raw_data == NULL){
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3304      	adds	r3, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <_ZN8Joystick18convert_adc_valuesEv+0x72>
			joy.measurements[i].converted_data = -1.0;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3314      	adds	r3, #20
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <_ZN8Joystick18convert_adc_valuesEv+0xd4>)
 800280e:	601a      	str	r2, [r3, #0]
			continue;
 8002810:	e027      	b.n	8002862 <_ZN8Joystick18convert_adc_valuesEv+0xc2>
		}
		joy.measurements[i].converted_data =
 8002812:	7bfc      	ldrb	r4, [r7, #15]
				((float)joy.measurements[i].raw_data
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3304      	adds	r3, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fa46 	bl	8000cb8 <__aeabi_ui2f>
 800282c:	4602      	mov	r2, r0
				* joy.reference_voltage)/(float)divider;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f7fe fa97 	bl	8000d68 <__aeabi_fmul>
 800283a:	4603      	mov	r3, r0
 800283c:	461d      	mov	r5, r3
 800283e:	68b8      	ldr	r0, [r7, #8]
 8002840:	f7fe fa3a 	bl	8000cb8 <__aeabi_ui2f>
 8002844:	4603      	mov	r3, r0
 8002846:	4619      	mov	r1, r3
 8002848:	4628      	mov	r0, r5
 800284a:	f7fe fb41 	bl	8000ed0 <__aeabi_fdiv>
 800284e:	4603      	mov	r3, r0
 8002850:	4619      	mov	r1, r3
		joy.measurements[i].converted_data =
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4623      	mov	r3, r4
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	1b1b      	subs	r3, r3, r4
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	3314      	adds	r3, #20
 8002860:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0 ; i < NUMBER_OF_CHANNELS;i++){
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	3301      	adds	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e7ba      	b.n	80027e0 <_ZN8Joystick18convert_adc_valuesEv+0x40>
	}
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bdb0      	pop	{r4, r5, r7, pc}
 8002872:	bf00      	nop
 8002874:	bf800000 	.word	0xbf800000

08002878 <_ZN8Joystick20is_joy_near_neautralENS_9ax_paramsE>:
uint8_t Joystick::is_joy_near_neautral(ax_params params){
 8002878:	b084      	sub	sp, #16
 800287a:	b590      	push	{r4, r7, lr}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	f107 001c 	add.w	r0, r7, #28
 8002886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	return(joy.measurements[params.index].converted_data > (params.v_neutral - MEASUREMENT_ERROR)
 800288a:	7f3b      	ldrb	r3, [r7, #28]
 800288c:	4619      	mov	r1, r3
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	1a5b      	subs	r3, r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3314      	adds	r3, #20
 800289c:	681c      	ldr	r4, [r3, #0]
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	4916      	ldr	r1, [pc, #88]	; (80028fc <_ZN8Joystick20is_joy_near_neautralENS_9ax_paramsE+0x84>)
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f956 	bl	8000b54 <__aeabi_fsub>
 80028a8:	4603      	mov	r3, r0
			&& joy.measurements[params.index].converted_data < (params.v_neutral + MEASUREMENT_ERROR ));
 80028aa:	4619      	mov	r1, r3
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7fe fc17 	bl	80010e0 <__aeabi_fcmpgt>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d018      	beq.n	80028ea <_ZN8Joystick20is_joy_near_neautralENS_9ax_paramsE+0x72>
 80028b8:	7f3b      	ldrb	r3, [r7, #28]
 80028ba:	4619      	mov	r1, r3
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a5b      	subs	r3, r3, r1
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	3314      	adds	r3, #20
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	490b      	ldr	r1, [pc, #44]	; (80028fc <_ZN8Joystick20is_joy_near_neautralENS_9ax_paramsE+0x84>)
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe f941 	bl	8000b58 <__addsf3>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4619      	mov	r1, r3
 80028da:	4620      	mov	r0, r4
 80028dc:	f7fe fbe2 	bl	80010a4 <__aeabi_fcmplt>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <_ZN8Joystick20is_joy_near_neautralENS_9ax_paramsE+0x72>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <_ZN8Joystick20is_joy_near_neautralENS_9ax_paramsE+0x74>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80028f6:	b004      	add	sp, #16
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	3d75c28f 	.word	0x3d75c28f

08002900 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE>:


void Joystick::calcualate_axis_voltage(ax_params params){
 8002900:	b084      	sub	sp, #16
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b085      	sub	sp, #20
 8002906:	af02      	add	r7, sp, #8
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	f107 001c 	add.w	r0, r7, #28
 800290e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(is_joy_near_neautral(params)){
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffab 	bl	8002878 <_ZN8Joystick20is_joy_near_neautralENS_9ax_paramsE>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d017      	beq.n	8002962 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0x62>
		joy.measurements[params.index].percentage_value = 0.0;
 8002932:	7f3b      	ldrb	r3, [r7, #28]
 8002934:	4619      	mov	r1, r3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	1a5b      	subs	r3, r3, r1
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3318      	adds	r3, #24
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
		joy.measurements[params.index].sign = positive;
 800294a:	7f3b      	ldrb	r3, [r7, #28]
 800294c:	4619      	mov	r1, r3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	1a5b      	subs	r3, r3, r1
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	331c      	adds	r3, #28
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
		return;
 8002960:	e0b7      	b.n	8002ad2 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0x1d2>
	}
	if (joy.measurements[params.index].converted_data >= params.v_max){
 8002962:	7f3b      	ldrb	r3, [r7, #28]
 8002964:	4619      	mov	r1, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a5b      	subs	r3, r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3314      	adds	r3, #20
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a3a      	ldr	r2, [r7, #32]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fba6 	bl	80010cc <__aeabi_fcmpge>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0xb4>
		joy.measurements[params.index].percentage_value = 100.0;
 8002986:	7f3b      	ldrb	r3, [r7, #28]
 8002988:	4619      	mov	r1, r3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a5b      	subs	r3, r3, r1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3318      	adds	r3, #24
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0x1e0>)
 800299a:	601a      	str	r2, [r3, #0]
		joy.measurements[params.index].sign = positive;
 800299c:	7f3b      	ldrb	r3, [r7, #28]
 800299e:	4619      	mov	r1, r3
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a5b      	subs	r3, r3, r1
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	331c      	adds	r3, #28
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
		return;
 80029b2:	e08e      	b.n	8002ad2 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0x1d2>
	}

	if( joy.measurements[params.index].converted_data > params.v_neutral ){
 80029b4:	7f3b      	ldrb	r3, [r7, #28]
 80029b6:	4619      	mov	r1, r3
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	1a5b      	subs	r3, r3, r1
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	3314      	adds	r3, #20
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fb87 	bl	80010e0 <__aeabi_fcmpgt>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d03e      	beq.n	8002a56 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0x156>
		joy.measurements[params.index].percentage_value =
 80029d8:	7f3b      	ldrb	r3, [r7, #28]
 80029da:	461c      	mov	r4, r3
		fabs((joy.measurements[params.index].converted_data -params.v_neutral)
 80029dc:	7f3b      	ldrb	r3, [r7, #28]
 80029de:	4619      	mov	r1, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	1a5b      	subs	r3, r3, r1
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3314      	adds	r3, #20
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe f8ad 	bl	8000b54 <__aeabi_fsub>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4618      	mov	r0, r3
				/ joy.measurements[params.index].v_max_normalized) * 100.0;
 80029fe:	7f3b      	ldrb	r3, [r7, #28]
 8002a00:	4619      	mov	r1, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	1a5b      	subs	r3, r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	330c      	adds	r3, #12
 8002a10:	681b      	ldr	r3, [r3, #0]
		fabs((joy.measurements[params.index].converted_data -params.v_neutral)
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe fa5c 	bl	8000ed0 <__aeabi_fdiv>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fe22 	bl	8002664 <_ZSt4fabsf>
 8002a20:	4603      	mov	r3, r0
				/ joy.measurements[params.index].v_max_normalized) * 100.0;
 8002a22:	492f      	ldr	r1, [pc, #188]	; (8002ae0 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0x1e0>)
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe f99f 	bl	8000d68 <__aeabi_fmul>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4619      	mov	r1, r3
		joy.measurements[params.index].percentage_value =
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4623      	mov	r3, r4
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1b1b      	subs	r3, r3, r4
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	3318      	adds	r3, #24
 8002a3c:	6019      	str	r1, [r3, #0]
		joy.measurements[params.index].sign = positive;
 8002a3e:	7f3b      	ldrb	r3, [r7, #28]
 8002a40:	4619      	mov	r1, r3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	1a5b      	subs	r3, r3, r1
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	331c      	adds	r3, #28
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e03d      	b.n	8002ad2 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0x1d2>
	}
	else{
		joy.measurements[params.index].percentage_value =
 8002a56:	7f3b      	ldrb	r3, [r7, #28]
 8002a58:	461c      	mov	r4, r3
		fabs((joy.measurements[params.index].converted_data -params.v_neutral)
 8002a5a:	7f3b      	ldrb	r3, [r7, #28]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	1a5b      	subs	r3, r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe f86e 	bl	8000b54 <__aeabi_fsub>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4618      	mov	r0, r3
				/ joy.measurements[params.index].v_min_normalized) * 100.0;
 8002a7c:	7f3b      	ldrb	r3, [r7, #28]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	1a5b      	subs	r3, r3, r1
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	681b      	ldr	r3, [r3, #0]
		fabs((joy.measurements[params.index].converted_data -params.v_neutral)
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fe fa1d 	bl	8000ed0 <__aeabi_fdiv>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fde3 	bl	8002664 <_ZSt4fabsf>
 8002a9e:	4603      	mov	r3, r0
				/ joy.measurements[params.index].v_min_normalized) * 100.0;
 8002aa0:	490f      	ldr	r1, [pc, #60]	; (8002ae0 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE+0x1e0>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe f960 	bl	8000d68 <__aeabi_fmul>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4619      	mov	r1, r3
		joy.measurements[params.index].percentage_value =
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4623      	mov	r3, r4
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1b1b      	subs	r3, r3, r4
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3318      	adds	r3, #24
 8002aba:	6019      	str	r1, [r3, #0]
		joy.measurements[params.index].sign = negative;
 8002abc:	7f3b      	ldrb	r3, [r7, #28]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1a5b      	subs	r3, r3, r1
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	331c      	adds	r3, #28
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
	}
}
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002ada:	b004      	add	sp, #16
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	42c80000 	.word	0x42c80000

08002ae4 <_ZN8Joystick18calculate_joy_dataEv>:

///todo Lukas: update tests
void Joystick::calculate_joy_data(void){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0 ; i < axis.size; i++){
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	da0f      	bge.n	8002b1c <_ZN8Joystick18calculate_joy_dataEv+0x38>
		calcualate_axis_voltage(axis.params[i]);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	9200      	str	r2, [sp, #0]
 8002b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fef6 	bl	8002900 <_ZN8Joystick23calcualate_axis_voltageENS_9ax_paramsE>
	for(uint8_t i = 0 ; i < axis.size; i++){
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	3301      	adds	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
 8002b1a:	e7e9      	b.n	8002af0 <_ZN8Joystick18calculate_joy_dataEv+0xc>
	}
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZN8Joystick9sendToCanEv>:
void Joystick::sendToCan(void){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	float vel = joy.measurements[X_AXIS_INDEX].percentage_value;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	617b      	str	r3, [r7, #20]
	float turn = joy.measurements[Y_AXIS_INDEX].percentage_value;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b36:	613b      	str	r3, [r7, #16]
	uint8_t signV = joy.measurements[X_AXIS_INDEX].sign;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b3e:	73fb      	strb	r3, [r7, #15]
	uint8_t signT = joy.measurements[Y_AXIS_INDEX].sign;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b46:	73bb      	strb	r3, [r7, #14]
	canManager.sendTurn(turn, signT);
 8002b48:	7bbb      	ldrb	r3, [r7, #14]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	6939      	ldr	r1, [r7, #16]
 8002b4e:	4806      	ldr	r0, [pc, #24]	; (8002b68 <_ZN8Joystick9sendToCanEv+0x44>)
 8002b50:	f7ff fc9f 	bl	8002492 <_ZN10CanManager8sendTurnEfh>
	canManager.sendVelocity(vel, signV);
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	461a      	mov	r2, r3
 8002b58:	6979      	ldr	r1, [r7, #20]
 8002b5a:	4803      	ldr	r0, [pc, #12]	; (8002b68 <_ZN8Joystick9sendToCanEv+0x44>)
 8002b5c:	f7ff fc88 	bl	8002470 <_ZN10CanManager12sendVelocityEfh>

}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000094 	.word	0x20000094

08002b6c <_ZN8Joystick7processEv>:

void Joystick::process(void){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	convert_adc_values();
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff fe13 	bl	80027a0 <_ZN8Joystick18convert_adc_valuesEv>
	calculate_joy_data();
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffb2 	bl	8002ae4 <_ZN8Joystick18calculate_joy_dataEv>
	sendToCan();
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffcf 	bl	8002b24 <_ZN8Joystick9sendToCanEv>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <_ZN8JoystickC1Ev>:


Joystick::Joystick() {
 8002b90:	b4b0      	push	{r4, r5, r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <_ZN8JoystickC1Ev+0x44>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <_ZN8JoystickC1Ev+0x48>)
 8002ba2:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8002ba6:	4615      	mov	r5, r2
 8002ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

}
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bcb0      	pop	{r4, r5, r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	080069f0 	.word	0x080069f0
 8002bd8:	080069c8 	.word	0x080069c8

08002bdc <_ZN8JoystickD1Ev>:

Joystick::~Joystick() {
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <_ZN8JoystickD1Ev+0x1c>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	080069f0 	.word	0x080069f0

08002bfc <_ZN8JoystickD0Ev>:
Joystick::~Joystick() {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
}
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ffe9 	bl	8002bdc <_ZN8JoystickD1Ev>
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f002 fc1f 	bl	800544e <_ZdlPv>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_ZSt3powIihEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002c1a:	b5b0      	push	{r4, r5, r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
      return pow(__type(__x), __type(__y));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd fc5a 	bl	80004e0 <__aeabi_i2d>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	460d      	mov	r5, r1
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fc44 	bl	80004c0 <__aeabi_ui2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f002 fd1c 	bl	800567c <pow>
 8002c44:	4603      	mov	r3, r0
 8002c46:	460c      	mov	r4, r1
    }
 8002c48:	4618      	mov	r0, r3
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c54 <_Z41__static_initialization_and_destruction_0ii>:
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10c      	bne.n	8002c7e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d107      	bne.n	8002c7e <_Z41__static_initialization_and_destruction_0ii+0x2a>
Joystick joystick;
 8002c6e:	4806      	ldr	r0, [pc, #24]	; (8002c88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002c70:	f7ff ff8e 	bl	8002b90 <_ZN8JoystickC1Ev>
 8002c74:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002c76:	4906      	ldr	r1, [pc, #24]	; (8002c90 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002c78:	4803      	ldr	r0, [pc, #12]	; (8002c88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002c7a:	f002 fbea 	bl	8005452 <__aeabi_atexit>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200000e4 	.word	0x200000e4
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	08002bdd 	.word	0x08002bdd

08002c94 <_GLOBAL__sub_I_joystick>:
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7ff ffd9 	bl	8002c54 <_Z41__static_initialization_and_destruction_0ii>
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_ZN11ModeManager4initEv>:

#include "ModeManager.h"

ModeManager modeManager;

void ModeManager::init(){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	driveMode = ENABLE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	711a      	strb	r2, [r3, #4]
	RCmode = MODE_JOYSICK;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	715a      	strb	r2, [r3, #5]
	HAL_TIM_Base_Start_IT(&PROCESS_TIMER);
 8002cb8:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <_ZN11ModeManager4initEv+0x24>)
 8002cba:	f002 f8d1 	bl	8004e60 <HAL_TIM_Base_Start_IT>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000288 	.word	0x20000288

08002ccc <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE>:
uint8_t ModeManager::velocityPermission(MSG_ORIGIN origin){
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
	resetIdleTimer();
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f8b3 	bl	8002e44 <_ZN11ModeManager14resetIdleTimerEv>
	if (getDriveMode() == ENABLE){
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8c0 	bl	8002e64 <_ZN11ModeManager12getDriveModeEv>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d027      	beq.n	8002d44 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x78>
		if(origin == RC && (getRCmode() == MODE_ACRO ||
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4a>
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8bd 	bl	8002e7a <_ZN11ModeManager9getRCmodeEv>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d005      	beq.n	8002d12 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x46>
  	   	   	     	 	 	getRCmode() == MODE_SEMI) ){
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8b7 	bl	8002e7a <_ZN11ModeManager9getRCmodeEv>
 8002d0c:	4603      	mov	r3, r0
		if(origin == RC && (getRCmode() == MODE_ACRO ||
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d101      	bne.n	8002d16 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4a>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x4c>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x54>
			return 1;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e012      	b.n	8002d46 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS) ){
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6a>
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8a7 	bl	8002e7a <_ZN11ModeManager9getRCmodeEv>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6a>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x6c>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x74>
			return 1;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e002      	b.n	8002d46 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else return 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e000      	b.n	8002d46 <_ZN11ModeManager18velocityPermissionENS_10MSG_ORIGINE+0x7a>
	}
	else return 0;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE>:

uint8_t ModeManager::turnPermission(MSG_ORIGIN origin){
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70fb      	strb	r3, [r7, #3]
	resetIdleTimer();
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f872 	bl	8002e44 <_ZN11ModeManager14resetIdleTimerEv>
	if (getDriveMode() == ENABLE){
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f87f 	bl	8002e64 <_ZN11ModeManager12getDriveModeEv>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d027      	beq.n	8002dc6 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x78>
		if(origin == RC && getRCmode() == MODE_ACRO){
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x3e>
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f87c 	bl	8002e7a <_ZN11ModeManager9getRCmodeEv>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d101      	bne.n	8002d8c <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x3e>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x40>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x48>
			return 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e018      	b.n	8002dc8 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS ||
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10d      	bne.n	8002db8 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6a>
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f86c 	bl	8002e7a <_ZN11ModeManager9getRCmodeEv>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d005      	beq.n	8002db4 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x66>
				   	   	   	     getRCmode() == MODE_SEMI) ){
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f866 	bl	8002e7a <_ZN11ModeManager9getRCmodeEv>
 8002dae:	4603      	mov	r3, r0
		else if(origin == I3 && (getRCmode() == MODE_AUTONOMOUS ||
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d101      	bne.n	8002db8 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6a>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x6c>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x74>
			return 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e002      	b.n	8002dc8 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
		}
		else return 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <_ZN11ModeManager14turnPermissionENS_10MSG_ORIGINE+0x7a>
	}
	else return 0;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE>:


void ModeManager::statusUpdate(RC_MODE RCstatus, DRIVE_MODE drivestatus){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	70bb      	strb	r3, [r7, #2]
	RCmode = RCstatus;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	715a      	strb	r2, [r3, #5]
	driveMode = drivestatus;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	78ba      	ldrb	r2, [r7, #2]
 8002dea:	711a      	strb	r2, [r3, #4]
	if (RCstatus !=MODE_JOYSICK){
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE+0x2a>
		startIdleTimer();
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f808 	bl	8002e08 <_ZN11ModeManager14startIdleTimerEv>
	}
	else stopIdleTimer();
}
 8002df8:	e002      	b.n	8002e00 <_ZN11ModeManager12statusUpdateENS_7RC_MODEENS_10DRIVE_MODEE+0x30>
	else stopIdleTimer();
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f812 	bl	8002e24 <_ZN11ModeManager13stopIdleTimerEv>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_ZN11ModeManager14startIdleTimerEv>:

void ModeManager::startIdleTimer(){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&IDLE_TIMER);
 8002e10:	4803      	ldr	r0, [pc, #12]	; (8002e20 <_ZN11ModeManager14startIdleTimerEv+0x18>)
 8002e12:	f002 f825 	bl	8004e60 <HAL_TIM_Base_Start_IT>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000248 	.word	0x20000248

08002e24 <_ZN11ModeManager13stopIdleTimerEv>:

void ModeManager::stopIdleTimer(){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&IDLE_TIMER);
 8002e2c:	4804      	ldr	r0, [pc, #16]	; (8002e40 <_ZN11ModeManager13stopIdleTimerEv+0x1c>)
 8002e2e:	f002 f827 	bl	8004e80 <HAL_TIM_Base_Stop_IT>
	resetIdleTimer();
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f806 	bl	8002e44 <_ZN11ModeManager14resetIdleTimerEv>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000248 	.word	0x20000248

08002e44 <_ZN11ModeManager14resetIdleTimerEv>:
void ModeManager::resetIdleTimer(){
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&IDLE_TIMER, 0);
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <_ZN11ModeManager14resetIdleTimerEv+0x1c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2200      	movs	r2, #0
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000248 	.word	0x20000248

08002e64 <_ZN11ModeManager12getDriveModeEv>:

ModeManager::DRIVE_MODE ModeManager::getDriveMode(){
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	return driveMode;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <_ZN11ModeManager9getRCmodeEv>:
ModeManager::RC_MODE ModeManager::getRCmode(){
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
	return RCmode;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	795b      	ldrb	r3, [r3, #5]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <_ZN11ModeManager14isJoystickModeEv>:


uint8_t ModeManager::isJoystickMode(){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	if (getDriveMode() == ENABLE &&
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ffe3 	bl	8002e64 <_ZN11ModeManager12getDriveModeEv>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <_ZN11ModeManager14isJoystickModeEv+0x24>
		getRCmode() == MODE_JOYSICK) return 1;
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffe8 	bl	8002e7a <_ZN11ModeManager9getRCmodeEv>
 8002eaa:	4603      	mov	r3, r0
	if (getDriveMode() == ENABLE &&
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <_ZN11ModeManager14isJoystickModeEv+0x24>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <_ZN11ModeManager14isJoystickModeEv+0x26>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <_ZN11ModeManager14isJoystickModeEv+0x2e>
		getRCmode() == MODE_JOYSICK) return 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <_ZN11ModeManager14isJoystickModeEv+0x30>
	else return 0;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_ZN11ModeManagerC1Ev>:

ModeManager::ModeManager() {
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <_ZN11ModeManagerC1Ev+0x1c>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	08006a14 	.word	0x08006a14

08002ee8 <_ZN11ModeManagerD1Ev>:

ModeManager::~ModeManager() {
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <_ZN11ModeManagerD1Ev+0x1c>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	08006a14 	.word	0x08006a14

08002f08 <_ZN11ModeManagerD0Ev>:
ModeManager::~ModeManager() {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
}
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ffe9 	bl	8002ee8 <_ZN11ModeManagerD1Ev>
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f002 fa99 	bl	800544e <_ZdlPv>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <_Z41__static_initialization_and_destruction_0ii>:
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d107      	bne.n	8002f52 <_Z41__static_initialization_and_destruction_0ii+0x2a>
ModeManager modeManager;
 8002f42:	4806      	ldr	r0, [pc, #24]	; (8002f5c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002f44:	f7ff ffc0 	bl	8002ec8 <_ZN11ModeManagerC1Ev>
 8002f48:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002f4a:	4906      	ldr	r1, [pc, #24]	; (8002f64 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002f4e:	f002 fa80 	bl	8005452 <__aeabi_atexit>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000198 	.word	0x20000198
 8002f60:	20000000 	.word	0x20000000
 8002f64:	08002ee9 	.word	0x08002ee9

08002f68 <_GLOBAL__sub_I_modeManager>:
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7ff ffd9 	bl	8002f28 <_Z41__static_initialization_and_destruction_0ii>
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002f78:	4824      	ldr	r0, [pc, #144]	; (800300c <MX_ADC1_Init+0x94>)
 8002f7a:	4b25      	ldr	r3, [pc, #148]	; (8003010 <MX_ADC1_Init+0x98>)
{
 8002f7c:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8002f7e:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f84:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f86:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f8a:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f8c:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f8e:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8002f90:	2304      	movs	r3, #4
{
 8002f92:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f94:	9401      	str	r4, [sp, #4]
 8002f96:	9402      	str	r4, [sp, #8]
 8002f98:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f9a:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f9c:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f9e:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002fa0:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fa2:	f000 fe57 	bl	8003c54 <HAL_ADC_Init>
 8002fa6:	b108      	cbz	r0, 8002fac <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8002fa8:	f000 fa58 	bl	800345c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002fac:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fae:	a901      	add	r1, sp, #4
 8002fb0:	4816      	ldr	r0, [pc, #88]	; (800300c <MX_ADC1_Init+0x94>)
  sConfig.Channel = ADC_CHANNEL_0;
 8002fb2:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fb4:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002fb6:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fb8:	f000 fc7e 	bl	80038b8 <HAL_ADC_ConfigChannel>
 8002fbc:	b108      	cbz	r0, 8002fc2 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8002fbe:	f000 fa4d 	bl	800345c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002fc6:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fc8:	a901      	add	r1, sp, #4
 8002fca:	4810      	ldr	r0, [pc, #64]	; (800300c <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002fcc:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fce:	f000 fc73 	bl	80038b8 <HAL_ADC_ConfigChannel>
 8002fd2:	b108      	cbz	r0, 8002fd8 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8002fd4:	f000 fa42 	bl	800345c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002fd8:	230e      	movs	r3, #14
 8002fda:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002fdc:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fde:	a901      	add	r1, sp, #4
 8002fe0:	480a      	ldr	r0, [pc, #40]	; (800300c <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002fe2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe4:	f000 fc68 	bl	80038b8 <HAL_ADC_ConfigChannel>
 8002fe8:	b108      	cbz	r0, 8002fee <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8002fea:	f000 fa37 	bl	800345c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002fee:	230f      	movs	r3, #15
 8002ff0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002ff2:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ff4:	4805      	ldr	r0, [pc, #20]	; (800300c <MX_ADC1_Init+0x94>)
 8002ff6:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002ffa:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ffc:	f000 fc5c 	bl	80038b8 <HAL_ADC_ConfigChannel>
 8003000:	b108      	cbz	r0, 8003006 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003002:	f000 fa2b 	bl	800345c <Error_Handler>
  }

}
 8003006:	b005      	add	sp, #20
 8003008:	bd30      	pop	{r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	200001ac 	.word	0x200001ac
 8003010:	40012400 	.word	0x40012400

08003014 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	2210      	movs	r2, #16
{
 8003016:	b530      	push	{r4, r5, lr}
 8003018:	4605      	mov	r5, r0
 800301a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	eb0d 0002 	add.w	r0, sp, r2
 8003020:	2100      	movs	r1, #0
 8003022:	f003 fb87 	bl	8006734 <memset>
  if(adcHandle->Instance==ADC1)
 8003026:	682a      	ldr	r2, [r5, #0]
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_ADC_MspInit+0xac>)
 800302a:	429a      	cmp	r2, r3
 800302c:	d145      	bne.n	80030ba <HAL_ADC_MspInit+0xa6>
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 800302e:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003030:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003034:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303c:	619a      	str	r2, [r3, #24]
 800303e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003040:	4820      	ldr	r0, [pc, #128]	; (80030c4 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003042:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003046:	9201      	str	r2, [sp, #4]
 8003048:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	f042 0204 	orr.w	r2, r2, #4
 8003050:	619a      	str	r2, [r3, #24]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	f002 0204 	and.w	r2, r2, #4
 8003058:	9202      	str	r2, [sp, #8]
 800305a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	f042 0210 	orr.w	r2, r2, #16
 8003062:	619a      	str	r2, [r3, #24]
 8003064:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 8003066:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	9303      	str	r3, [sp, #12]
 800306e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003070:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f001 faf3 	bl	800465c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 8003076:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003078:	4813      	ldr	r0, [pc, #76]	; (80030c8 <HAL_ADC_MspInit+0xb4>)
 800307a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 800307c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800307e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003080:	f001 faec 	bl	800465c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003084:	4c11      	ldr	r4, [pc, #68]	; (80030cc <HAL_ADC_MspInit+0xb8>)
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003088:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 800308a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308c:	2300      	movs	r3, #0
 800308e:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003090:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800309a:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800309c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030a0:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030a2:	2320      	movs	r3, #32
 80030a4:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80030a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030aa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030ac:	f001 f97c 	bl	80043a8 <HAL_DMA_Init>
 80030b0:	b108      	cbz	r0, 80030b6 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 80030b2:	f000 f9d3 	bl	800345c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80030b6:	622c      	str	r4, [r5, #32]
 80030b8:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80030ba:	b009      	add	sp, #36	; 0x24
 80030bc:	bd30      	pop	{r4, r5, pc}
 80030be:	bf00      	nop
 80030c0:	40012400 	.word	0x40012400
 80030c4:	40010800 	.word	0x40010800
 80030c8:	40011000 	.word	0x40011000
 80030cc:	200001dc 	.word	0x200001dc
 80030d0:	40020008 	.word	0x40020008

080030d4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80030d4:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 80030d6:	f04f 0e10 	mov.w	lr, #16
  hcan.Instance = CAN1;
 80030da:	480b      	ldr	r0, [pc, #44]	; (8003108 <MX_CAN_Init+0x34>)
  hcan.Init.Prescaler = 16;
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <MX_CAN_Init+0x38>)
 80030de:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80030e6:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80030e8:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80030ea:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80030ec:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80030ee:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80030f0:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80030f2:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80030f4:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80030f6:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80030f8:	f000 fe36 	bl	8003d68 <HAL_CAN_Init>
 80030fc:	b118      	cbz	r0, 8003106 <MX_CAN_Init+0x32>
  {
    Error_Handler();
  }

}
 80030fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003102:	f000 b9ab 	b.w	800345c <Error_Handler>
 8003106:	bd08      	pop	{r3, pc}
 8003108:	20000220 	.word	0x20000220
 800310c:	40006400 	.word	0x40006400

08003110 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003110:	b510      	push	{r4, lr}
 8003112:	4604      	mov	r4, r0
 8003114:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	2210      	movs	r2, #16
 8003118:	2100      	movs	r1, #0
 800311a:	a802      	add	r0, sp, #8
 800311c:	f003 fb0a 	bl	8006734 <memset>
  if(canHandle->Instance==CAN1)
 8003120:	6822      	ldr	r2, [r4, #0]
 8003122:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_CAN_MspInit+0x98>)
 8003124:	429a      	cmp	r2, r3
 8003126:	d13d      	bne.n	80031a4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003128:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800312c:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 800312e:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003130:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003134:	61da      	str	r2, [r3, #28]
 8003136:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8003138:	481c      	ldr	r0, [pc, #112]	; (80031ac <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800313a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800313e:	9200      	str	r2, [sp, #0]
 8003140:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	f042 0204 	orr.w	r2, r2, #4
 8003148:	619a      	str	r2, [r3, #24]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 8003154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003158:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 800315a:	f001 fa7f 	bl	800465c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 800315e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003162:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003168:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 800316a:	a902      	add	r1, sp, #8
 800316c:	480f      	ldr	r0, [pc, #60]	; (80031ac <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8003170:	f001 fa74 	bl	800465c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003174:	2200      	movs	r2, #0
 8003176:	2013      	movs	r0, #19
 8003178:	4611      	mov	r1, r2
 800317a:	f001 f8bd 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800317e:	2013      	movs	r0, #19
 8003180:	f001 f8ee 	bl	8004360 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003184:	2200      	movs	r2, #0
 8003186:	2014      	movs	r0, #20
 8003188:	4611      	mov	r1, r2
 800318a:	f001 f8b5 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800318e:	2014      	movs	r0, #20
 8003190:	f001 f8e6 	bl	8004360 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003194:	2200      	movs	r2, #0
 8003196:	2015      	movs	r0, #21
 8003198:	4611      	mov	r1, r2
 800319a:	f001 f8ad 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800319e:	2015      	movs	r0, #21
 80031a0:	f001 f8de 	bl	8004360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80031a4:	b006      	add	sp, #24
 80031a6:	bd10      	pop	{r4, pc}
 80031a8:	40006400 	.word	0x40006400
 80031ac:	40010800 	.word	0x40010800

080031b0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <MX_DMA_Init+0x4c>)
{
 80031b2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031b4:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031b6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031c0:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031c2:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031cc:	f001 f894 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031d0:	200b      	movs	r0, #11
 80031d2:	f001 f8c5 	bl	8004360 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	200e      	movs	r0, #14
 80031da:	4611      	mov	r1, r2
 80031dc:	f001 f88c 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80031e0:	200e      	movs	r0, #14
 80031e2:	f001 f8bd 	bl	8004360 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	200f      	movs	r0, #15
 80031ea:	4611      	mov	r1, r2
 80031ec:	f001 f884 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80031f0:	200f      	movs	r0, #15
 80031f2:	f001 f8b5 	bl	8004360 <HAL_NVIC_EnableIRQ>

}
 80031f6:	b003      	add	sp, #12
 80031f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80031fc:	40021000 	.word	0x40021000

08003200 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f04f 0810 	mov.w	r8, #16
{
 8003208:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320a:	4642      	mov	r2, r8
 800320c:	2100      	movs	r1, #0
 800320e:	eb0d 0008 	add.w	r0, sp, r8
 8003212:	f003 fa8f 	bl	8006734 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003216:	4b48      	ldr	r3, [pc, #288]	; (8003338 <MX_GPIO_Init+0x138>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003218:	4f48      	ldr	r7, [pc, #288]	; (800333c <MX_GPIO_Init+0x13c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 800321c:	4d48      	ldr	r5, [pc, #288]	; (8003340 <MX_GPIO_Init+0x140>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321e:	ea42 0208 	orr.w	r2, r2, r8
 8003222:	619a      	str	r2, [r3, #24]
 8003224:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003226:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003228:	ea02 0208 	and.w	r2, r2, r8
 800322c:	9200      	str	r2, [sp, #0]
 800322e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003230:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003236:	f042 0220 	orr.w	r2, r2, #32
 800323a:	619a      	str	r2, [r3, #24]
 800323c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
                          |BUTTON_4_Pin|BUTTON_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800323e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003240:	f002 0220 	and.w	r2, r2, #32
 8003244:	9201      	str	r2, [sp, #4]
 8003246:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003248:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324a:	f04f 0a01 	mov.w	sl, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	f042 0204 	orr.w	r2, r2, #4
 8003252:	619a      	str	r2, [r3, #24]
 8003254:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	f002 0204 	and.w	r2, r2, #4
 800325e:	9202      	str	r2, [sp, #8]
 8003260:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PC15 PC0 PC1 PC2 
                           PC3 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003264:	2603      	movs	r6, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	619a      	str	r2, [r3, #24]
 800326c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800326e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	9303      	str	r3, [sp, #12]
 8003276:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003278:	f001 fadc 	bl	8004834 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 800327c:	4628      	mov	r0, r5
 800327e:	2201      	movs	r2, #1
 8003280:	2104      	movs	r1, #4
 8003282:	f001 fad7 	bl	8004834 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BL_CTRL_Pin|LED_Pin|GPIO18_Pin|GPIO4_Pin, GPIO_PIN_RESET);
 8003286:	2200      	movs	r2, #0
 8003288:	4628      	mov	r0, r5
 800328a:	f248 1128 	movw	r1, #33064	; 0x8128
 800328e:	f001 fad1 	bl	8004834 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
 8003292:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003296:	eb0d 0108 	add.w	r1, sp, r8
 800329a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin 
 800329c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800329e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a2:	f001 f9db 	bl	800465c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80032a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80032aa:	eb0d 0108 	add.w	r1, sp, r8
 80032ae:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80032b0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b2:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80032bc:	f001 f9ce 	bl	800465c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 80032c0:	f248 03cf 	movw	r3, #32975	; 0x80cf
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c4:	eb0d 0108 	add.w	r1, sp, r8
 80032c8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 80032ca:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032cc:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ce:	f001 f9c5 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = TP_CS_Pin|BL_CTRL_Pin|LED_Pin|GPIO18_Pin 
 80032d2:	f248 132c 	movw	r3, #33068	; 0x812c
                          |GPIO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d6:	eb0d 0108 	add.w	r1, sp, r8
 80032da:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TP_CS_Pin|BL_CTRL_Pin|LED_Pin|GPIO18_Pin 
 80032dc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032de:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e4:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	f001 f9b8 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80032ec:	eb0d 0108 	add.w	r1, sp, r8
 80032f0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80032f2:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f001 f9af 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032fe:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003300:	eb0d 0108 	add.w	r1, sp, r8
 8003304:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003306:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003308:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	f001 f9a7 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800330e:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003312:	eb0d 0108 	add.w	r1, sp, r8
 8003316:	480b      	ldr	r0, [pc, #44]	; (8003344 <MX_GPIO_Init+0x144>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003318:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800331a:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f001 f99e 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003320:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003322:	eb0d 0108 	add.w	r1, sp, r8
 8003326:	4808      	ldr	r0, [pc, #32]	; (8003348 <MX_GPIO_Init+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003328:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800332a:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800332c:	f001 f996 	bl	800465c <HAL_GPIO_Init>

}
 8003330:	b008      	add	sp, #32
 8003332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	40011000 	.word	0x40011000
 8003340:	40010800 	.word	0x40010800
 8003344:	40010c00 	.word	0x40010c00
 8003348:	40011400 	.word	0x40011400

0800334c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003350:	f000 fa52 	bl	80037f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003354:	f000 f81c 	bl	8003390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003358:	f7ff ff52 	bl	8003200 <MX_GPIO_Init>
  MX_DMA_Init();
 800335c:	f7ff ff28 	bl	80031b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8003360:	f7ff fe0a 	bl	8002f78 <MX_ADC1_Init>
  MX_CAN_Init();
 8003364:	f7ff feb6 	bl	80030d4 <MX_CAN_Init>
//  MX_SPI1_Init();
  MX_TIM3_Init();
 8003368:	f000 f922 	bl	80035b0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800336c:	f000 f998 	bl	80036a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  joystick.init();
 8003370:	4804      	ldr	r0, [pc, #16]	; (8003384 <main+0x38>)
 8003372:	f7ff f983 	bl	800267c <_ZN8Joystick4initEv>
  modeManager.init();
 8003376:	4804      	ldr	r0, [pc, #16]	; (8003388 <main+0x3c>)
 8003378:	f7ff fc94 	bl	8002ca4 <_ZN11ModeManager4initEv>
  canManager.init();
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <main+0x40>)
 800337e:	f7fe feab 	bl	80020d8 <_ZN10CanManager4initEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003382:	e7fe      	b.n	8003382 <main+0x36>
 8003384:	200000e4 	.word	0x200000e4
 8003388:	20000198 	.word	0x20000198
 800338c:	20000094 	.word	0x20000094

08003390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b096      	sub	sp, #88	; 0x58
 8003394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800339a:	2228      	movs	r2, #40	; 0x28
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 f9c8 	bl	8006734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033c4:	2302      	movs	r3, #2
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033c8:	2301      	movs	r3, #1
 80033ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033cc:	2310      	movs	r3, #16
 80033ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033d0:	2302      	movs	r3, #2
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80033d4:	2300      	movs	r3, #0
 80033d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80033d8:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80033dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 fa2c 	bl	8004840 <HAL_RCC_OscConfig>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80033f8:	f000 f830 	bl	800345c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033fc:	230f      	movs	r3, #15
 80033fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003400:	2302      	movs	r3, #2
 8003402:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fbec 	bl	8004bf4 <HAL_RCC_ClockConfig>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	bf14      	ite	ne
 8003422:	2301      	movne	r3, #1
 8003424:	2300      	moveq	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800342c:	f000 f816 	bl	800345c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003430:	2302      	movs	r3, #2
 8003432:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fc98 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	bf14      	ite	ne
 8003446:	2301      	movne	r3, #1
 8003448:	2300      	moveq	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003450:	f000 f804 	bl	800345c <Error_Handler>
  }
}
 8003454:	bf00      	nop
 8003456:	3758      	adds	r7, #88	; 0x58
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_MspInit+0x3c>)
{
 800346a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	619a      	str	r2, [r3, #24]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	f002 0201 	and.w	r2, r2, #1
 800347a:	9200      	str	r2, [sp, #0]
 800347c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003484:	61da      	str	r2, [r3, #28]
 8003486:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003488:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003492:	6853      	ldr	r3, [r2, #4]
 8003494:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800349c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349e:	b002      	add	sp, #8
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40010000 	.word	0x40010000

080034ac <NMI_Handler>:
 80034ac:	4770      	bx	lr

080034ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ae:	e7fe      	b.n	80034ae <HardFault_Handler>

080034b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b0:	e7fe      	b.n	80034b0 <MemManage_Handler>

080034b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034b2:	e7fe      	b.n	80034b2 <BusFault_Handler>

080034b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034b4:	e7fe      	b.n	80034b4 <UsageFault_Handler>

080034b6 <SVC_Handler>:
 80034b6:	4770      	bx	lr

080034b8 <DebugMon_Handler>:
 80034b8:	4770      	bx	lr

080034ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ba:	4770      	bx	lr

080034bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034bc:	f000 b9ae 	b.w	800381c <HAL_IncTick>

080034c0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034c0:	4801      	ldr	r0, [pc, #4]	; (80034c8 <DMA1_Channel1_IRQHandler+0x8>)
 80034c2:	f000 bfef 	b.w	80044a4 <HAL_DMA_IRQHandler>
 80034c6:	bf00      	nop
 80034c8:	200001dc 	.word	0x200001dc

080034cc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <DMA1_Channel4_IRQHandler+0x8>)
 80034ce:	f000 bfe9 	b.w	80044a4 <HAL_DMA_IRQHandler>
 80034d2:	bf00      	nop
 80034d4:	200002c8 	.word	0x200002c8

080034d8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <DMA1_Channel5_IRQHandler+0x8>)
 80034da:	f000 bfe3 	b.w	80044a4 <HAL_DMA_IRQHandler>
 80034de:	bf00      	nop
 80034e0:	2000030c 	.word	0x2000030c

080034e4 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80034e4:	4801      	ldr	r0, [pc, #4]	; (80034ec <CAN1_RX1_IRQHandler+0x8>)
 80034e6:	f000 bdf6 	b.w	80040d6 <HAL_CAN_IRQHandler>
 80034ea:	bf00      	nop
 80034ec:	20000220 	.word	0x20000220

080034f0 <USB_LP_CAN1_RX0_IRQHandler>:
 80034f0:	f7ff bff8 	b.w	80034e4 <CAN1_RX1_IRQHandler>

080034f4 <USB_HP_CAN1_TX_IRQHandler>:
 80034f4:	f7ff bff6 	b.w	80034e4 <CAN1_RX1_IRQHandler>

080034f8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034f8:	4801      	ldr	r0, [pc, #4]	; (8003500 <TIM3_IRQHandler+0x8>)
 80034fa:	f001 bcda 	b.w	8004eb2 <HAL_TIM_IRQHandler>
 80034fe:	bf00      	nop
 8003500:	20000288 	.word	0x20000288

08003504 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003504:	4801      	ldr	r0, [pc, #4]	; (800350c <TIM4_IRQHandler+0x8>)
 8003506:	f001 bcd4 	b.w	8004eb2 <HAL_TIM_IRQHandler>
 800350a:	bf00      	nop
 800350c:	20000248 	.word	0x20000248

08003510 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003510:	2001      	movs	r0, #1
 8003512:	4770      	bx	lr

08003514 <_kill>:

int _kill(int pid, int sig)
{
 8003514:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003516:	f003 f8db 	bl	80066d0 <__errno>
 800351a:	2316      	movs	r3, #22
 800351c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800351e:	f04f 30ff 	mov.w	r0, #4294967295
 8003522:	bd08      	pop	{r3, pc}

08003524 <_exit>:

void _exit (int status)
{
 8003524:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003526:	f003 f8d3 	bl	80066d0 <__errno>
 800352a:	2316      	movs	r3, #22
 800352c:	6003      	str	r3, [r0, #0]
 800352e:	e7fe      	b.n	800352e <_exit+0xa>

08003530 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003530:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <_sbrk+0x2c>)
{
 8003534:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	b909      	cbnz	r1, 800353e <_sbrk+0xe>
		heap_end = &end;
 800353a:	4909      	ldr	r1, [pc, #36]	; (8003560 <_sbrk+0x30>)
 800353c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800353e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003540:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003542:	4402      	add	r2, r0
 8003544:	428a      	cmp	r2, r1
 8003546:	d906      	bls.n	8003556 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003548:	f003 f8c2 	bl	80066d0 <__errno>
 800354c:	230c      	movs	r3, #12
 800354e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003556:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003558:	bd08      	pop	{r3, pc}
 800355a:	bf00      	nop
 800355c:	200001a0 	.word	0x200001a0
 8003560:	20000398 	.word	0x20000398

08003564 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <SystemInit+0x40>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	4a0d      	ldr	r2, [pc, #52]	; (80035a8 <SystemInit+0x44>)
 8003572:	400a      	ands	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800357c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003580:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003588:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003590:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003592:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003596:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <SystemInit+0x48>)
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	f8ff0000 	.word	0xf8ff0000
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035b0:	b510      	push	{r4, lr}
 80035b2:	b08c      	sub	sp, #48	; 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035b4:	2210      	movs	r2, #16
 80035b6:	2100      	movs	r1, #0
 80035b8:	a803      	add	r0, sp, #12
 80035ba:	f003 f8bb 	bl	8006734 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80035be:	2214      	movs	r2, #20
 80035c0:	2100      	movs	r1, #0
 80035c2:	a807      	add	r0, sp, #28
 80035c4:	f003 f8b6 	bl	8006734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035c8:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 64;
 80035ca:	2240      	movs	r2, #64	; 0x40
  htim3.Instance = TIM3;
 80035cc:	4818      	ldr	r0, [pc, #96]	; (8003630 <MX_TIM3_Init+0x80>)
  htim3.Init.Prescaler = 64;
 80035ce:	4919      	ldr	r1, [pc, #100]	; (8003634 <MX_TIM3_Init+0x84>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	9302      	str	r3, [sp, #8]
  htim3.Init.Prescaler = 64;
 80035d4:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 900;
 80035da:	f44f 7261 	mov.w	r2, #900	; 0x384
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035de:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035e0:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 900;
 80035e2:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035e6:	f001 fd53 	bl	8005090 <HAL_TIM_Base_Init>
 80035ea:	b108      	cbz	r0, 80035f0 <MX_TIM3_Init+0x40>
  {
    Error_Handler();
 80035ec:	f7ff ff36 	bl	800345c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035f4:	a903      	add	r1, sp, #12
 80035f6:	480e      	ldr	r0, [pc, #56]	; (8003630 <MX_TIM3_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f8:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035fa:	f001 fd6d 	bl	80050d8 <HAL_TIM_ConfigClockSource>
 80035fe:	b108      	cbz	r0, 8003604 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003600:	f7ff ff2c 	bl	800345c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003604:	2400      	movs	r4, #0
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003606:	a907      	add	r1, sp, #28
 8003608:	4809      	ldr	r0, [pc, #36]	; (8003630 <MX_TIM3_Init+0x80>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800360a:	9407      	str	r4, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800360c:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800360e:	f001 fe49 	bl	80052a4 <HAL_TIM_SlaveConfigSynchro>
 8003612:	b108      	cbz	r0, 8003618 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003614:	f7ff ff22 	bl	800345c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003618:	a901      	add	r1, sp, #4
 800361a:	4805      	ldr	r0, [pc, #20]	; (8003630 <MX_TIM3_Init+0x80>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800361c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003620:	f001 fe67 	bl	80052f2 <HAL_TIMEx_MasterConfigSynchronization>
 8003624:	b108      	cbz	r0, 800362a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003626:	f7ff ff19 	bl	800345c <Error_Handler>
  }

}
 800362a:	b00c      	add	sp, #48	; 0x30
 800362c:	bd10      	pop	{r4, pc}
 800362e:	bf00      	nop
 8003630:	20000288 	.word	0x20000288
 8003634:	40000400 	.word	0x40000400

08003638 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003638:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 800363a:	6803      	ldr	r3, [r0, #0]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_TIM_Base_MspInit+0x5c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d114      	bne.n	800366c <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_TIM_Base_MspInit+0x60>)

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003644:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	f042 0202 	orr.w	r2, r2, #2
 800364c:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003650:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003652:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800365c:	f000 fe4c 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003660:	201d      	movs	r0, #29
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003662:	f000 fe7d 	bl	8004360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003666:	b003      	add	sp, #12
 8003668:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 800366c:	4a0b      	ldr	r2, [pc, #44]	; (800369c <HAL_TIM_Base_MspInit+0x64>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d1f9      	bne.n	8003666 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003674:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	f042 0204 	orr.w	r2, r2, #4
 800367c:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800367e:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003680:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003682:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800368c:	f000 fe34 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003690:	201e      	movs	r0, #30
 8003692:	e7e6      	b.n	8003662 <HAL_TIM_Base_MspInit+0x2a>
 8003694:	40000400 	.word	0x40000400
 8003698:	40021000 	.word	0x40021000
 800369c:	40000800 	.word	0x40000800

080036a0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036a0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80036a2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80036a6:	480a      	ldr	r0, [pc, #40]	; (80036d0 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036aa:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80036ac:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036b0:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036b2:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036b4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036b6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036b8:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ba:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036bc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036be:	f001 fe73 	bl	80053a8 <HAL_UART_Init>
 80036c2:	b118      	cbz	r0, 80036cc <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80036c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80036c8:	f7ff bec8 	b.w	800345c <Error_Handler>
 80036cc:	bd08      	pop	{r3, pc}
 80036ce:	bf00      	nop
 80036d0:	20000350 	.word	0x20000350
 80036d4:	40013800 	.word	0x40013800

080036d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	4606      	mov	r6, r0
 80036dc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036de:	2210      	movs	r2, #16
 80036e0:	2100      	movs	r1, #0
 80036e2:	a802      	add	r0, sp, #8
 80036e4:	f003 f826 	bl	8006734 <memset>
  if(uartHandle->Instance==USART1)
 80036e8:	6832      	ldr	r2, [r6, #0]
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_UART_MspInit+0xc0>)
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d151      	bne.n	8003794 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036f0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80036f4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART1_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 80036f6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80036f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036fc:	619a      	str	r2, [r3, #24]
 80036fe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8003700:	4826      	ldr	r0, [pc, #152]	; (800379c <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003702:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003706:	9200      	str	r2, [sp, #0]
 8003708:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800370c:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370e:	f042 0204 	orr.w	r2, r2, #4
 8003712:	619a      	str	r2, [r3, #24]
 8003714:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003716:	4c22      	ldr	r4, [pc, #136]	; (80037a0 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART1_TX_Pin;
 8003720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003724:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800372a:	2303      	movs	r3, #3
 800372c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 800372e:	f000 ff95 	bl	800465c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 8003732:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003736:	4819      	ldr	r0, [pc, #100]	; (800379c <HAL_UART_MspInit+0xc4>)
 8003738:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 800373a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800373c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8003740:	f000 ff8c 	bl	800465c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003744:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_UART_MspInit+0xcc>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003746:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003748:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800374c:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800374e:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003750:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003752:	6125      	str	r5, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003754:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003756:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003758:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800375a:	f000 fe25 	bl	80043a8 <HAL_DMA_Init>
 800375e:	b108      	cbz	r0, 8003764 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8003760:	f7ff fe7c 	bl	800345c <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003764:	f04f 0c10 	mov.w	ip, #16
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_UART_MspInit+0xd0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800376a:	6374      	str	r4, [r6, #52]	; 0x34
 800376c:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800376e:	4c0f      	ldr	r4, [pc, #60]	; (80037ac <HAL_UART_MspInit+0xd4>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003770:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003772:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003776:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003778:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800377a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800377c:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800377e:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003780:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003782:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003784:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003786:	f000 fe0f 	bl	80043a8 <HAL_DMA_Init>
 800378a:	b108      	cbz	r0, 8003790 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 800378c:	f7ff fe66 	bl	800345c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003790:	6334      	str	r4, [r6, #48]	; 0x30
 8003792:	6266      	str	r6, [r4, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003794:	b006      	add	sp, #24
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	40013800 	.word	0x40013800
 800379c:	40010800 	.word	0x40010800
 80037a0:	2000030c 	.word	0x2000030c
 80037a4:	40020058 	.word	0x40020058
 80037a8:	40020044 	.word	0x40020044
 80037ac:	200002c8 	.word	0x200002c8

080037b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <HAL_InitTick+0x3c>)
{
 80037b4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b6:	7818      	ldrb	r0, [r3, #0]
 80037b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80037c0:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <HAL_InitTick+0x40>)
 80037c2:	6810      	ldr	r0, [r2, #0]
 80037c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80037c8:	f000 fdd8 	bl	800437c <HAL_SYSTICK_Config>
 80037cc:	4604      	mov	r4, r0
 80037ce:	b958      	cbnz	r0, 80037e8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037d0:	2d0f      	cmp	r5, #15
 80037d2:	d809      	bhi.n	80037e8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d4:	4602      	mov	r2, r0
 80037d6:	4629      	mov	r1, r5
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f000 fd8c 	bl	80042f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <HAL_InitTick+0x44>)
 80037e2:	4620      	mov	r0, r4
 80037e4:	601d      	str	r5, [r3, #0]
 80037e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80037e8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	20000008 	.word	0x20000008
 80037f0:	20000004 	.word	0x20000004
 80037f4:	2000000c 	.word	0x2000000c

080037f8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f8:	4a07      	ldr	r2, [pc, #28]	; (8003818 <HAL_Init+0x20>)
{
 80037fa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037fc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003800:	f043 0310 	orr.w	r3, r3, #16
 8003804:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003806:	f000 fd65 	bl	80042d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff ffd0 	bl	80037b0 <HAL_InitTick>
  HAL_MspInit();
 8003810:	f7ff fe2a 	bl	8003468 <HAL_MspInit>
}
 8003814:	2000      	movs	r0, #0
 8003816:	bd08      	pop	{r3, pc}
 8003818:	40022000 	.word	0x40022000

0800381c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800381c:	4a03      	ldr	r2, [pc, #12]	; (800382c <HAL_IncTick+0x10>)
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_IncTick+0x14>)
 8003820:	6811      	ldr	r1, [r2, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	440b      	add	r3, r1
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000390 	.word	0x20000390
 8003830:	20000008 	.word	0x20000008

08003834 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <HAL_GetTick+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000390 	.word	0x20000390

08003840 <HAL_ADC_ConvCpltCallback>:
 8003840:	4770      	bx	lr

08003842 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003842:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003844:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003848:	f012 0f50 	tst.w	r2, #80	; 0x50
 800384c:	d11b      	bne.n	8003886 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800384e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	6892      	ldr	r2, [r2, #8]
 800385a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800385e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003862:	d10c      	bne.n	800387e <ADC_DMAConvCplt+0x3c>
 8003864:	7b1a      	ldrb	r2, [r3, #12]
 8003866:	b952      	cbnz	r2, 800387e <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003872:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003874:	bf5e      	ittt	pl
 8003876:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8003878:	f042 0201 	orrpl.w	r2, r2, #1
 800387c:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ffde 	bl	8003840 <HAL_ADC_ConvCpltCallback>
 8003884:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003886:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8003888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4718      	bx	r3

08003890 <HAL_ADC_ConvHalfCpltCallback>:
 8003890:	4770      	bx	lr

08003892 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003892:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003894:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003896:	f7ff fffb 	bl	8003890 <HAL_ADC_ConvHalfCpltCallback>
 800389a:	bd08      	pop	{r3, pc}

0800389c <HAL_ADC_ErrorCallback>:
{
 800389c:	4770      	bx	lr

0800389e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800389e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80038a0:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038ac:	f043 0304 	orr.w	r3, r3, #4
 80038b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038b2:	f7ff fff3 	bl	800389c <HAL_ADC_ErrorCallback>
 80038b6:	bd08      	pop	{r3, pc}

080038b8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80038b8:	2300      	movs	r3, #0
{ 
 80038ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80038bc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80038be:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d074      	beq.n	80039b0 <HAL_ADC_ConfigChannel+0xf8>
 80038c6:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 80038c8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80038ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80038ce:	2d06      	cmp	r5, #6
 80038d0:	6802      	ldr	r2, [r0, #0]
 80038d2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80038d6:	680c      	ldr	r4, [r1, #0]
 80038d8:	d825      	bhi.n	8003926 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80038da:	442b      	add	r3, r5
 80038dc:	251f      	movs	r5, #31
 80038de:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80038e0:	3b05      	subs	r3, #5
 80038e2:	409d      	lsls	r5, r3
 80038e4:	ea26 0505 	bic.w	r5, r6, r5
 80038e8:	fa04 f303 	lsl.w	r3, r4, r3
 80038ec:	432b      	orrs	r3, r5
 80038ee:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80038f0:	2c09      	cmp	r4, #9
 80038f2:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80038f6:	688d      	ldr	r5, [r1, #8]
 80038f8:	d92f      	bls.n	800395a <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80038fa:	2607      	movs	r6, #7
 80038fc:	4423      	add	r3, r4
 80038fe:	68d1      	ldr	r1, [r2, #12]
 8003900:	3b1e      	subs	r3, #30
 8003902:	409e      	lsls	r6, r3
 8003904:	ea21 0106 	bic.w	r1, r1, r6
 8003908:	fa05 f303 	lsl.w	r3, r5, r3
 800390c:	430b      	orrs	r3, r1
 800390e:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003910:	f1a4 0310 	sub.w	r3, r4, #16
 8003914:	2b01      	cmp	r3, #1
 8003916:	d92b      	bls.n	8003970 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003918:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800391a:	2200      	movs	r2, #0
 800391c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8003920:	4618      	mov	r0, r3
 8003922:	b002      	add	sp, #8
 8003924:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8003926:	2d0c      	cmp	r5, #12
 8003928:	d80b      	bhi.n	8003942 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800392a:	442b      	add	r3, r5
 800392c:	251f      	movs	r5, #31
 800392e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8003930:	3b23      	subs	r3, #35	; 0x23
 8003932:	409d      	lsls	r5, r3
 8003934:	ea26 0505 	bic.w	r5, r6, r5
 8003938:	fa04 f303 	lsl.w	r3, r4, r3
 800393c:	432b      	orrs	r3, r5
 800393e:	6313      	str	r3, [r2, #48]	; 0x30
 8003940:	e7d6      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003942:	442b      	add	r3, r5
 8003944:	251f      	movs	r5, #31
 8003946:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8003948:	3b41      	subs	r3, #65	; 0x41
 800394a:	409d      	lsls	r5, r3
 800394c:	ea26 0505 	bic.w	r5, r6, r5
 8003950:	fa04 f303 	lsl.w	r3, r4, r3
 8003954:	432b      	orrs	r3, r5
 8003956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003958:	e7ca      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800395a:	2607      	movs	r6, #7
 800395c:	6911      	ldr	r1, [r2, #16]
 800395e:	4423      	add	r3, r4
 8003960:	409e      	lsls	r6, r3
 8003962:	ea21 0106 	bic.w	r1, r1, r6
 8003966:	fa05 f303 	lsl.w	r3, r5, r3
 800396a:	430b      	orrs	r3, r1
 800396c:	6113      	str	r3, [r2, #16]
 800396e:	e7cf      	b.n	8003910 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8003970:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_ADC_ConfigChannel+0xfc>)
 8003972:	429a      	cmp	r2, r3
 8003974:	d116      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003976:	6893      	ldr	r3, [r2, #8]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	d4cd      	bmi.n	8003918 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800397c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800397e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003984:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003986:	d1c7      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_ADC_ConfigChannel+0x100>)
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <HAL_ADC_ConfigChannel+0x104>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003992:	230a      	movs	r3, #10
 8003994:	4353      	muls	r3, r2
            wait_loop_index--;
 8003996:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003998:	9b01      	ldr	r3, [sp, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0bc      	beq.n	8003918 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800399e:	9b01      	ldr	r3, [sp, #4]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	e7f8      	b.n	8003996 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80039a6:	f043 0320 	orr.w	r3, r3, #32
 80039aa:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e7b4      	b.n	800391a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80039b0:	2302      	movs	r3, #2
 80039b2:	e7b5      	b.n	8003920 <HAL_ADC_ConfigChannel+0x68>
 80039b4:	40012400 	.word	0x40012400
 80039b8:	20000004 	.word	0x20000004
 80039bc:	000f4240 	.word	0x000f4240

080039c0 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80039c0:	2300      	movs	r3, #0
{
 80039c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80039c4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039c6:	6803      	ldr	r3, [r0, #0]
{
 80039c8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	07d2      	lsls	r2, r2, #31
 80039ce:	d502      	bpl.n	80039d6 <ADC_Enable+0x16>
  return HAL_OK;
 80039d0:	2000      	movs	r0, #0
}
 80039d2:	b002      	add	sp, #8
 80039d4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <ADC_Enable+0x68>)
 80039e0:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <ADC_Enable+0x6c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80039e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80039ea:	9b01      	ldr	r3, [sp, #4]
 80039ec:	b9c3      	cbnz	r3, 8003a20 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80039ee:	f7ff ff21 	bl	8003834 <HAL_GetTick>
 80039f2:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	689d      	ldr	r5, [r3, #8]
 80039f8:	f015 0501 	ands.w	r5, r5, #1
 80039fc:	d1e8      	bne.n	80039d0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039fe:	f7ff ff19 	bl	8003834 <HAL_GetTick>
 8003a02:	1b80      	subs	r0, r0, r6
 8003a04:	2802      	cmp	r0, #2
 8003a06:	d9f5      	bls.n	80039f4 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8003a0a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0e:	f043 0310 	orr.w	r3, r3, #16
 8003a12:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8003a16:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a1e:	e7d8      	b.n	80039d2 <ADC_Enable+0x12>
      wait_loop_index--;
 8003a20:	9b01      	ldr	r3, [sp, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	e7e0      	b.n	80039e8 <ADC_Enable+0x28>
 8003a26:	bf00      	nop
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	000f4240 	.word	0x000f4240

08003a30 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8003a30:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003a34:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003a36:	2b01      	cmp	r3, #1
{
 8003a38:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003a3a:	d054      	beq.n	8003ae6 <HAL_ADC_Start+0xb6>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8003a42:	f7ff ffbd 	bl	80039c0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d149      	bne.n	8003ade <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8003a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a4c:	4a27      	ldr	r2, [pc, #156]	; (8003aec <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d104      	bne.n	8003a6c <HAL_ADC_Start+0x3c>
 8003a62:	4923      	ldr	r1, [pc, #140]	; (8003af0 <HAL_ADC_Start+0xc0>)
 8003a64:	684a      	ldr	r2, [r1, #4]
 8003a66:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8003a6a:	d12e      	bne.n	8003aca <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003a72:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a74:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a76:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a78:	bf41      	itttt	mi
 8003a7a:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8003a7c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8003a80:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8003a84:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a8c:	bf1c      	itt	ne
 8003a8e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8003a90:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003a94:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8003a96:	2200      	movs	r2, #0
 8003a98:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003a9c:	f06f 0202 	mvn.w	r2, #2
 8003aa0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003aa8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003aac:	d113      	bne.n	8003ad6 <HAL_ADC_Start+0xa6>
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_ADC_Start+0xbc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d105      	bne.n	8003ac0 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003ab4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003ab8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003aba:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8003abe:	d10a      	bne.n	8003ad6 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003acc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ad0:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ad2:	684a      	ldr	r2, [r1, #4]
 8003ad4:	e7cf      	b.n	8003a76 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003adc:	e7f3      	b.n	8003ac6 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003ae4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003ae6:	2002      	movs	r0, #2
}
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	bf00      	nop
 8003aec:	40012800 	.word	0x40012800
 8003af0:	40012400 	.word	0x40012400

08003af4 <HAL_ADC_Start_DMA>:
{
 8003af4:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8003af8:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003afa:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <HAL_ADC_Start_DMA+0x108>)
 8003afc:	6802      	ldr	r2, [r0, #0]
{
 8003afe:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003b00:	429a      	cmp	r2, r3
{
 8003b02:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003b04:	d002      	beq.n	8003b0c <HAL_ADC_Start_DMA+0x18>
 8003b06:	493e      	ldr	r1, [pc, #248]	; (8003c00 <HAL_ADC_Start_DMA+0x10c>)
 8003b08:	428a      	cmp	r2, r1
 8003b0a:	d103      	bne.n	8003b14 <HAL_ADC_Start_DMA+0x20>
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003b12:	d16e      	bne.n	8003bf2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8003b14:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d06c      	beq.n	8003bf6 <HAL_ADC_Start_DMA+0x102>
 8003b1c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8003b1e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8003b20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8003b24:	f7ff ff4c 	bl	80039c0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003b28:	4606      	mov	r6, r0
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d15d      	bne.n	8003bea <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8003b2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b30:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003b32:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b36:	4b32      	ldr	r3, [pc, #200]	; (8003c00 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8003b38:	f020 0001 	bic.w	r0, r0, #1
 8003b3c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b40:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8003b42:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b44:	d104      	bne.n	8003b50 <HAL_ADC_Start_DMA+0x5c>
 8003b46:	4a2d      	ldr	r2, [pc, #180]	; (8003bfc <HAL_ADC_Start_DMA+0x108>)
 8003b48:	6853      	ldr	r3, [r2, #4]
 8003b4a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003b4e:	d13e      	bne.n	8003bce <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b56:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b58:	684b      	ldr	r3, [r1, #4]
 8003b5a:	055a      	lsls	r2, r3, #21
 8003b5c:	d505      	bpl.n	8003b6a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b68:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b6c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b6e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b72:	bf18      	it	ne
 8003b74:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b76:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b78:	bf18      	it	ne
 8003b7a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8003b7e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8003b80:	2300      	movs	r3, #0
 8003b82:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b86:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b88:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b8a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b8c:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <HAL_ADC_Start_DMA+0x114>)
 8003b8e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b90:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_ADC_Start_DMA+0x118>)
 8003b92:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003b94:	f06f 0302 	mvn.w	r3, #2
 8003b98:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b9c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8003ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba4:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ba8:	4643      	mov	r3, r8
 8003baa:	f000 fc3d 	bl	8004428 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003bb6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	bf0c      	ite	eq
 8003bbe:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003bc2:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	4630      	mov	r0, r6
 8003bca:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bd6:	6853      	ldr	r3, [r2, #4]
 8003bd8:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bda:	bf41      	itttt	mi
 8003bdc:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8003bde:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8003be2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8003be6:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8003be8:	e7bf      	b.n	8003b6a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8003bea:	2300      	movs	r3, #0
 8003bec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003bf0:	e7ea      	b.n	8003bc8 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8003bf2:	2601      	movs	r6, #1
 8003bf4:	e7e8      	b.n	8003bc8 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8003bf6:	2602      	movs	r6, #2
 8003bf8:	e7e6      	b.n	8003bc8 <HAL_ADC_Start_DMA+0xd4>
 8003bfa:	bf00      	nop
 8003bfc:	40012400 	.word	0x40012400
 8003c00:	40012800 	.word	0x40012800
 8003c04:	08003843 	.word	0x08003843
 8003c08:	08003893 	.word	0x08003893
 8003c0c:	0800389f 	.word	0x0800389f

08003c10 <ADC_ConversionStop_Disable>:
{
 8003c10:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c12:	6803      	ldr	r3, [r0, #0]
{
 8003c14:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	07d2      	lsls	r2, r2, #31
 8003c1a:	d401      	bmi.n	8003c20 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003c28:	f7ff fe04 	bl	8003834 <HAL_GetTick>
 8003c2c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	07db      	lsls	r3, r3, #31
 8003c34:	d5f2      	bpl.n	8003c1c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c36:	f7ff fdfd 	bl	8003834 <HAL_GetTick>
 8003c3a:	1b40      	subs	r0, r0, r5
 8003c3c:	2802      	cmp	r0, #2
 8003c3e:	d9f6      	bls.n	8003c2e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c42:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c44:	f043 0310 	orr.w	r3, r3, #16
 8003c48:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c52:	bd38      	pop	{r3, r4, r5, pc}

08003c54 <HAL_ADC_Init>:
{
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8003c56:	4604      	mov	r4, r0
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d077      	beq.n	8003d4c <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c5e:	b923      	cbnz	r3, 8003c6a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8003c60:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003c62:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003c66:	f7ff f9d5 	bl	8003014 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7ff ffd0 	bl	8003c10 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c72:	f013 0310 	ands.w	r3, r3, #16
 8003c76:	d16b      	bne.n	8003d50 <HAL_ADC_Init+0xfc>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d169      	bne.n	8003d50 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c7e:	4937      	ldr	r1, [pc, #220]	; (8003d5c <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 8003c80:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003c84:	f022 0202 	bic.w	r2, r2, #2
 8003c88:	f042 0202 	orr.w	r2, r2, #2
 8003c8c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003c8e:	e894 0024 	ldmia.w	r4, {r2, r5}
 8003c92:	428a      	cmp	r2, r1
 8003c94:	69e1      	ldr	r1, [r4, #28]
 8003c96:	d104      	bne.n	8003ca2 <HAL_ADC_Init+0x4e>
 8003c98:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8003c9c:	bf08      	it	eq
 8003c9e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003ca2:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ca4:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8003ca8:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003caa:	68a5      	ldr	r5, [r4, #8]
 8003cac:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003cb0:	d035      	beq.n	8003d1e <HAL_ADC_Init+0xca>
 8003cb2:	2d01      	cmp	r5, #1
 8003cb4:	bf08      	it	eq
 8003cb6:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cba:	7d27      	ldrb	r7, [r4, #20]
 8003cbc:	2f01      	cmp	r7, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003cc0:	bb7e      	cbnz	r6, 8003d22 <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003cc2:	69a6      	ldr	r6, [r4, #24]
 8003cc4:	3e01      	subs	r6, #1
 8003cc6:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8003cca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8003cce:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003cd0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003cd4:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8003cd8:	ea43 0306 	orr.w	r3, r3, r6
 8003cdc:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003cde:	6896      	ldr	r6, [r2, #8]
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <HAL_ADC_Init+0x10c>)
 8003ce2:	ea03 0306 	and.w	r3, r3, r6
 8003ce6:	ea43 0301 	orr.w	r3, r3, r1
 8003cea:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003cec:	d001      	beq.n	8003cf2 <HAL_ADC_Init+0x9e>
 8003cee:	2d01      	cmp	r5, #1
 8003cf0:	d120      	bne.n	8003d34 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8003cf8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8003cfa:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8003cfe:	432b      	orrs	r3, r5
 8003d00:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003d02:	6892      	ldr	r2, [r2, #8]
 8003d04:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <HAL_ADC_Init+0x110>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	d115      	bne.n	8003d38 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d1e:	462b      	mov	r3, r5
 8003d20:	e7cb      	b.n	8003cba <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d24:	f046 0620 	orr.w	r6, r6, #32
 8003d28:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d2c:	f046 0601 	orr.w	r6, r6, #1
 8003d30:	62e6      	str	r6, [r4, #44]	; 0x2c
 8003d32:	e7cc      	b.n	8003cce <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e7df      	b.n	8003cf8 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 8003d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d3a:	f023 0312 	bic.w	r3, r3, #18
 8003d3e:	f043 0310 	orr.w	r3, r3, #16
 8003d42:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8003d4c:	2001      	movs	r0, #1
}
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d52:	f043 0310 	orr.w	r3, r3, #16
 8003d56:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d58:	e7f8      	b.n	8003d4c <HAL_ADC_Init+0xf8>
 8003d5a:	bf00      	nop
 8003d5c:	40013c00 	.word	0x40013c00
 8003d60:	ffe1f7fd 	.word	0xffe1f7fd
 8003d64:	ff1f0efe 	.word	0xff1f0efe

08003d68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d68:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d06e      	beq.n	8003e4e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d70:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003d74:	b90b      	cbnz	r3, 8003d7a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d76:	f7ff f9cb 	bl	8003110 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	6813      	ldr	r3, [r2, #0]
 8003d7e:	f023 0302 	bic.w	r3, r3, #2
 8003d82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d84:	f7ff fd56 	bl	8003834 <HAL_GetTick>
 8003d88:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	0791      	lsls	r1, r2, #30
 8003d90:	d451      	bmi.n	8003e36 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d9a:	f7ff fd4b 	bl	8003834 <HAL_GetTick>
 8003d9e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	07d2      	lsls	r2, r2, #31
 8003da6:	d554      	bpl.n	8003e52 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003da8:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003daa:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003dac:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	bf0c      	ite	eq
 8003db2:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003db6:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8003dba:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003dbc:	7e62      	ldrb	r2, [r4, #25]
 8003dbe:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	bf0c      	ite	eq
 8003dc4:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003dc8:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003dcc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003dce:	7ea2      	ldrb	r2, [r4, #26]
 8003dd0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	bf0c      	ite	eq
 8003dd6:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003dda:	f022 0220 	bicne.w	r2, r2, #32
 8003dde:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003de0:	7ee2      	ldrb	r2, [r4, #27]
 8003de2:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	bf0c      	ite	eq
 8003de8:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003dec:	f042 0210 	orrne.w	r2, r2, #16
 8003df0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003df2:	7f22      	ldrb	r2, [r4, #28]
 8003df4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	bf0c      	ite	eq
 8003dfa:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003dfe:	f022 0208 	bicne.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e04:	7f62      	ldrb	r2, [r4, #29]
 8003e06:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	bf0c      	ite	eq
 8003e0c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e10:	f022 0204 	bicne.w	r2, r2, #4
 8003e14:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e16:	68e1      	ldr	r1, [r4, #12]
 8003e18:	68a2      	ldr	r2, [r4, #8]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	6921      	ldr	r1, [r4, #16]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	6961      	ldr	r1, [r4, #20]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	6861      	ldr	r1, [r4, #4]
 8003e26:	3901      	subs	r1, #1
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e2c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e2e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003e30:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8003e34:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e36:	f7ff fcfd 	bl	8003834 <HAL_GetTick>
 8003e3a:	1b40      	subs	r0, r0, r5
 8003e3c:	280a      	cmp	r0, #10
 8003e3e:	d9a4      	bls.n	8003d8a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e46:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e48:	2305      	movs	r3, #5
 8003e4a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003e4e:	2001      	movs	r0, #1
}
 8003e50:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e52:	f7ff fcef 	bl	8003834 <HAL_GetTick>
 8003e56:	1b40      	subs	r0, r0, r5
 8003e58:	280a      	cmp	r0, #10
 8003e5a:	d9a1      	bls.n	8003da0 <HAL_CAN_Init+0x38>
 8003e5c:	e7f0      	b.n	8003e40 <HAL_CAN_Init+0xd8>

08003e5e <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e5e:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003e62:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8003e64:	3b01      	subs	r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d85f      	bhi.n	8003f2a <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e6a:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e6c:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e6e:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e7c:	f000 021f 	and.w	r2, r0, #31
 8003e80:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e84:	43d4      	mvns	r4, r2
 8003e86:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8003e8a:	4025      	ands	r5, r4
 8003e8c:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e90:	69cd      	ldr	r5, [r1, #28]
 8003e92:	bb85      	cbnz	r5, 8003ef6 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e94:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e98:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e9a:	4025      	ands	r5, r4
 8003e9c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ea0:	888d      	ldrh	r5, [r1, #4]
 8003ea2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ea6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003eaa:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eae:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003eb0:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eb2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003eb6:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003eba:	6988      	ldr	r0, [r1, #24]
 8003ebc:	bb68      	cbnz	r0, 8003f1a <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ebe:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003ec2:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ec4:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003ec8:	6908      	ldr	r0, [r1, #16]
 8003eca:	bb50      	cbnz	r0, 8003f22 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ecc:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003ed0:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ed2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ed6:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8003ed8:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003eda:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003edc:	bf02      	ittt	eq
 8003ede:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8003ee2:	430a      	orreq	r2, r1
 8003ee4:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ee8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8003ef4:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003ef6:	2d01      	cmp	r5, #1
 8003ef8:	d1df      	bne.n	8003eba <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003efa:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003efe:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f00:	4315      	orrs	r5, r2
 8003f02:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f06:	888d      	ldrh	r5, [r1, #4]
 8003f08:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f0c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f10:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f14:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003f16:	898d      	ldrh	r5, [r1, #12]
 8003f18:	e7cb      	b.n	8003eb2 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f1a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003f1e:	4310      	orrs	r0, r2
 8003f20:	e7d0      	b.n	8003ec4 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f22:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003f26:	4310      	orrs	r0, r2
 8003f28:	e7d3      	b.n	8003ed2 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f30:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003f32:	2001      	movs	r0, #1
  }
}
 8003f34:	bd70      	pop	{r4, r5, r6, pc}

08003f36 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f36:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f38:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f3c:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f3e:	3d01      	subs	r5, #1
 8003f40:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f42:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8003f44:	d841      	bhi.n	8003fca <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f46:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8003f4a:	d03a      	beq.n	8003fc2 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f4c:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f50:	2c03      	cmp	r4, #3
 8003f52:	f04f 0501 	mov.w	r5, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f5e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003f60:	2001      	movs	r0, #1
  }
}
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f64:	40a5      	lsls	r5, r4
 8003f66:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8003f68:	6888      	ldr	r0, [r1, #8]
 8003f6a:	68cf      	ldr	r7, [r1, #12]
 8003f6c:	f104 0318 	add.w	r3, r4, #24
 8003f70:	bb10      	cbnz	r0, 8003fb8 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f72:	6808      	ldr	r0, [r1, #0]
 8003f74:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f7c:	6908      	ldr	r0, [r1, #16]
 8003f7e:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f80:	7d09      	ldrb	r1, [r1, #20]
 8003f82:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f84:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f88:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f8a:	bf08      	it	eq
 8003f8c:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f90:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f92:	bf04      	itt	eq
 8003f94:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8003f98:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f9c:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8003f9e:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003fa0:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003faa:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8003fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fb8:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8003fba:	4338      	orrs	r0, r7
 8003fbc:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8003fc0:	e7da      	b.n	8003f78 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc8:	e7c9      	b.n	8003f5e <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd0:	e7c5      	b.n	8003f5e <HAL_CAN_AddTxMessage+0x28>

08003fd2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fd4:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fd8:	3c01      	subs	r4, #1
 8003fda:	2c01      	cmp	r4, #1
 8003fdc:	d86b      	bhi.n	80040b6 <HAL_CAN_GetRxMessage+0xe4>
 8003fde:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fe0:	b941      	cbnz	r1, 8003ff4 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fe2:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003fe4:	07a4      	lsls	r4, r4, #30
 8003fe6:	d107      	bne.n	8003ff8 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fee:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
  }
}
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003ff4:	6934      	ldr	r4, [r6, #16]
 8003ff6:	e7f5      	b.n	8003fe4 <HAL_CAN_GetRxMessage+0x12>
 8003ff8:	010c      	lsls	r4, r1, #4
 8003ffa:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003ffc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004000:	f007 0704 	and.w	r7, r7, #4
 8004004:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004006:	2f00      	cmp	r7, #0
 8004008:	d14b      	bne.n	80040a2 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800400a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800400e:	0d7f      	lsrs	r7, r7, #21
 8004010:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004012:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004016:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004018:	f007 0702 	and.w	r7, r7, #2
 800401c:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800401e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8004022:	f007 070f 	and.w	r7, r7, #15
 8004026:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004028:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800402c:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004030:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004034:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004036:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004038:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800403a:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 800403e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004040:	6802      	ldr	r2, [r0, #0]
 8004042:	4422      	add	r2, r4
 8004044:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004048:	0a12      	lsrs	r2, r2, #8
 800404a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800404c:	6802      	ldr	r2, [r0, #0]
 800404e:	4422      	add	r2, r4
 8004050:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004054:	0c12      	lsrs	r2, r2, #16
 8004056:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004058:	6802      	ldr	r2, [r0, #0]
 800405a:	4422      	add	r2, r4
 800405c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004060:	0e12      	lsrs	r2, r2, #24
 8004062:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004064:	6802      	ldr	r2, [r0, #0]
 8004066:	4422      	add	r2, r4
 8004068:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800406c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800406e:	6802      	ldr	r2, [r0, #0]
 8004070:	4422      	add	r2, r4
 8004072:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004076:	0a12      	lsrs	r2, r2, #8
 8004078:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800407a:	6802      	ldr	r2, [r0, #0]
 800407c:	4422      	add	r2, r4
 800407e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004082:	0c12      	lsrs	r2, r2, #16
 8004084:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004086:	6802      	ldr	r2, [r0, #0]
 8004088:	4414      	add	r4, r2
 800408a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800408e:	0e12      	lsrs	r2, r2, #24
 8004090:	71da      	strb	r2, [r3, #7]
 8004092:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004094:	b951      	cbnz	r1, 80040ac <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	f042 0220 	orr.w	r2, r2, #32
 800409c:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800409e:	2000      	movs	r0, #0
 80040a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80040a2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80040a6:	08ff      	lsrs	r7, r7, #3
 80040a8:	6057      	str	r7, [r2, #4]
 80040aa:	e7b2      	b.n	8004012 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	f042 0220 	orr.w	r2, r2, #32
 80040b2:	611a      	str	r2, [r3, #16]
 80040b4:	e7f3      	b.n	800409e <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040bc:	e797      	b.n	8003fee <HAL_CAN_GetRxMessage+0x1c>

080040be <HAL_CAN_TxMailbox0CompleteCallback>:
 80040be:	4770      	bx	lr

080040c0 <HAL_CAN_TxMailbox1CompleteCallback>:
 80040c0:	4770      	bx	lr

080040c2 <HAL_CAN_TxMailbox2CompleteCallback>:
 80040c2:	4770      	bx	lr

080040c4 <HAL_CAN_TxMailbox0AbortCallback>:
 80040c4:	4770      	bx	lr

080040c6 <HAL_CAN_TxMailbox1AbortCallback>:
 80040c6:	4770      	bx	lr

080040c8 <HAL_CAN_TxMailbox2AbortCallback>:
 80040c8:	4770      	bx	lr

080040ca <HAL_CAN_RxFifo0MsgPendingCallback>:
 80040ca:	4770      	bx	lr

080040cc <HAL_CAN_RxFifo0FullCallback>:
 80040cc:	4770      	bx	lr

080040ce <HAL_CAN_RxFifo1FullCallback>:
 80040ce:	4770      	bx	lr

080040d0 <HAL_CAN_SleepCallback>:
 80040d0:	4770      	bx	lr

080040d2 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80040d2:	4770      	bx	lr

080040d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80040d4:	4770      	bx	lr

080040d6 <HAL_CAN_IRQHandler>:
{
 80040d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80040da:	6803      	ldr	r3, [r0, #0]
{
 80040dc:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80040de:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80040e0:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040e4:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80040e8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80040ea:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040ee:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040f2:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040f6:	d022      	beq.n	800413e <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040f8:	f017 0401 	ands.w	r4, r7, #1
 80040fc:	d007      	beq.n	800410e <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040fe:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004100:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004102:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004104:	f140 80a3 	bpl.w	800424e <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004108:	f7ff ffd9 	bl	80040be <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800410c:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800410e:	05fb      	lsls	r3, r7, #23
 8004110:	d509      	bpl.n	8004126 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004116:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004118:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800411a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800411c:	f140 80a5 	bpl.w	800426a <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004120:	4628      	mov	r0, r5
 8004122:	f7ff ffcd 	bl	80040c0 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004126:	03fb      	lsls	r3, r7, #15
 8004128:	d509      	bpl.n	800413e <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800412a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800412e:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004130:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004132:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004134:	f140 80a7 	bpl.w	8004286 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004138:	4628      	mov	r0, r5
 800413a:	f7ff ffc2 	bl	80040c2 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800413e:	0733      	lsls	r3, r6, #28
 8004140:	d507      	bpl.n	8004152 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004142:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004146:	bf1f      	itttt	ne
 8004148:	2210      	movne	r2, #16
 800414a:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800414c:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004150:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004152:	0777      	lsls	r7, r6, #29
 8004154:	d508      	bpl.n	8004168 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004156:	f01b 0f08 	tst.w	fp, #8
 800415a:	d005      	beq.n	8004168 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800415c:	2208      	movs	r2, #8
 800415e:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004160:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004162:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004164:	f7ff ffb2 	bl	80040cc <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004168:	07b0      	lsls	r0, r6, #30
 800416a:	d506      	bpl.n	800417a <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	0799      	lsls	r1, r3, #30
 8004172:	d002      	beq.n	800417a <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004174:	4628      	mov	r0, r5
 8004176:	f7ff ffa8 	bl	80040ca <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800417a:	0672      	lsls	r2, r6, #25
 800417c:	d507      	bpl.n	800418e <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800417e:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004182:	bf1f      	itttt	ne
 8004184:	2210      	movne	r2, #16
 8004186:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004188:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800418c:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800418e:	06b3      	lsls	r3, r6, #26
 8004190:	d508      	bpl.n	80041a4 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004192:	f01a 0f08 	tst.w	sl, #8
 8004196:	d005      	beq.n	80041a4 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004198:	2208      	movs	r2, #8
 800419a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800419c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800419e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80041a0:	f7ff ff95 	bl	80040ce <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80041a4:	06f7      	lsls	r7, r6, #27
 80041a6:	d506      	bpl.n	80041b6 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	0798      	lsls	r0, r3, #30
 80041ae:	d002      	beq.n	80041b6 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80041b0:	4628      	mov	r0, r5
 80041b2:	f7fd ff7b 	bl	80020ac <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80041b6:	03b1      	lsls	r1, r6, #14
 80041b8:	d508      	bpl.n	80041cc <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80041ba:	f019 0f10 	tst.w	r9, #16
 80041be:	d005      	beq.n	80041cc <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80041c0:	2210      	movs	r2, #16
 80041c2:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 80041c4:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80041c6:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80041c8:	f7ff ff82 	bl	80040d0 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80041cc:	03f2      	lsls	r2, r6, #15
 80041ce:	d508      	bpl.n	80041e2 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80041d0:	f019 0f08 	tst.w	r9, #8
 80041d4:	d005      	beq.n	80041e2 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041d6:	2208      	movs	r2, #8
 80041d8:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041da:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041dc:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041de:	f7ff ff78 	bl	80040d2 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80041e2:	0433      	lsls	r3, r6, #16
 80041e4:	d52a      	bpl.n	800423c <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80041e6:	f019 0f04 	tst.w	r9, #4
 80041ea:	682a      	ldr	r2, [r5, #0]
 80041ec:	d024      	beq.n	8004238 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041ee:	05f7      	lsls	r7, r6, #23
 80041f0:	d504      	bpl.n	80041fc <HAL_CAN_IRQHandler+0x126>
 80041f2:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80041f6:	bf18      	it	ne
 80041f8:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041fc:	05b0      	lsls	r0, r6, #22
 80041fe:	d504      	bpl.n	800420a <HAL_CAN_IRQHandler+0x134>
 8004200:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8004204:	bf18      	it	ne
 8004206:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800420a:	0571      	lsls	r1, r6, #21
 800420c:	d504      	bpl.n	8004218 <HAL_CAN_IRQHandler+0x142>
 800420e:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8004212:	bf18      	it	ne
 8004214:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004218:	0533      	lsls	r3, r6, #20
 800421a:	d50d      	bpl.n	8004238 <HAL_CAN_IRQHandler+0x162>
 800421c:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8004220:	d00a      	beq.n	8004238 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8004222:	2b30      	cmp	r3, #48	; 0x30
 8004224:	d04c      	beq.n	80042c0 <HAL_CAN_IRQHandler+0x1ea>
 8004226:	d83c      	bhi.n	80042a2 <HAL_CAN_IRQHandler+0x1cc>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d043      	beq.n	80042b4 <HAL_CAN_IRQHandler+0x1de>
 800422c:	2b20      	cmp	r3, #32
 800422e:	d044      	beq.n	80042ba <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004230:	6993      	ldr	r3, [r2, #24]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004238:	2304      	movs	r3, #4
 800423a:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800423c:	b12c      	cbz	r4, 800424a <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 800423e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004240:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8004242:	431c      	orrs	r4, r3
 8004244:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004246:	f7ff ff45 	bl	80040d4 <HAL_CAN_ErrorCallback>
 800424a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800424e:	077a      	lsls	r2, r7, #29
 8004250:	d405      	bmi.n	800425e <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004252:	f017 0408 	ands.w	r4, r7, #8
 8004256:	d105      	bne.n	8004264 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004258:	f7ff ff34 	bl	80040c4 <HAL_CAN_TxMailbox0AbortCallback>
 800425c:	e757      	b.n	800410e <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800425e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004262:	e754      	b.n	800410e <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004264:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8004268:	e751      	b.n	800410e <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800426a:	0579      	lsls	r1, r7, #21
 800426c:	d502      	bpl.n	8004274 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800426e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8004272:	e758      	b.n	8004126 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004274:	053a      	lsls	r2, r7, #20
 8004276:	d502      	bpl.n	800427e <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004278:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800427c:	e753      	b.n	8004126 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800427e:	4628      	mov	r0, r5
 8004280:	f7ff ff21 	bl	80040c6 <HAL_CAN_TxMailbox1AbortCallback>
 8004284:	e74f      	b.n	8004126 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004286:	0379      	lsls	r1, r7, #13
 8004288:	d502      	bpl.n	8004290 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800428a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800428e:	e756      	b.n	800413e <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004290:	033a      	lsls	r2, r7, #12
 8004292:	d502      	bpl.n	800429a <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004294:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8004298:	e751      	b.n	800413e <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800429a:	4628      	mov	r0, r5
 800429c:	f7ff ff14 	bl	80040c8 <HAL_CAN_TxMailbox2AbortCallback>
 80042a0:	e74d      	b.n	800413e <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 80042a2:	2b50      	cmp	r3, #80	; 0x50
 80042a4:	d00f      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x1f0>
 80042a6:	2b60      	cmp	r3, #96	; 0x60
 80042a8:	d010      	beq.n	80042cc <HAL_CAN_IRQHandler+0x1f6>
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d1c0      	bne.n	8004230 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 80042ae:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80042b2:	e7bd      	b.n	8004230 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 80042b4:	f044 0408 	orr.w	r4, r4, #8
            break;
 80042b8:	e7ba      	b.n	8004230 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80042ba:	f044 0410 	orr.w	r4, r4, #16
            break;
 80042be:	e7b7      	b.n	8004230 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80042c0:	f044 0420 	orr.w	r4, r4, #32
            break;
 80042c4:	e7b4      	b.n	8004230 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 80042c6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80042ca:	e7b1      	b.n	8004230 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80042cc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80042d0:	e7ae      	b.n	8004230 <HAL_CAN_IRQHandler+0x15a>
	...

080042d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d4:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80042ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80042f0:	60d3      	str	r3, [r2, #12]
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f8:	4b17      	ldr	r3, [pc, #92]	; (8004358 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042fa:	b530      	push	{r4, r5, lr}
 80042fc:	68dc      	ldr	r4, [r3, #12]
 80042fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004302:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004306:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004308:	2b04      	cmp	r3, #4
 800430a:	bf28      	it	cs
 800430c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800430e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004310:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004314:	bf98      	it	ls
 8004316:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	fa05 f303 	lsl.w	r3, r5, r3
 800431c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004320:	bf88      	it	hi
 8004322:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004324:	4019      	ands	r1, r3
 8004326:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	fa05 f404 	lsl.w	r4, r5, r4
 800432c:	3c01      	subs	r4, #1
 800432e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004330:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004332:	ea42 0201 	orr.w	r2, r2, r1
 8004336:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433a:	bfa9      	itett	ge
 800433c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004340:	4b06      	ldrlt	r3, [pc, #24]	; (800435c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004342:	b2d2      	uxtbge	r2, r2
 8004344:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004348:	bfbb      	ittet	lt
 800434a:	f000 000f 	andlt.w	r0, r0, #15
 800434e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004350:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004354:	541a      	strblt	r2, [r3, r0]
 8004356:	bd30      	pop	{r4, r5, pc}
 8004358:	e000ed00 	.word	0xe000ed00
 800435c:	e000ed14 	.word	0xe000ed14

08004360 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004360:	2800      	cmp	r0, #0
 8004362:	db08      	blt.n	8004376 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004364:	2301      	movs	r3, #1
 8004366:	0942      	lsrs	r2, r0, #5
 8004368:	f000 001f 	and.w	r0, r0, #31
 800436c:	fa03 f000 	lsl.w	r0, r3, r0
 8004370:	4b01      	ldr	r3, [pc, #4]	; (8004378 <HAL_NVIC_EnableIRQ+0x18>)
 8004372:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004376:	4770      	bx	lr
 8004378:	e000e100 	.word	0xe000e100

0800437c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800437c:	3801      	subs	r0, #1
 800437e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004382:	d20a      	bcs.n	800439a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004384:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004388:	4a06      	ldr	r2, [pc, #24]	; (80043a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800438c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004390:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004392:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004394:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800439a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000e010 	.word	0xe000e010
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043a8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d032      	beq.n	8004414 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043ae:	6801      	ldr	r1, [r0, #0]
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_DMA_Init+0x70>)
 80043b2:	2414      	movs	r4, #20
 80043b4:	4299      	cmp	r1, r3
 80043b6:	d825      	bhi.n	8004404 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 80043ba:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043be:	440a      	add	r2, r1
 80043c0:	fbb2 f2f4 	udiv	r2, r2, r4
 80043c4:	0092      	lsls	r2, r2, #2
 80043c6:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043c8:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 80043ca:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80043cc:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80043ce:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80043d0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d2:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043d4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d8:	4323      	orrs	r3, r4
 80043da:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043dc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e2:	6944      	ldr	r4, [r0, #20]
 80043e4:	4323      	orrs	r3, r4
 80043e6:	6984      	ldr	r4, [r0, #24]
 80043e8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ea:	69c4      	ldr	r4, [r0, #28]
 80043ec:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80043ee:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043f0:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043f2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043f4:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80043f6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fa:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043fc:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8004400:	4618      	mov	r0, r3
 8004402:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_DMA_Init+0x78>)
 8004406:	440b      	add	r3, r1
 8004408:	fbb3 f3f4 	udiv	r3, r3, r4
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_DMA_Init+0x7c>)
 8004412:	e7d9      	b.n	80043c8 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8004414:	2001      	movs	r0, #1
}
 8004416:	bd10      	pop	{r4, pc}
 8004418:	40020407 	.word	0x40020407
 800441c:	bffdfff8 	.word	0xbffdfff8
 8004420:	bffdfbf8 	.word	0xbffdfbf8
 8004424:	40020400 	.word	0x40020400

08004428 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800442a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800442e:	2c01      	cmp	r4, #1
 8004430:	d035      	beq.n	800449e <HAL_DMA_Start_IT+0x76>
 8004432:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004434:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8004438:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800443c:	42a5      	cmp	r5, r4
 800443e:	f04f 0600 	mov.w	r6, #0
 8004442:	f04f 0402 	mov.w	r4, #2
 8004446:	d128      	bne.n	800449a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004448:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800444c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800444e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8004450:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004452:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8004454:	f026 0601 	bic.w	r6, r6, #1
 8004458:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800445a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800445c:	40bd      	lsls	r5, r7
 800445e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004460:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004462:	6843      	ldr	r3, [r0, #4]
 8004464:	6805      	ldr	r5, [r0, #0]
 8004466:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8004468:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800446a:	bf0b      	itete	eq
 800446c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800446e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004470:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004472:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8004474:	b14b      	cbz	r3, 800448a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800447c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800447e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004480:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	602b      	str	r3, [r5, #0]
 8004488:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f043 030a 	orr.w	r3, r3, #10
 8004498:	e7f0      	b.n	800447c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800449a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800449e:	2002      	movs	r0, #2
}
 80044a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080044a4 <HAL_DMA_IRQHandler>:
{
 80044a4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80044a6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044a8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80044aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044ac:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80044ae:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80044b0:	4095      	lsls	r5, r2
 80044b2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80044b4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80044b6:	d055      	beq.n	8004564 <HAL_DMA_IRQHandler+0xc0>
 80044b8:	074d      	lsls	r5, r1, #29
 80044ba:	d553      	bpl.n	8004564 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044c0:	bf5e      	ittt	pl
 80044c2:	681a      	ldrpl	r2, [r3, #0]
 80044c4:	f022 0204 	bicpl.w	r2, r2, #4
 80044c8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80044ca:	4a60      	ldr	r2, [pc, #384]	; (800464c <HAL_DMA_IRQHandler+0x1a8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d91f      	bls.n	8004510 <HAL_DMA_IRQHandler+0x6c>
 80044d0:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d014      	beq.n	8004502 <HAL_DMA_IRQHandler+0x5e>
 80044d8:	3214      	adds	r2, #20
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_DMA_IRQHandler+0x62>
 80044de:	3214      	adds	r2, #20
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d012      	beq.n	800450a <HAL_DMA_IRQHandler+0x66>
 80044e4:	3214      	adds	r2, #20
 80044e6:	4293      	cmp	r3, r2
 80044e8:	bf0c      	ite	eq
 80044ea:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80044ee:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80044f2:	4a57      	ldr	r2, [pc, #348]	; (8004650 <HAL_DMA_IRQHandler+0x1ac>)
 80044f4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80044f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80a5 	beq.w	8004648 <HAL_DMA_IRQHandler+0x1a4>
}
 80044fe:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004500:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004502:	2304      	movs	r3, #4
 8004504:	e7f5      	b.n	80044f2 <HAL_DMA_IRQHandler+0x4e>
 8004506:	2340      	movs	r3, #64	; 0x40
 8004508:	e7f3      	b.n	80044f2 <HAL_DMA_IRQHandler+0x4e>
 800450a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800450e:	e7f0      	b.n	80044f2 <HAL_DMA_IRQHandler+0x4e>
 8004510:	4950      	ldr	r1, [pc, #320]	; (8004654 <HAL_DMA_IRQHandler+0x1b0>)
 8004512:	428b      	cmp	r3, r1
 8004514:	d016      	beq.n	8004544 <HAL_DMA_IRQHandler+0xa0>
 8004516:	3114      	adds	r1, #20
 8004518:	428b      	cmp	r3, r1
 800451a:	d015      	beq.n	8004548 <HAL_DMA_IRQHandler+0xa4>
 800451c:	3114      	adds	r1, #20
 800451e:	428b      	cmp	r3, r1
 8004520:	d014      	beq.n	800454c <HAL_DMA_IRQHandler+0xa8>
 8004522:	3114      	adds	r1, #20
 8004524:	428b      	cmp	r3, r1
 8004526:	d014      	beq.n	8004552 <HAL_DMA_IRQHandler+0xae>
 8004528:	3114      	adds	r1, #20
 800452a:	428b      	cmp	r3, r1
 800452c:	d014      	beq.n	8004558 <HAL_DMA_IRQHandler+0xb4>
 800452e:	3114      	adds	r1, #20
 8004530:	428b      	cmp	r3, r1
 8004532:	d014      	beq.n	800455e <HAL_DMA_IRQHandler+0xba>
 8004534:	4293      	cmp	r3, r2
 8004536:	bf14      	ite	ne
 8004538:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800453c:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8004540:	4a45      	ldr	r2, [pc, #276]	; (8004658 <HAL_DMA_IRQHandler+0x1b4>)
 8004542:	e7d7      	b.n	80044f4 <HAL_DMA_IRQHandler+0x50>
 8004544:	2304      	movs	r3, #4
 8004546:	e7fb      	b.n	8004540 <HAL_DMA_IRQHandler+0x9c>
 8004548:	2340      	movs	r3, #64	; 0x40
 800454a:	e7f9      	b.n	8004540 <HAL_DMA_IRQHandler+0x9c>
 800454c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004550:	e7f6      	b.n	8004540 <HAL_DMA_IRQHandler+0x9c>
 8004552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004556:	e7f3      	b.n	8004540 <HAL_DMA_IRQHandler+0x9c>
 8004558:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800455c:	e7f0      	b.n	8004540 <HAL_DMA_IRQHandler+0x9c>
 800455e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004562:	e7ed      	b.n	8004540 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004564:	2502      	movs	r5, #2
 8004566:	4095      	lsls	r5, r2
 8004568:	4225      	tst	r5, r4
 800456a:	d057      	beq.n	800461c <HAL_DMA_IRQHandler+0x178>
 800456c:	078d      	lsls	r5, r1, #30
 800456e:	d555      	bpl.n	800461c <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	0694      	lsls	r4, r2, #26
 8004574:	d406      	bmi.n	8004584 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	f022 020a 	bic.w	r2, r2, #10
 800457c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800457e:	2201      	movs	r2, #1
 8004580:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004584:	4a31      	ldr	r2, [pc, #196]	; (800464c <HAL_DMA_IRQHandler+0x1a8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d91e      	bls.n	80045c8 <HAL_DMA_IRQHandler+0x124>
 800458a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_DMA_IRQHandler+0x116>
 8004592:	3214      	adds	r2, #20
 8004594:	4293      	cmp	r3, r2
 8004596:	d012      	beq.n	80045be <HAL_DMA_IRQHandler+0x11a>
 8004598:	3214      	adds	r2, #20
 800459a:	4293      	cmp	r3, r2
 800459c:	d011      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x11e>
 800459e:	3214      	adds	r2, #20
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bf0c      	ite	eq
 80045a4:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80045a8:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80045ac:	4a28      	ldr	r2, [pc, #160]	; (8004650 <HAL_DMA_IRQHandler+0x1ac>)
 80045ae:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80045b0:	2300      	movs	r3, #0
 80045b2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80045b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045b8:	e79e      	b.n	80044f8 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80045ba:	2302      	movs	r3, #2
 80045bc:	e7f6      	b.n	80045ac <HAL_DMA_IRQHandler+0x108>
 80045be:	2320      	movs	r3, #32
 80045c0:	e7f4      	b.n	80045ac <HAL_DMA_IRQHandler+0x108>
 80045c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c6:	e7f1      	b.n	80045ac <HAL_DMA_IRQHandler+0x108>
 80045c8:	4922      	ldr	r1, [pc, #136]	; (8004654 <HAL_DMA_IRQHandler+0x1b0>)
 80045ca:	428b      	cmp	r3, r1
 80045cc:	d016      	beq.n	80045fc <HAL_DMA_IRQHandler+0x158>
 80045ce:	3114      	adds	r1, #20
 80045d0:	428b      	cmp	r3, r1
 80045d2:	d015      	beq.n	8004600 <HAL_DMA_IRQHandler+0x15c>
 80045d4:	3114      	adds	r1, #20
 80045d6:	428b      	cmp	r3, r1
 80045d8:	d014      	beq.n	8004604 <HAL_DMA_IRQHandler+0x160>
 80045da:	3114      	adds	r1, #20
 80045dc:	428b      	cmp	r3, r1
 80045de:	d014      	beq.n	800460a <HAL_DMA_IRQHandler+0x166>
 80045e0:	3114      	adds	r1, #20
 80045e2:	428b      	cmp	r3, r1
 80045e4:	d014      	beq.n	8004610 <HAL_DMA_IRQHandler+0x16c>
 80045e6:	3114      	adds	r1, #20
 80045e8:	428b      	cmp	r3, r1
 80045ea:	d014      	beq.n	8004616 <HAL_DMA_IRQHandler+0x172>
 80045ec:	4293      	cmp	r3, r2
 80045ee:	bf14      	ite	ne
 80045f0:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80045f4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80045f8:	4a17      	ldr	r2, [pc, #92]	; (8004658 <HAL_DMA_IRQHandler+0x1b4>)
 80045fa:	e7d8      	b.n	80045ae <HAL_DMA_IRQHandler+0x10a>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e7fb      	b.n	80045f8 <HAL_DMA_IRQHandler+0x154>
 8004600:	2320      	movs	r3, #32
 8004602:	e7f9      	b.n	80045f8 <HAL_DMA_IRQHandler+0x154>
 8004604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004608:	e7f6      	b.n	80045f8 <HAL_DMA_IRQHandler+0x154>
 800460a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800460e:	e7f3      	b.n	80045f8 <HAL_DMA_IRQHandler+0x154>
 8004610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004614:	e7f0      	b.n	80045f8 <HAL_DMA_IRQHandler+0x154>
 8004616:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800461a:	e7ed      	b.n	80045f8 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800461c:	2508      	movs	r5, #8
 800461e:	4095      	lsls	r5, r2
 8004620:	4225      	tst	r5, r4
 8004622:	d011      	beq.n	8004648 <HAL_DMA_IRQHandler+0x1a4>
 8004624:	0709      	lsls	r1, r1, #28
 8004626:	d50f      	bpl.n	8004648 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	f021 010e 	bic.w	r1, r1, #14
 800462e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004630:	2301      	movs	r3, #1
 8004632:	fa03 f202 	lsl.w	r2, r3, r2
 8004636:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004638:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800463a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800463e:	2300      	movs	r3, #0
 8004640:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8004644:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004646:	e757      	b.n	80044f8 <HAL_DMA_IRQHandler+0x54>
}
 8004648:	bc70      	pop	{r4, r5, r6}
 800464a:	4770      	bx	lr
 800464c:	40020080 	.word	0x40020080
 8004650:	40020400 	.word	0x40020400
 8004654:	40020008 	.word	0x40020008
 8004658:	40020000 	.word	0x40020000

0800465c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800465c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004660:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8004662:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004664:	4f6c      	ldr	r7, [pc, #432]	; (8004818 <HAL_GPIO_Init+0x1bc>)
 8004666:	4b6d      	ldr	r3, [pc, #436]	; (800481c <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004668:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8004824 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 800466c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8004828 <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004670:	680a      	ldr	r2, [r1, #0]
 8004672:	fa32 f506 	lsrs.w	r5, r2, r6
 8004676:	d102      	bne.n	800467e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8004678:	b003      	add	sp, #12
 800467a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800467e:	f04f 0801 	mov.w	r8, #1
 8004682:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004686:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800468a:	4590      	cmp	r8, r2
 800468c:	f040 8084 	bne.w	8004798 <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8004690:	684d      	ldr	r5, [r1, #4]
 8004692:	2d12      	cmp	r5, #18
 8004694:	f000 80b1 	beq.w	80047fa <HAL_GPIO_Init+0x19e>
 8004698:	f200 8087 	bhi.w	80047aa <HAL_GPIO_Init+0x14e>
 800469c:	2d02      	cmp	r5, #2
 800469e:	f000 80a9 	beq.w	80047f4 <HAL_GPIO_Init+0x198>
 80046a2:	d87b      	bhi.n	800479c <HAL_GPIO_Init+0x140>
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	f000 808c 	beq.w	80047c2 <HAL_GPIO_Init+0x166>
 80046aa:	2d01      	cmp	r5, #1
 80046ac:	f000 80a0 	beq.w	80047f0 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046b0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046b4:	2aff      	cmp	r2, #255	; 0xff
 80046b6:	bf93      	iteet	ls
 80046b8:	4682      	movls	sl, r0
 80046ba:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80046be:	3d08      	subhi	r5, #8
 80046c0:	f8d0 b000 	ldrls.w	fp, [r0]
 80046c4:	bf92      	itee	ls
 80046c6:	00b5      	lslls	r5, r6, #2
 80046c8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80046cc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046ce:	fa09 f805 	lsl.w	r8, r9, r5
 80046d2:	ea2b 0808 	bic.w	r8, fp, r8
 80046d6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046da:	bf88      	it	hi
 80046dc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046e0:	ea48 0505 	orr.w	r5, r8, r5
 80046e4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046e8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80046ec:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80046f0:	d052      	beq.n	8004798 <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046f2:	69bd      	ldr	r5, [r7, #24]
 80046f4:	f026 0803 	bic.w	r8, r6, #3
 80046f8:	f045 0501 	orr.w	r5, r5, #1
 80046fc:	61bd      	str	r5, [r7, #24]
 80046fe:	69bd      	ldr	r5, [r7, #24]
 8004700:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8004704:	f005 0501 	and.w	r5, r5, #1
 8004708:	9501      	str	r5, [sp, #4]
 800470a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800470e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004712:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004714:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004718:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800471c:	fa09 f90b 	lsl.w	r9, r9, fp
 8004720:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004724:	4d3e      	ldr	r5, [pc, #248]	; (8004820 <HAL_GPIO_Init+0x1c4>)
 8004726:	42a8      	cmp	r0, r5
 8004728:	d06c      	beq.n	8004804 <HAL_GPIO_Init+0x1a8>
 800472a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800472e:	42a8      	cmp	r0, r5
 8004730:	d06a      	beq.n	8004808 <HAL_GPIO_Init+0x1ac>
 8004732:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004736:	42a8      	cmp	r0, r5
 8004738:	d068      	beq.n	800480c <HAL_GPIO_Init+0x1b0>
 800473a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800473e:	42a8      	cmp	r0, r5
 8004740:	d066      	beq.n	8004810 <HAL_GPIO_Init+0x1b4>
 8004742:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004746:	42a8      	cmp	r0, r5
 8004748:	d064      	beq.n	8004814 <HAL_GPIO_Init+0x1b8>
 800474a:	4570      	cmp	r0, lr
 800474c:	bf0c      	ite	eq
 800474e:	2505      	moveq	r5, #5
 8004750:	2506      	movne	r5, #6
 8004752:	fa05 f50b 	lsl.w	r5, r5, fp
 8004756:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800475a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800475e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004760:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004764:	bf14      	ite	ne
 8004766:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004768:	4395      	biceq	r5, r2
 800476a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800476c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800476e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004772:	bf14      	ite	ne
 8004774:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004776:	4395      	biceq	r5, r2
 8004778:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800477a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800477c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004780:	bf14      	ite	ne
 8004782:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004784:	4395      	biceq	r5, r2
 8004786:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004788:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800478a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800478e:	bf14      	ite	ne
 8004790:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004792:	ea25 0202 	biceq.w	r2, r5, r2
 8004796:	60da      	str	r2, [r3, #12]
	position++;
 8004798:	3601      	adds	r6, #1
 800479a:	e769      	b.n	8004670 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800479c:	2d03      	cmp	r5, #3
 800479e:	d025      	beq.n	80047ec <HAL_GPIO_Init+0x190>
 80047a0:	2d11      	cmp	r5, #17
 80047a2:	d185      	bne.n	80046b0 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047a4:	68cc      	ldr	r4, [r1, #12]
 80047a6:	3404      	adds	r4, #4
          break;
 80047a8:	e782      	b.n	80046b0 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80047aa:	4565      	cmp	r5, ip
 80047ac:	d009      	beq.n	80047c2 <HAL_GPIO_Init+0x166>
 80047ae:	d812      	bhi.n	80047d6 <HAL_GPIO_Init+0x17a>
 80047b0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800482c <HAL_GPIO_Init+0x1d0>
 80047b4:	454d      	cmp	r5, r9
 80047b6:	d004      	beq.n	80047c2 <HAL_GPIO_Init+0x166>
 80047b8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80047bc:	454d      	cmp	r5, r9
 80047be:	f47f af77 	bne.w	80046b0 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047c2:	688c      	ldr	r4, [r1, #8]
 80047c4:	b1e4      	cbz	r4, 8004800 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047c6:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80047c8:	bf0c      	ite	eq
 80047ca:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80047ce:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047d2:	2408      	movs	r4, #8
 80047d4:	e76c      	b.n	80046b0 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80047d6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004830 <HAL_GPIO_Init+0x1d4>
 80047da:	454d      	cmp	r5, r9
 80047dc:	d0f1      	beq.n	80047c2 <HAL_GPIO_Init+0x166>
 80047de:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80047e2:	454d      	cmp	r5, r9
 80047e4:	d0ed      	beq.n	80047c2 <HAL_GPIO_Init+0x166>
 80047e6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80047ea:	e7e7      	b.n	80047bc <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047ec:	2400      	movs	r4, #0
 80047ee:	e75f      	b.n	80046b0 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047f0:	68cc      	ldr	r4, [r1, #12]
          break;
 80047f2:	e75d      	b.n	80046b0 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047f4:	68cc      	ldr	r4, [r1, #12]
 80047f6:	3408      	adds	r4, #8
          break;
 80047f8:	e75a      	b.n	80046b0 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047fa:	68cc      	ldr	r4, [r1, #12]
 80047fc:	340c      	adds	r4, #12
          break;
 80047fe:	e757      	b.n	80046b0 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004800:	2404      	movs	r4, #4
 8004802:	e755      	b.n	80046b0 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004804:	2500      	movs	r5, #0
 8004806:	e7a4      	b.n	8004752 <HAL_GPIO_Init+0xf6>
 8004808:	2501      	movs	r5, #1
 800480a:	e7a2      	b.n	8004752 <HAL_GPIO_Init+0xf6>
 800480c:	2502      	movs	r5, #2
 800480e:	e7a0      	b.n	8004752 <HAL_GPIO_Init+0xf6>
 8004810:	2503      	movs	r5, #3
 8004812:	e79e      	b.n	8004752 <HAL_GPIO_Init+0xf6>
 8004814:	2504      	movs	r5, #4
 8004816:	e79c      	b.n	8004752 <HAL_GPIO_Init+0xf6>
 8004818:	40021000 	.word	0x40021000
 800481c:	40010400 	.word	0x40010400
 8004820:	40010800 	.word	0x40010800
 8004824:	40011c00 	.word	0x40011c00
 8004828:	10210000 	.word	0x10210000
 800482c:	10110000 	.word	0x10110000
 8004830:	10310000 	.word	0x10310000

08004834 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004834:	b10a      	cbz	r2, 800483a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004836:	6101      	str	r1, [r0, #16]
 8004838:	4770      	bx	lr
 800483a:	0409      	lsls	r1, r1, #16
 800483c:	e7fb      	b.n	8004836 <HAL_GPIO_WritePin+0x2>
	...

08004840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004844:	4605      	mov	r5, r0
 8004846:	b908      	cbnz	r0, 800484c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004848:	2001      	movs	r0, #1
 800484a:	e03c      	b.n	80048c6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484c:	6803      	ldr	r3, [r0, #0]
 800484e:	07db      	lsls	r3, r3, #31
 8004850:	d410      	bmi.n	8004874 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	079f      	lsls	r7, r3, #30
 8004856:	d45d      	bmi.n	8004914 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	0719      	lsls	r1, r3, #28
 800485c:	f100 8094 	bmi.w	8004988 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	075a      	lsls	r2, r3, #29
 8004864:	f100 80be 	bmi.w	80049e4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004868:	69e8      	ldr	r0, [r5, #28]
 800486a:	2800      	cmp	r0, #0
 800486c:	f040 812c 	bne.w	8004ac8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8004870:	2000      	movs	r0, #0
 8004872:	e028      	b.n	80048c6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004874:	4c8f      	ldr	r4, [pc, #572]	; (8004ab4 <HAL_RCC_OscConfig+0x274>)
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b04      	cmp	r3, #4
 800487e:	d007      	beq.n	8004890 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b08      	cmp	r3, #8
 8004888:	d109      	bne.n	800489e <HAL_RCC_OscConfig+0x5e>
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	03de      	lsls	r6, r3, #15
 800488e:	d506      	bpl.n	800489e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	039c      	lsls	r4, r3, #14
 8004894:	d5dd      	bpl.n	8004852 <HAL_RCC_OscConfig+0x12>
 8004896:	686b      	ldr	r3, [r5, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1da      	bne.n	8004852 <HAL_RCC_OscConfig+0x12>
 800489c:	e7d4      	b.n	8004848 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489e:	686b      	ldr	r3, [r5, #4]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d112      	bne.n	80048cc <HAL_RCC_OscConfig+0x8c>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80048ae:	f7fe ffc1 	bl	8003834 <HAL_GetTick>
 80048b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	0398      	lsls	r0, r3, #14
 80048b8:	d4cb      	bmi.n	8004852 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ba:	f7fe ffbb 	bl	8003834 <HAL_GetTick>
 80048be:	1b80      	subs	r0, r0, r6
 80048c0:	2864      	cmp	r0, #100	; 0x64
 80048c2:	d9f7      	bls.n	80048b4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80048c4:	2003      	movs	r0, #3
}
 80048c6:	b002      	add	sp, #8
 80048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048cc:	b99b      	cbnz	r3, 80048f6 <HAL_RCC_OscConfig+0xb6>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80048de:	f7fe ffa9 	bl	8003834 <HAL_GetTick>
 80048e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	0399      	lsls	r1, r3, #14
 80048e8:	d5b3      	bpl.n	8004852 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ea:	f7fe ffa3 	bl	8003834 <HAL_GetTick>
 80048ee:	1b80      	subs	r0, r0, r6
 80048f0:	2864      	cmp	r0, #100	; 0x64
 80048f2:	d9f7      	bls.n	80048e4 <HAL_RCC_OscConfig+0xa4>
 80048f4:	e7e6      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	d103      	bne.n	8004906 <HAL_RCC_OscConfig+0xc6>
 80048fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004902:	6023      	str	r3, [r4, #0]
 8004904:	e7cf      	b.n	80048a6 <HAL_RCC_OscConfig+0x66>
 8004906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004912:	e7cb      	b.n	80048ac <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004914:	4c67      	ldr	r4, [pc, #412]	; (8004ab4 <HAL_RCC_OscConfig+0x274>)
 8004916:	6863      	ldr	r3, [r4, #4]
 8004918:	f013 0f0c 	tst.w	r3, #12
 800491c:	d007      	beq.n	800492e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b08      	cmp	r3, #8
 8004926:	d110      	bne.n	800494a <HAL_RCC_OscConfig+0x10a>
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	03da      	lsls	r2, r3, #15
 800492c:	d40d      	bmi.n	800494a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	079b      	lsls	r3, r3, #30
 8004932:	d502      	bpl.n	800493a <HAL_RCC_OscConfig+0xfa>
 8004934:	692b      	ldr	r3, [r5, #16]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d186      	bne.n	8004848 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	696a      	ldr	r2, [r5, #20]
 800493e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004942:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004946:	6023      	str	r3, [r4, #0]
 8004948:	e786      	b.n	8004858 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800494a:	692a      	ldr	r2, [r5, #16]
 800494c:	4b5a      	ldr	r3, [pc, #360]	; (8004ab8 <HAL_RCC_OscConfig+0x278>)
 800494e:	b16a      	cbz	r2, 800496c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8004950:	2201      	movs	r2, #1
 8004952:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004954:	f7fe ff6e 	bl	8003834 <HAL_GetTick>
 8004958:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	079f      	lsls	r7, r3, #30
 800495e:	d4ec      	bmi.n	800493a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004960:	f7fe ff68 	bl	8003834 <HAL_GetTick>
 8004964:	1b80      	subs	r0, r0, r6
 8004966:	2802      	cmp	r0, #2
 8004968:	d9f7      	bls.n	800495a <HAL_RCC_OscConfig+0x11a>
 800496a:	e7ab      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800496c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800496e:	f7fe ff61 	bl	8003834 <HAL_GetTick>
 8004972:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	0798      	lsls	r0, r3, #30
 8004978:	f57f af6e 	bpl.w	8004858 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fe ff5a 	bl	8003834 <HAL_GetTick>
 8004980:	1b80      	subs	r0, r0, r6
 8004982:	2802      	cmp	r0, #2
 8004984:	d9f6      	bls.n	8004974 <HAL_RCC_OscConfig+0x134>
 8004986:	e79d      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004988:	69aa      	ldr	r2, [r5, #24]
 800498a:	4c4a      	ldr	r4, [pc, #296]	; (8004ab4 <HAL_RCC_OscConfig+0x274>)
 800498c:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 800498e:	b1da      	cbz	r2, 80049c8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004994:	f7fe ff4e 	bl	8003834 <HAL_GetTick>
 8004998:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800499c:	079b      	lsls	r3, r3, #30
 800499e:	d50d      	bpl.n	80049bc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049a0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80049a4:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <HAL_RCC_OscConfig+0x280>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ac:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80049ae:	bf00      	nop
  }
  while (Delay --);
 80049b0:	9b01      	ldr	r3, [sp, #4]
 80049b2:	1e5a      	subs	r2, r3, #1
 80049b4:	9201      	str	r2, [sp, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f9      	bne.n	80049ae <HAL_RCC_OscConfig+0x16e>
 80049ba:	e751      	b.n	8004860 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fe ff3a 	bl	8003834 <HAL_GetTick>
 80049c0:	1b80      	subs	r0, r0, r6
 80049c2:	2802      	cmp	r0, #2
 80049c4:	d9e9      	bls.n	800499a <HAL_RCC_OscConfig+0x15a>
 80049c6:	e77d      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80049c8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80049ca:	f7fe ff33 	bl	8003834 <HAL_GetTick>
 80049ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d2:	079f      	lsls	r7, r3, #30
 80049d4:	f57f af44 	bpl.w	8004860 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fe ff2c 	bl	8003834 <HAL_GetTick>
 80049dc:	1b80      	subs	r0, r0, r6
 80049de:	2802      	cmp	r0, #2
 80049e0:	d9f6      	bls.n	80049d0 <HAL_RCC_OscConfig+0x190>
 80049e2:	e76f      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e4:	4c33      	ldr	r4, [pc, #204]	; (8004ab4 <HAL_RCC_OscConfig+0x274>)
 80049e6:	69e3      	ldr	r3, [r4, #28]
 80049e8:	00d8      	lsls	r0, r3, #3
 80049ea:	d424      	bmi.n	8004a36 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80049ec:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	69e3      	ldr	r3, [r4, #28]
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f4:	61e3      	str	r3, [r4, #28]
 80049f6:	69e3      	ldr	r3, [r4, #28]
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	4e30      	ldr	r6, [pc, #192]	; (8004ac4 <HAL_RCC_OscConfig+0x284>)
 8004a02:	6833      	ldr	r3, [r6, #0]
 8004a04:	05d9      	lsls	r1, r3, #23
 8004a06:	d518      	bpl.n	8004a3a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a08:	68eb      	ldr	r3, [r5, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d126      	bne.n	8004a5c <HAL_RCC_OscConfig+0x21c>
 8004a0e:	6a23      	ldr	r3, [r4, #32]
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004a16:	f7fe ff0d 	bl	8003834 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004a1e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a20:	6a23      	ldr	r3, [r4, #32]
 8004a22:	079b      	lsls	r3, r3, #30
 8004a24:	d53f      	bpl.n	8004aa6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8004a26:	2f00      	cmp	r7, #0
 8004a28:	f43f af1e 	beq.w	8004868 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2c:	69e3      	ldr	r3, [r4, #28]
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a32:	61e3      	str	r3, [r4, #28]
 8004a34:	e718      	b.n	8004868 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8004a36:	2700      	movs	r7, #0
 8004a38:	e7e2      	b.n	8004a00 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a3a:	6833      	ldr	r3, [r6, #0]
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004a42:	f7fe fef7 	bl	8003834 <HAL_GetTick>
 8004a46:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	05da      	lsls	r2, r3, #23
 8004a4c:	d4dc      	bmi.n	8004a08 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4e:	f7fe fef1 	bl	8003834 <HAL_GetTick>
 8004a52:	eba0 0008 	sub.w	r0, r0, r8
 8004a56:	2864      	cmp	r0, #100	; 0x64
 8004a58:	d9f6      	bls.n	8004a48 <HAL_RCC_OscConfig+0x208>
 8004a5a:	e733      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5c:	b9ab      	cbnz	r3, 8004a8a <HAL_RCC_OscConfig+0x24a>
 8004a5e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6223      	str	r3, [r4, #32]
 8004a6a:	6a23      	ldr	r3, [r4, #32]
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004a72:	f7fe fedf 	bl	8003834 <HAL_GetTick>
 8004a76:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a78:	6a23      	ldr	r3, [r4, #32]
 8004a7a:	0798      	lsls	r0, r3, #30
 8004a7c:	d5d3      	bpl.n	8004a26 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7e:	f7fe fed9 	bl	8003834 <HAL_GetTick>
 8004a82:	1b80      	subs	r0, r0, r6
 8004a84:	4540      	cmp	r0, r8
 8004a86:	d9f7      	bls.n	8004a78 <HAL_RCC_OscConfig+0x238>
 8004a88:	e71c      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	6a23      	ldr	r3, [r4, #32]
 8004a8e:	d103      	bne.n	8004a98 <HAL_RCC_OscConfig+0x258>
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	6223      	str	r3, [r4, #32]
 8004a96:	e7ba      	b.n	8004a0e <HAL_RCC_OscConfig+0x1ce>
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	6223      	str	r3, [r4, #32]
 8004a9e:	6a23      	ldr	r3, [r4, #32]
 8004aa0:	f023 0304 	bic.w	r3, r3, #4
 8004aa4:	e7b6      	b.n	8004a14 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f7fe fec5 	bl	8003834 <HAL_GetTick>
 8004aaa:	eba0 0008 	sub.w	r0, r0, r8
 8004aae:	42b0      	cmp	r0, r6
 8004ab0:	d9b6      	bls.n	8004a20 <HAL_RCC_OscConfig+0x1e0>
 8004ab2:	e707      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	42420000 	.word	0x42420000
 8004abc:	42420480 	.word	0x42420480
 8004ac0:	20000004 	.word	0x20000004
 8004ac4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <HAL_RCC_OscConfig+0x334>)
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	461c      	mov	r4, r3
 8004ace:	f002 020c 	and.w	r2, r2, #12
 8004ad2:	2a08      	cmp	r2, #8
 8004ad4:	d03d      	beq.n	8004b52 <HAL_RCC_OscConfig+0x312>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	4e27      	ldr	r6, [pc, #156]	; (8004b78 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ada:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004adc:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ade:	d12b      	bne.n	8004b38 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8004ae0:	f7fe fea8 	bl	8003834 <HAL_GetTick>
 8004ae4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	0199      	lsls	r1, r3, #6
 8004aea:	d41f      	bmi.n	8004b2c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004aec:	6a2b      	ldr	r3, [r5, #32]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d105      	bne.n	8004b00 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004af4:	6862      	ldr	r2, [r4, #4]
 8004af6:	68a9      	ldr	r1, [r5, #8]
 8004af8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004afc:	430a      	orrs	r2, r1
 8004afe:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b00:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004b02:	6862      	ldr	r2, [r4, #4]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b0e:	2301      	movs	r3, #1
 8004b10:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004b12:	f7fe fe8f 	bl	8003834 <HAL_GetTick>
 8004b16:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	019a      	lsls	r2, r3, #6
 8004b1c:	f53f aea8 	bmi.w	8004870 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fe fe88 	bl	8003834 <HAL_GetTick>
 8004b24:	1b40      	subs	r0, r0, r5
 8004b26:	2802      	cmp	r0, #2
 8004b28:	d9f6      	bls.n	8004b18 <HAL_RCC_OscConfig+0x2d8>
 8004b2a:	e6cb      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fe fe82 	bl	8003834 <HAL_GetTick>
 8004b30:	1bc0      	subs	r0, r0, r7
 8004b32:	2802      	cmp	r0, #2
 8004b34:	d9d7      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x2a6>
 8004b36:	e6c5      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8004b38:	f7fe fe7c 	bl	8003834 <HAL_GetTick>
 8004b3c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	019b      	lsls	r3, r3, #6
 8004b42:	f57f ae95 	bpl.w	8004870 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b46:	f7fe fe75 	bl	8003834 <HAL_GetTick>
 8004b4a:	1b40      	subs	r0, r0, r5
 8004b4c:	2802      	cmp	r0, #2
 8004b4e:	d9f6      	bls.n	8004b3e <HAL_RCC_OscConfig+0x2fe>
 8004b50:	e6b8      	b.n	80048c4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b52:	2801      	cmp	r0, #1
 8004b54:	f43f aeb7 	beq.w	80048c6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8004b58:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	6a2b      	ldr	r3, [r5, #32]
 8004b5c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f47f ae71 	bne.w	8004848 <HAL_RCC_OscConfig+0x8>
 8004b66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b68:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8004b6c:	1ac0      	subs	r0, r0, r3
 8004b6e:	bf18      	it	ne
 8004b70:	2001      	movne	r0, #1
 8004b72:	e6a8      	b.n	80048c6 <HAL_RCC_OscConfig+0x86>
 8004b74:	40021000 	.word	0x40021000
 8004b78:	42420060 	.word	0x42420060

08004b7c <HAL_RCC_GetSysClockFreq>:
{
 8004b7c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b7e:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004b80:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b82:	ac02      	add	r4, sp, #8
 8004b84:	f103 0510 	add.w	r5, r3, #16
 8004b88:	4622      	mov	r2, r4
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	c203      	stmia	r2!, {r0, r1}
 8004b92:	42ab      	cmp	r3, r5
 8004b94:	4614      	mov	r4, r2
 8004b96:	d1f7      	bne.n	8004b88 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f88d 3004 	strb.w	r3, [sp, #4]
 8004b9e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8004ba0:	4911      	ldr	r1, [pc, #68]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ba2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8004ba6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004ba8:	f003 020c 	and.w	r2, r3, #12
 8004bac:	2a08      	cmp	r2, #8
 8004bae:	d117      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bb0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004bb4:	a806      	add	r0, sp, #24
 8004bb6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bb8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bbe:	d50c      	bpl.n	8004bda <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bc0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bc2:	480a      	ldr	r0, [pc, #40]	; (8004bec <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bc4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bc8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bca:	aa06      	add	r2, sp, #24
 8004bcc:	4413      	add	r3, r2
 8004bce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bd2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004bd6:	b007      	add	sp, #28
 8004bd8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bda:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x74>)
 8004bdc:	4350      	muls	r0, r2
 8004bde:	e7fa      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8004be0:	4802      	ldr	r0, [pc, #8]	; (8004bec <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8004be2:	e7f8      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x5a>
 8004be4:	08006a32 	.word	0x08006a32
 8004be8:	40021000 	.word	0x40021000
 8004bec:	007a1200 	.word	0x007a1200
 8004bf0:	003d0900 	.word	0x003d0900

08004bf4 <HAL_RCC_ClockConfig>:
{
 8004bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	b910      	cbnz	r0, 8004c04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004bfe:	2001      	movs	r0, #1
 8004c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4a45      	ldr	r2, [pc, #276]	; (8004d1c <HAL_RCC_ClockConfig+0x128>)
 8004c06:	6813      	ldr	r3, [r2, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	d329      	bcc.n	8004c64 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c10:	6821      	ldr	r1, [r4, #0]
 8004c12:	078e      	lsls	r6, r1, #30
 8004c14:	d431      	bmi.n	8004c7a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c16:	07ca      	lsls	r2, r1, #31
 8004c18:	d444      	bmi.n	8004ca4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1a:	4a40      	ldr	r2, [pc, #256]	; (8004d1c <HAL_RCC_ClockConfig+0x128>)
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	429d      	cmp	r5, r3
 8004c24:	d367      	bcc.n	8004cf6 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	4d3d      	ldr	r5, [pc, #244]	; (8004d20 <HAL_RCC_ClockConfig+0x12c>)
 8004c2a:	f012 0f04 	tst.w	r2, #4
 8004c2e:	d16e      	bne.n	8004d0e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	0713      	lsls	r3, r2, #28
 8004c32:	d506      	bpl.n	8004c42 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c34:	686b      	ldr	r3, [r5, #4]
 8004c36:	6922      	ldr	r2, [r4, #16]
 8004c38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004c3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004c40:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c42:	f7ff ff9b 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004c46:	686b      	ldr	r3, [r5, #4]
 8004c48:	4a36      	ldr	r2, [pc, #216]	; (8004d24 <HAL_RCC_ClockConfig+0x130>)
 8004c4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	40d8      	lsrs	r0, r3
 8004c52:	4b35      	ldr	r3, [pc, #212]	; (8004d28 <HAL_RCC_ClockConfig+0x134>)
 8004c54:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004c56:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <HAL_RCC_ClockConfig+0x138>)
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	f7fe fda9 	bl	80037b0 <HAL_InitTick>
  return HAL_OK;
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c64:	6813      	ldr	r3, [r2, #0]
 8004c66:	f023 0307 	bic.w	r3, r3, #7
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4299      	cmp	r1, r3
 8004c76:	d1c2      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xa>
 8004c78:	e7ca      	b.n	8004c10 <HAL_RCC_ClockConfig+0x1c>
 8004c7a:	4b29      	ldr	r3, [pc, #164]	; (8004d20 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	bf1e      	ittt	ne
 8004c82:	685a      	ldrne	r2, [r3, #4]
 8004c84:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004c88:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c8c:	bf42      	ittt	mi
 8004c8e:	685a      	ldrmi	r2, [r3, #4]
 8004c90:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8004c94:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68a0      	ldr	r0, [r4, #8]
 8004c9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004c9e:	4302      	orrs	r2, r0
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	e7b8      	b.n	8004c16 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca4:	6862      	ldr	r2, [r4, #4]
 8004ca6:	4e1e      	ldr	r6, [pc, #120]	; (8004d20 <HAL_RCC_ClockConfig+0x12c>)
 8004ca8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cac:	d11b      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb2:	d0a4      	beq.n	8004bfe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004cc2:	f7fe fdb7 	bl	8003834 <HAL_GetTick>
 8004cc6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc8:	6873      	ldr	r3, [r6, #4]
 8004cca:	6862      	ldr	r2, [r4, #4]
 8004ccc:	f003 030c 	and.w	r3, r3, #12
 8004cd0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004cd4:	d0a1      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd6:	f7fe fdad 	bl	8003834 <HAL_GetTick>
 8004cda:	1bc0      	subs	r0, r0, r7
 8004cdc:	4540      	cmp	r0, r8
 8004cde:	d9f3      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004ce0:	2003      	movs	r0, #3
}
 8004ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce6:	2a02      	cmp	r2, #2
 8004ce8:	d102      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004cee:	e7e0      	b.n	8004cb2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	f013 0f02 	tst.w	r3, #2
 8004cf4:	e7dd      	b.n	8004cb2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	f023 0307 	bic.w	r3, r3, #7
 8004cfc:	432b      	orrs	r3, r5
 8004cfe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d00:	6813      	ldr	r3, [r2, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	429d      	cmp	r5, r3
 8004d08:	f47f af79 	bne.w	8004bfe <HAL_RCC_ClockConfig+0xa>
 8004d0c:	e78b      	b.n	8004c26 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d0e:	686b      	ldr	r3, [r5, #4]
 8004d10:	68e1      	ldr	r1, [r4, #12]
 8004d12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d16:	430b      	orrs	r3, r1
 8004d18:	606b      	str	r3, [r5, #4]
 8004d1a:	e789      	b.n	8004c30 <HAL_RCC_ClockConfig+0x3c>
 8004d1c:	40022000 	.word	0x40022000
 8004d20:	40021000 	.word	0x40021000
 8004d24:	08006a42 	.word	0x08006a42
 8004d28:	20000004 	.word	0x20000004
 8004d2c:	2000000c 	.word	0x2000000c

08004d30 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004d32:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004d3a:	5cd3      	ldrb	r3, [r2, r3]
 8004d3c:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004d3e:	6810      	ldr	r0, [r2, #0]
}
 8004d40:	40d8      	lsrs	r0, r3
 8004d42:	4770      	bx	lr
 8004d44:	40021000 	.word	0x40021000
 8004d48:	08006a52 	.word	0x08006a52
 8004d4c:	20000004 	.word	0x20000004

08004d50 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004d52:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	4a03      	ldr	r2, [pc, #12]	; (8004d6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004d5e:	6810      	ldr	r0, [r2, #0]
}
 8004d60:	40d8      	lsrs	r0, r3
 8004d62:	4770      	bx	lr
 8004d64:	40021000 	.word	0x40021000
 8004d68:	08006a52 	.word	0x08006a52
 8004d6c:	20000004 	.word	0x20000004

08004d70 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d70:	6803      	ldr	r3, [r0, #0]
{
 8004d72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d76:	07d9      	lsls	r1, r3, #31
{
 8004d78:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d7a:	d520      	bpl.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d7c:	4c35      	ldr	r4, [pc, #212]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004d7e:	69e3      	ldr	r3, [r4, #28]
 8004d80:	00da      	lsls	r2, r3, #3
 8004d82:	d432      	bmi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004d84:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d86:	69e3      	ldr	r3, [r4, #28]
 8004d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	61e3      	str	r3, [r4, #28]
 8004d8e:	69e3      	ldr	r3, [r4, #28]
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	4e2f      	ldr	r6, [pc, #188]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d9a:	6833      	ldr	r3, [r6, #0]
 8004d9c:	05db      	lsls	r3, r3, #23
 8004d9e:	d526      	bpl.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004da0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004da2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004da6:	d136      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da8:	6a23      	ldr	r3, [r4, #32]
 8004daa:	686a      	ldr	r2, [r5, #4]
 8004dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db0:	4313      	orrs	r3, r2
 8004db2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004db4:	b11f      	cbz	r7, 8004dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db6:	69e3      	ldr	r3, [r4, #28]
 8004db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dbe:	6828      	ldr	r0, [r5, #0]
 8004dc0:	0783      	lsls	r3, r0, #30
 8004dc2:	d506      	bpl.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dc4:	4a23      	ldr	r2, [pc, #140]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004dc6:	68a9      	ldr	r1, [r5, #8]
 8004dc8:	6853      	ldr	r3, [r2, #4]
 8004dca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dd2:	f010 0010 	ands.w	r0, r0, #16
 8004dd6:	d01b      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004dda:	6969      	ldr	r1, [r5, #20]
 8004ddc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004dde:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6053      	str	r3, [r2, #4]
 8004de8:	e012      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2700      	movs	r7, #0
 8004dec:	e7d4      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dee:	6833      	ldr	r3, [r6, #0]
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004df6:	f7fe fd1d 	bl	8003834 <HAL_GetTick>
 8004dfa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	6833      	ldr	r3, [r6, #0]
 8004dfe:	05d8      	lsls	r0, r3, #23
 8004e00:	d4ce      	bmi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e02:	f7fe fd17 	bl	8003834 <HAL_GetTick>
 8004e06:	eba0 0008 	sub.w	r0, r0, r8
 8004e0a:	2864      	cmp	r0, #100	; 0x64
 8004e0c:	d9f6      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8004e0e:	2003      	movs	r0, #3
}
 8004e10:	b002      	add	sp, #8
 8004e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e16:	686a      	ldr	r2, [r5, #4]
 8004e18:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d0c3      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e20:	2001      	movs	r0, #1
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e24:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e26:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e28:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e2e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8004e30:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e32:	07d9      	lsls	r1, r3, #31
 8004e34:	d5b8      	bpl.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8004e36:	f7fe fcfd 	bl	8003834 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004e3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	6a23      	ldr	r3, [r4, #32]
 8004e42:	079a      	lsls	r2, r3, #30
 8004e44:	d4b0      	bmi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f7fe fcf5 	bl	8003834 <HAL_GetTick>
 8004e4a:	1b80      	subs	r0, r0, r6
 8004e4c:	4540      	cmp	r0, r8
 8004e4e:	d9f7      	bls.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8004e50:	e7dd      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	42420440 	.word	0x42420440

08004e60 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e60:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8004e62:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8004e74:	bf1e      	ittt	ne
 8004e76:	681a      	ldrne	r2, [r3, #0]
 8004e78:	f042 0201 	orrne.w	r2, r2, #1
 8004e7c:	601a      	strne	r2, [r3, #0]
}
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e80:	6803      	ldr	r3, [r0, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	f022 0201 	bic.w	r2, r2, #1
 8004e88:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e8a:	f241 1211 	movw	r2, #4369	; 0x1111
 8004e8e:	6a19      	ldr	r1, [r3, #32]
 8004e90:	4211      	tst	r1, r2
 8004e92:	d108      	bne.n	8004ea6 <HAL_TIM_Base_Stop_IT+0x26>
 8004e94:	f240 4244 	movw	r2, #1092	; 0x444
 8004e98:	6a19      	ldr	r1, [r3, #32]
 8004e9a:	4211      	tst	r1, r2
 8004e9c:	bf02      	ittt	eq
 8004e9e:	681a      	ldreq	r2, [r3, #0]
 8004ea0:	f022 0201 	biceq.w	r2, r2, #1
 8004ea4:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	4770      	bx	lr

08004eaa <HAL_TIM_OC_DelayElapsedCallback>:
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIM_IC_CaptureCallback>:
 8004eac:	4770      	bx	lr

08004eae <HAL_TIM_PWM_PulseFinishedCallback>:
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIM_TriggerCallback>:
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb2:	6803      	ldr	r3, [r0, #0]
{
 8004eb4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb6:	691a      	ldr	r2, [r3, #16]
{
 8004eb8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eba:	0791      	lsls	r1, r2, #30
 8004ebc:	d50e      	bpl.n	8004edc <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	0792      	lsls	r2, r2, #30
 8004ec2:	d50b      	bpl.n	8004edc <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ec4:	f06f 0202 	mvn.w	r2, #2
 8004ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eca:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ecc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ece:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed0:	079b      	lsls	r3, r3, #30
 8004ed2:	d077      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed4:	f7ff ffea 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	0750      	lsls	r0, r2, #29
 8004ee2:	d510      	bpl.n	8004f06 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	0751      	lsls	r1, r2, #29
 8004ee8:	d50d      	bpl.n	8004f06 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eea:	f06f 0204 	mvn.w	r2, #4
 8004eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef0:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efc:	d068      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	f7ff ffd5 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	2300      	movs	r3, #0
 8004f04:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	0712      	lsls	r2, r2, #28
 8004f0c:	d50f      	bpl.n	8004f2e <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	0710      	lsls	r0, r2, #28
 8004f12:	d50c      	bpl.n	8004f2e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f14:	f06f 0208 	mvn.w	r2, #8
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f1a:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f1c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f1e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f20:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f24:	d05a      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	f7ff ffc1 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	06d2      	lsls	r2, r2, #27
 8004f34:	d510      	bpl.n	8004f58 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	06d0      	lsls	r0, r2, #27
 8004f3a:	d50d      	bpl.n	8004f58 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f3c:	f06f 0210 	mvn.w	r2, #16
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f42:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f44:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f46:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f48:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f4e:	d04b      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f50:	f7ff ffac 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f54:	2300      	movs	r3, #0
 8004f56:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	07d1      	lsls	r1, r2, #31
 8004f5e:	d508      	bpl.n	8004f72 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	07d2      	lsls	r2, r2, #31
 8004f64:	d505      	bpl.n	8004f72 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f66:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f6a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f6c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f6e:	f7fd f867 	bl	8002040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	0610      	lsls	r0, r2, #24
 8004f78:	d508      	bpl.n	8004f8c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	0611      	lsls	r1, r2, #24
 8004f7e:	d505      	bpl.n	8004f8c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004f88:	f000 f9d2 	bl	8005330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	0652      	lsls	r2, r2, #25
 8004f92:	d508      	bpl.n	8004fa6 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	0650      	lsls	r0, r2, #25
 8004f98:	d505      	bpl.n	8004fa6 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004fa2:	f7ff ff85 	bl	8004eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	0691      	lsls	r1, r2, #26
 8004fac:	d522      	bpl.n	8004ff4 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	0692      	lsls	r2, r2, #26
 8004fb2:	d51f      	bpl.n	8004ff4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fb4:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb8:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fbe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004fc0:	f000 b9b5 	b.w	800532e <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc4:	f7ff ff71 	bl	8004eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff ff70 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
 8004fce:	e783      	b.n	8004ed8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd0:	f7ff ff6b 	bl	8004eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7ff ff6a 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
 8004fda:	e792      	b.n	8004f02 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fdc:	f7ff ff65 	bl	8004eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f7ff ff64 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
 8004fe6:	e7a0      	b.n	8004f2a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe8:	f7ff ff5f 	bl	8004eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7ff ff5e 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
 8004ff2:	e7af      	b.n	8004f54 <HAL_TIM_IRQHandler+0xa2>
 8004ff4:	bd10      	pop	{r4, pc}
	...

08004ff8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff8:	4a24      	ldr	r2, [pc, #144]	; (800508c <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8004ffa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ffc:	4290      	cmp	r0, r2
 8004ffe:	d012      	beq.n	8005026 <TIM_Base_SetConfig+0x2e>
 8005000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005004:	4290      	cmp	r0, r2
 8005006:	d00e      	beq.n	8005026 <TIM_Base_SetConfig+0x2e>
 8005008:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0x2e>
 800500e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005012:	4290      	cmp	r0, r2
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0x2e>
 8005016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800501a:	4290      	cmp	r0, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0x2e>
 800501e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005022:	4290      	cmp	r0, r2
 8005024:	d11d      	bne.n	8005062 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005026:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800502c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502e:	4a17      	ldr	r2, [pc, #92]	; (800508c <TIM_Base_SetConfig+0x94>)
 8005030:	4290      	cmp	r0, r2
 8005032:	d012      	beq.n	800505a <TIM_Base_SetConfig+0x62>
 8005034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005038:	4290      	cmp	r0, r2
 800503a:	d00e      	beq.n	800505a <TIM_Base_SetConfig+0x62>
 800503c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005040:	d00b      	beq.n	800505a <TIM_Base_SetConfig+0x62>
 8005042:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005046:	4290      	cmp	r0, r2
 8005048:	d007      	beq.n	800505a <TIM_Base_SetConfig+0x62>
 800504a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800504e:	4290      	cmp	r0, r2
 8005050:	d003      	beq.n	800505a <TIM_Base_SetConfig+0x62>
 8005052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005056:	4290      	cmp	r0, r2
 8005058:	d103      	bne.n	8005062 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005060:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005062:	694a      	ldr	r2, [r1, #20]
 8005064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005068:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800506a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800506c:	688b      	ldr	r3, [r1, #8]
 800506e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005070:	680b      	ldr	r3, [r1, #0]
 8005072:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <TIM_Base_SetConfig+0x94>)
 8005076:	4298      	cmp	r0, r3
 8005078:	d003      	beq.n	8005082 <TIM_Base_SetConfig+0x8a>
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	4298      	cmp	r0, r3
 8005080:	d101      	bne.n	8005086 <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005082:	690b      	ldr	r3, [r1, #16]
 8005084:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005086:	2301      	movs	r3, #1
 8005088:	6143      	str	r3, [r0, #20]
 800508a:	4770      	bx	lr
 800508c:	40012c00 	.word	0x40012c00

08005090 <HAL_TIM_Base_Init>:
{
 8005090:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005092:	4604      	mov	r4, r0
 8005094:	b1a0      	cbz	r0, 80050c0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800509a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800509e:	b91b      	cbnz	r3, 80050a8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80050a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80050a4:	f7fe fac8 	bl	8003638 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050aa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b0:	1d21      	adds	r1, r4, #4
 80050b2:	f7ff ffa1 	bl	8004ff8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80050b6:	2301      	movs	r3, #1
  return HAL_OK;
 80050b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80050ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80050be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80050c0:	2001      	movs	r0, #1
}
 80050c2:	bd10      	pop	{r4, pc}

080050c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050c4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050c6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80050d2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d4:	6083      	str	r3, [r0, #8]
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80050d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80050dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80050de:	2b01      	cmp	r3, #1
{
 80050e0:	4604      	mov	r4, r0
 80050e2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80050e6:	d019      	beq.n	800511c <HAL_TIM_ConfigClockSource+0x44>
 80050e8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80050ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80050ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80050f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80050fe:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005100:	680b      	ldr	r3, [r1, #0]
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d065      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005106:	d815      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x5c>
 8005108:	2b10      	cmp	r3, #16
 800510a:	d00c      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x4e>
 800510c:	d807      	bhi.n	800511e <HAL_TIM_ConfigClockSource+0x46>
 800510e:	b153      	cbz	r3, 8005126 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8005110:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005112:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005114:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005118:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800511c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800511e:	2b20      	cmp	r3, #32
 8005120:	d001      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x4e>
 8005122:	2b30      	cmp	r3, #48	; 0x30
 8005124:	d1f4      	bne.n	8005110 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8005126:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005128:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800512c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005130:	4313      	orrs	r3, r2
 8005132:	e01a      	b.n	800516a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8005134:	2b60      	cmp	r3, #96	; 0x60
 8005136:	d034      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0xca>
 8005138:	d819      	bhi.n	800516e <HAL_TIM_ConfigClockSource+0x96>
 800513a:	2b50      	cmp	r3, #80	; 0x50
 800513c:	d1e8      	bne.n	8005110 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513e:	684a      	ldr	r2, [r1, #4]
 8005140:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005142:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005144:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005146:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	f025 0501 	bic.w	r5, r5, #1
 800514e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005150:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005152:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005158:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800515c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800515e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005160:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005166:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800516a:	6083      	str	r3, [r0, #8]
 800516c:	e7d0      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800516e:	2b70      	cmp	r3, #112	; 0x70
 8005170:	d00c      	beq.n	800518c <HAL_TIM_ConfigClockSource+0xb4>
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005176:	d1cb      	bne.n	8005110 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8005178:	68cb      	ldr	r3, [r1, #12]
 800517a:	684a      	ldr	r2, [r1, #4]
 800517c:	6889      	ldr	r1, [r1, #8]
 800517e:	f7ff ffa1 	bl	80050c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	6893      	ldr	r3, [r2, #8]
 8005186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800518a:	e008      	b.n	800519e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800518c:	68cb      	ldr	r3, [r1, #12]
 800518e:	684a      	ldr	r2, [r1, #4]
 8005190:	6889      	ldr	r1, [r1, #8]
 8005192:	f7ff ff97 	bl	80050c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800519a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800519e:	6093      	str	r3, [r2, #8]
      break;
 80051a0:	e7b6      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051a2:	684d      	ldr	r5, [r1, #4]
 80051a4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a6:	6a01      	ldr	r1, [r0, #32]
 80051a8:	f021 0110 	bic.w	r1, r1, #16
 80051ac:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80051b0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051be:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80051c2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80051c4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80051c6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051cc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80051d0:	e7cb      	b.n	800516a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d2:	684a      	ldr	r2, [r1, #4]
 80051d4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80051d6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051da:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051de:	f025 0501 	bic.w	r5, r5, #1
 80051e2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80051e6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051ec:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80051f0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80051f2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80051f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051fa:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80051fe:	e7b4      	b.n	800516a <HAL_TIM_ConfigClockSource+0x92>

08005200 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8005200:	6800      	ldr	r0, [r0, #0]
{
 8005202:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8005204:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005206:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800520c:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800520e:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005210:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005214:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 8005216:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8005218:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800521a:	d01e      	beq.n	800525a <TIM_SlaveTimer_SetConfig+0x5a>
 800521c:	d803      	bhi.n	8005226 <TIM_SlaveTimer_SetConfig+0x26>
 800521e:	2a40      	cmp	r2, #64	; 0x40
 8005220:	d00b      	beq.n	800523a <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 8005222:	2000      	movs	r0, #0
 8005224:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 8005226:	2a60      	cmp	r2, #96	; 0x60
 8005228:	d027      	beq.n	800527a <TIM_SlaveTimer_SetConfig+0x7a>
 800522a:	2a70      	cmp	r2, #112	; 0x70
 800522c:	d1f9      	bne.n	8005222 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 800522e:	690b      	ldr	r3, [r1, #16]
 8005230:	688a      	ldr	r2, [r1, #8]
 8005232:	68c9      	ldr	r1, [r1, #12]
 8005234:	f7ff ff46 	bl	80050c4 <TIM_ETR_SetConfig>
 8005238:	e7f3      	b.n	8005222 <TIM_SlaveTimer_SetConfig+0x22>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800523a:	2c05      	cmp	r4, #5
 800523c:	d030      	beq.n	80052a0 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 800523e:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005240:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005242:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800524a:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800524c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005250:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005254:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005256:	6202      	str	r2, [r0, #32]
 8005258:	e7e3      	b.n	8005222 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	688a      	ldr	r2, [r1, #8]
 800525c:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800525e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005260:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005262:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005266:	f024 0401 	bic.w	r4, r4, #1
 800526a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800526e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005270:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005274:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8005278:	e7ec      	b.n	8005254 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800527a:	688c      	ldr	r4, [r1, #8]
 800527c:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527e:	6a01      	ldr	r1, [r0, #32]
 8005280:	f021 0110 	bic.w	r1, r1, #16
 8005284:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005286:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005288:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800528a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800528e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005292:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005296:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800529a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800529c:	6203      	str	r3, [r0, #32]
 800529e:	e7c0      	b.n	8005222 <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 80052a0:	2001      	movs	r0, #1
}
 80052a2:	bd38      	pop	{r3, r4, r5, pc}

080052a4 <HAL_TIM_SlaveConfigSynchro>:
{
 80052a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80052a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80052aa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	f04f 0302 	mov.w	r3, #2
 80052b2:	d01c      	beq.n	80052ee <HAL_TIM_SlaveConfigSynchro+0x4a>
 80052b4:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80052b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80052ba:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80052be:	f7ff ff9f 	bl	8005200 <TIM_SlaveTimer_SetConfig>
 80052c2:	b130      	cbz	r0, 80052d2 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 80052c4:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80052c6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80052ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80052ce:	4628      	mov	r0, r5
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052da:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052e2:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80052e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80052ec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80052ee:	4618      	mov	r0, r3
}
 80052f0:	bd38      	pop	{r3, r4, r5, pc}

080052f2 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80052f6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	f04f 0302 	mov.w	r3, #2
 80052fe:	d014      	beq.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005300:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005302:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005306:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800530a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800530c:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800530e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005316:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005318:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800531a:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800531c:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800531e:	2301      	movs	r3, #1
 8005320:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005324:	2300      	movs	r3, #0
 8005326:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800532a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800532c:	bd30      	pop	{r4, r5, pc}

0800532e <HAL_TIMEx_CommutCallback>:
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005330:	4770      	bx	lr
	...

08005334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005338:	6803      	ldr	r3, [r0, #0]
 800533a:	68c1      	ldr	r1, [r0, #12]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	2419      	movs	r4, #25
 8005340:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005344:	430a      	orrs	r2, r1
 8005346:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005348:	6882      	ldr	r2, [r0, #8]
 800534a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800534c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800534e:	4302      	orrs	r2, r0
 8005350:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005352:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8005356:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800535a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800535c:	430a      	orrs	r2, r1
 800535e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	69a9      	ldr	r1, [r5, #24]
 8005364:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005368:	430a      	orrs	r2, r1
 800536a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800536c:	4a0d      	ldr	r2, [pc, #52]	; (80053a4 <UART_SetConfig+0x70>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d114      	bne.n	800539c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005372:	f7ff fced 	bl	8004d50 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005376:	4360      	muls	r0, r4
 8005378:	686c      	ldr	r4, [r5, #4]
 800537a:	2264      	movs	r2, #100	; 0x64
 800537c:	00a4      	lsls	r4, r4, #2
 800537e:	fbb0 f0f4 	udiv	r0, r0, r4
 8005382:	fbb0 f4f2 	udiv	r4, r0, r2
 8005386:	fb02 0314 	mls	r3, r2, r4, r0
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	3332      	adds	r3, #50	; 0x32
 800538e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005392:	6829      	ldr	r1, [r5, #0]
 8005394:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005398:	608b      	str	r3, [r1, #8]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7ff fcc8 	bl	8004d30 <HAL_RCC_GetPCLK1Freq>
 80053a0:	e7e9      	b.n	8005376 <UART_SetConfig+0x42>
 80053a2:	bf00      	nop
 80053a4:	40013800 	.word	0x40013800

080053a8 <HAL_UART_Init>:
{
 80053a8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80053aa:	4604      	mov	r4, r0
 80053ac:	b340      	cbz	r0, 8005400 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80053ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80053b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053b6:	b91b      	cbnz	r3, 80053c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80053b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80053bc:	f7fe f98c 	bl	80036d8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80053c0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80053c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80053c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80053c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80053ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80053cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80053d2:	f7ff ffaf 	bl	8005334 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80053f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80053f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80053fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80053fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005400:	2001      	movs	r0, #1
}
 8005402:	bd10      	pop	{r4, pc}

08005404 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005404:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005406:	e003      	b.n	8005410 <LoopCopyDataInit>

08005408 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800540a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800540c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800540e:	3104      	adds	r1, #4

08005410 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005410:	480a      	ldr	r0, [pc, #40]	; (800543c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005414:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005416:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005418:	d3f6      	bcc.n	8005408 <CopyDataInit>
  ldr r2, =_sbss
 800541a:	4a0a      	ldr	r2, [pc, #40]	; (8005444 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800541c:	e002      	b.n	8005424 <LoopFillZerobss>

0800541e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800541e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005420:	f842 3b04 	str.w	r3, [r2], #4

08005424 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005424:	4b08      	ldr	r3, [pc, #32]	; (8005448 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005426:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005428:	d3f9      	bcc.n	800541e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800542a:	f7fe f89b 	bl	8003564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800542e:	f001 f955 	bl	80066dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005432:	f7fd ff8b 	bl	800334c <main>
  bx lr
 8005436:	4770      	bx	lr
  ldr r3, =_sidata
 8005438:	08006e70 	.word	0x08006e70
  ldr r0, =_sdata
 800543c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005440:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8005444:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8005448:	20000398 	.word	0x20000398

0800544c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800544c:	e7fe      	b.n	800544c <ADC1_2_IRQHandler>

0800544e <_ZdlPv>:
 800544e:	f001 b969 	b.w	8006724 <free>

08005452 <__aeabi_atexit>:
 8005452:	460b      	mov	r3, r1
 8005454:	4601      	mov	r1, r0
 8005456:	4618      	mov	r0, r3
 8005458:	f001 b92c 	b.w	80066b4 <__cxa_atexit>

0800545c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800545c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800545e:	2310      	movs	r3, #16
 8005460:	2400      	movs	r4, #0
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	6803      	ldr	r3, [r0, #0]
 8005466:	4615      	mov	r5, r2
 8005468:	699e      	ldr	r6, [r3, #24]
 800546a:	9400      	str	r4, [sp, #0]
 800546c:	466b      	mov	r3, sp
 800546e:	f88d 4004 	strb.w	r4, [sp, #4]
 8005472:	9403      	str	r4, [sp, #12]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	47b0      	blx	r6
 8005478:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800547c:	f003 0306 	and.w	r3, r3, #6
 8005480:	2b06      	cmp	r3, #6
 8005482:	bf09      	itett	eq
 8005484:	2001      	moveq	r0, #1
 8005486:	4620      	movne	r0, r4
 8005488:	9b00      	ldreq	r3, [sp, #0]
 800548a:	602b      	streq	r3, [r5, #0]
 800548c:	b004      	add	sp, #16
 800548e:	bd70      	pop	{r4, r5, r6, pc}

08005490 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8005490:	9800      	ldr	r0, [sp, #0]
 8005492:	4290      	cmp	r0, r2
 8005494:	bf0c      	ite	eq
 8005496:	2006      	moveq	r0, #6
 8005498:	2001      	movne	r0, #1
 800549a:	4770      	bx	lr

0800549c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800549c:	b510      	push	{r4, lr}
 800549e:	4604      	mov	r4, r0
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80054a2:	6003      	str	r3, [r0, #0]
 80054a4:	f000 f84b 	bl	800553e <_ZNSt9type_infoD1Ev>
 80054a8:	4620      	mov	r0, r4
 80054aa:	bd10      	pop	{r4, pc}
 80054ac:	08006a94 	.word	0x08006a94

080054b0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	f7ff fff2 	bl	800549c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80054b8:	4620      	mov	r0, r4
 80054ba:	2108      	movs	r1, #8
 80054bc:	f000 f8db 	bl	8005676 <_ZdlPvj>
 80054c0:	4620      	mov	r0, r4
 80054c2:	bd10      	pop	{r4, pc}

080054c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4615      	mov	r5, r2
 80054c8:	461c      	mov	r4, r3
 80054ca:	f000 f83b 	bl	8005544 <_ZNKSt9type_infoeqERKS_>
 80054ce:	b120      	cbz	r0, 80054da <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80054d0:	2308      	movs	r3, #8
 80054d2:	60e3      	str	r3, [r4, #12]
 80054d4:	2306      	movs	r3, #6
 80054d6:	6025      	str	r5, [r4, #0]
 80054d8:	7123      	strb	r3, [r4, #4]
 80054da:	bd38      	pop	{r3, r4, r5, pc}

080054dc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80054dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e0:	4605      	mov	r5, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	4616      	mov	r6, r2
 80054e6:	461f      	mov	r7, r3
 80054e8:	f000 f82c 	bl	8005544 <_ZNKSt9type_infoeqERKS_>
 80054ec:	b948      	cbnz	r0, 8005502 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80054ee:	2f03      	cmp	r7, #3
 80054f0:	d807      	bhi.n	8005502 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	4632      	mov	r2, r6
 80054f6:	4629      	mov	r1, r5
 80054f8:	4620      	mov	r0, r4
 80054fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	4718      	bx	r3
 8005502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005506 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	9e06      	ldr	r6, [sp, #24]
 800550c:	4698      	mov	r8, r3
 800550e:	9b08      	ldr	r3, [sp, #32]
 8005510:	4607      	mov	r7, r0
 8005512:	429e      	cmp	r6, r3
 8005514:	4615      	mov	r5, r2
 8005516:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005518:	d103      	bne.n	8005522 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 800551a:	9907      	ldr	r1, [sp, #28]
 800551c:	f000 f812 	bl	8005544 <_ZNKSt9type_infoeqERKS_>
 8005520:	b958      	cbnz	r0, 800553a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8005522:	4641      	mov	r1, r8
 8005524:	4638      	mov	r0, r7
 8005526:	f000 f80d 	bl	8005544 <_ZNKSt9type_infoeqERKS_>
 800552a:	b118      	cbz	r0, 8005534 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 800552c:	2301      	movs	r3, #1
 800552e:	6026      	str	r6, [r4, #0]
 8005530:	7125      	strb	r5, [r4, #4]
 8005532:	71a3      	strb	r3, [r4, #6]
 8005534:	2000      	movs	r0, #0
 8005536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553a:	7165      	strb	r5, [r4, #5]
 800553c:	e7fa      	b.n	8005534 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

0800553e <_ZNSt9type_infoD1Ev>:
 800553e:	4770      	bx	lr

08005540 <_ZNKSt9type_info14__is_pointer_pEv>:
 8005540:	2000      	movs	r0, #0
 8005542:	4770      	bx	lr

08005544 <_ZNKSt9type_infoeqERKS_>:
 8005544:	4281      	cmp	r1, r0
 8005546:	b508      	push	{r3, lr}
 8005548:	d00e      	beq.n	8005568 <_ZNKSt9type_infoeqERKS_+0x24>
 800554a:	6840      	ldr	r0, [r0, #4]
 800554c:	7803      	ldrb	r3, [r0, #0]
 800554e:	2b2a      	cmp	r3, #42	; 0x2a
 8005550:	d00c      	beq.n	800556c <_ZNKSt9type_infoeqERKS_+0x28>
 8005552:	6849      	ldr	r1, [r1, #4]
 8005554:	780b      	ldrb	r3, [r1, #0]
 8005556:	2b2a      	cmp	r3, #42	; 0x2a
 8005558:	bf08      	it	eq
 800555a:	3101      	addeq	r1, #1
 800555c:	f7fa fe64 	bl	8000228 <strcmp>
 8005560:	fab0 f080 	clz	r0, r0
 8005564:	0940      	lsrs	r0, r0, #5
 8005566:	bd08      	pop	{r3, pc}
 8005568:	2001      	movs	r0, #1
 800556a:	bd08      	pop	{r3, pc}
 800556c:	2000      	movs	r0, #0
 800556e:	bd08      	pop	{r3, pc}

08005570 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005570:	b510      	push	{r4, lr}
 8005572:	4604      	mov	r4, r0
 8005574:	4b02      	ldr	r3, [pc, #8]	; (8005580 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005576:	6003      	str	r3, [r0, #0]
 8005578:	f7ff ff90 	bl	800549c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800557c:	4620      	mov	r0, r4
 800557e:	bd10      	pop	{r4, pc}
 8005580:	08006b0c 	.word	0x08006b0c

08005584 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005584:	b510      	push	{r4, lr}
 8005586:	4604      	mov	r4, r0
 8005588:	f7ff fff2 	bl	8005570 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800558c:	4620      	mov	r0, r4
 800558e:	210c      	movs	r1, #12
 8005590:	f000 f871 	bl	8005676 <_ZdlPvj>
 8005594:	4620      	mov	r0, r4
 8005596:	bd10      	pop	{r4, pc}

08005598 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559c:	9e06      	ldr	r6, [sp, #24]
 800559e:	4680      	mov	r8, r0
 80055a0:	4296      	cmp	r6, r2
 80055a2:	460f      	mov	r7, r1
 80055a4:	4614      	mov	r4, r2
 80055a6:	461d      	mov	r5, r3
 80055a8:	d103      	bne.n	80055b2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 80055aa:	4619      	mov	r1, r3
 80055ac:	f7ff ffca 	bl	8005544 <_ZNKSt9type_infoeqERKS_>
 80055b0:	b958      	cbnz	r0, 80055ca <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 80055b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80055b6:	4622      	mov	r2, r4
 80055b8:	6803      	ldr	r3, [r0, #0]
 80055ba:	9606      	str	r6, [sp, #24]
 80055bc:	6a1e      	ldr	r6, [r3, #32]
 80055be:	4639      	mov	r1, r7
 80055c0:	462b      	mov	r3, r5
 80055c2:	46b4      	mov	ip, r6
 80055c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c8:	4760      	bx	ip
 80055ca:	2006      	movs	r0, #6
 80055cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80055d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	460e      	mov	r6, r1
 80055d6:	4619      	mov	r1, r3
 80055d8:	4683      	mov	fp, r0
 80055da:	4617      	mov	r7, r2
 80055dc:	4699      	mov	r9, r3
 80055de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055e0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80055e4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80055e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80055ea:	f7ff ffab 	bl	8005544 <_ZNKSt9type_infoeqERKS_>
 80055ee:	b190      	cbz	r0, 8005616 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 80055f0:	2e00      	cmp	r6, #0
 80055f2:	602c      	str	r4, [r5, #0]
 80055f4:	712f      	strb	r7, [r5, #4]
 80055f6:	db09      	blt.n	800560c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 80055f8:	4434      	add	r4, r6
 80055fa:	45a0      	cmp	r8, r4
 80055fc:	bf0c      	ite	eq
 80055fe:	2406      	moveq	r4, #6
 8005600:	2401      	movne	r4, #1
 8005602:	71ac      	strb	r4, [r5, #6]
 8005604:	2000      	movs	r0, #0
 8005606:	b001      	add	sp, #4
 8005608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560c:	3602      	adds	r6, #2
 800560e:	d1f9      	bne.n	8005604 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005610:	2301      	movs	r3, #1
 8005612:	71ab      	strb	r3, [r5, #6]
 8005614:	e7f6      	b.n	8005604 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005616:	4544      	cmp	r4, r8
 8005618:	d104      	bne.n	8005624 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800561a:	4651      	mov	r1, sl
 800561c:	4658      	mov	r0, fp
 800561e:	f7ff ff91 	bl	8005544 <_ZNKSt9type_infoeqERKS_>
 8005622:	b988      	cbnz	r0, 8005648 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8005624:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005628:	463a      	mov	r2, r7
 800562a:	6803      	ldr	r3, [r0, #0]
 800562c:	950d      	str	r5, [sp, #52]	; 0x34
 800562e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005632:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005636:	940a      	str	r4, [sp, #40]	; 0x28
 8005638:	69dc      	ldr	r4, [r3, #28]
 800563a:	4631      	mov	r1, r6
 800563c:	464b      	mov	r3, r9
 800563e:	46a4      	mov	ip, r4
 8005640:	b001      	add	sp, #4
 8005642:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005646:	4760      	bx	ip
 8005648:	716f      	strb	r7, [r5, #5]
 800564a:	e7db      	b.n	8005604 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0800564c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005650:	4604      	mov	r4, r0
 8005652:	460d      	mov	r5, r1
 8005654:	4616      	mov	r6, r2
 8005656:	461f      	mov	r7, r3
 8005658:	f7ff ff34 	bl	80054c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800565c:	b948      	cbnz	r0, 8005672 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800565e:	68a0      	ldr	r0, [r4, #8]
 8005660:	4632      	mov	r2, r6
 8005662:	6803      	ldr	r3, [r0, #0]
 8005664:	4629      	mov	r1, r5
 8005666:	699c      	ldr	r4, [r3, #24]
 8005668:	463b      	mov	r3, r7
 800566a:	46a4      	mov	ip, r4
 800566c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005670:	4760      	bx	ip
 8005672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005676 <_ZdlPvj>:
 8005676:	f7ff beea 	b.w	800544e <_ZdlPv>
	...

0800567c <pow>:
 800567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	b08f      	sub	sp, #60	; 0x3c
 8005682:	461d      	mov	r5, r3
 8005684:	4680      	mov	r8, r0
 8005686:	4689      	mov	r9, r1
 8005688:	4614      	mov	r4, r2
 800568a:	f000 f95d 	bl	8005948 <__ieee754_pow>
 800568e:	4fa5      	ldr	r7, [pc, #660]	; (8005924 <pow+0x2a8>)
 8005690:	e9cd 0100 	strd	r0, r1, [sp]
 8005694:	f997 3000 	ldrsb.w	r3, [r7]
 8005698:	463e      	mov	r6, r7
 800569a:	9302      	str	r3, [sp, #8]
 800569c:	3301      	adds	r3, #1
 800569e:	d05f      	beq.n	8005760 <pow+0xe4>
 80056a0:	4622      	mov	r2, r4
 80056a2:	462b      	mov	r3, r5
 80056a4:	4620      	mov	r0, r4
 80056a6:	4629      	mov	r1, r5
 80056a8:	f7fb fa1a 	bl	8000ae0 <__aeabi_dcmpun>
 80056ac:	4682      	mov	sl, r0
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d156      	bne.n	8005760 <pow+0xe4>
 80056b2:	4642      	mov	r2, r8
 80056b4:	464b      	mov	r3, r9
 80056b6:	4640      	mov	r0, r8
 80056b8:	4649      	mov	r1, r9
 80056ba:	f7fb fa11 	bl	8000ae0 <__aeabi_dcmpun>
 80056be:	9003      	str	r0, [sp, #12]
 80056c0:	b1e8      	cbz	r0, 80056fe <pow+0x82>
 80056c2:	2200      	movs	r2, #0
 80056c4:	2300      	movs	r3, #0
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fb f9d7 	bl	8000a7c <__aeabi_dcmpeq>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d046      	beq.n	8005760 <pow+0xe4>
 80056d2:	2301      	movs	r3, #1
 80056d4:	2200      	movs	r2, #0
 80056d6:	9304      	str	r3, [sp, #16]
 80056d8:	4b93      	ldr	r3, [pc, #588]	; (8005928 <pow+0x2ac>)
 80056da:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80056de:	9305      	str	r3, [sp, #20]
 80056e0:	4b92      	ldr	r3, [pc, #584]	; (800592c <pow+0x2b0>)
 80056e2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80056e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056ea:	9b02      	ldr	r3, [sp, #8]
 80056ec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d031      	beq.n	8005758 <pow+0xdc>
 80056f4:	a804      	add	r0, sp, #16
 80056f6:	f000 fece 	bl	8006496 <matherr>
 80056fa:	bb38      	cbnz	r0, 800574c <pow+0xd0>
 80056fc:	e058      	b.n	80057b0 <pow+0x134>
 80056fe:	f04f 0a00 	mov.w	sl, #0
 8005702:	f04f 0b00 	mov.w	fp, #0
 8005706:	4652      	mov	r2, sl
 8005708:	465b      	mov	r3, fp
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fb f9b5 	bl	8000a7c <__aeabi_dcmpeq>
 8005712:	2800      	cmp	r0, #0
 8005714:	d051      	beq.n	80057ba <pow+0x13e>
 8005716:	4652      	mov	r2, sl
 8005718:	465b      	mov	r3, fp
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fb f9ad 	bl	8000a7c <__aeabi_dcmpeq>
 8005722:	4606      	mov	r6, r0
 8005724:	b308      	cbz	r0, 800576a <pow+0xee>
 8005726:	2301      	movs	r3, #1
 8005728:	9304      	str	r3, [sp, #16]
 800572a:	4b7f      	ldr	r3, [pc, #508]	; (8005928 <pow+0x2ac>)
 800572c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005730:	9305      	str	r3, [sp, #20]
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005738:	930c      	str	r3, [sp, #48]	; 0x30
 800573a:	9b02      	ldr	r3, [sp, #8]
 800573c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0d7      	beq.n	80056f4 <pow+0x78>
 8005744:	2200      	movs	r2, #0
 8005746:	4b79      	ldr	r3, [pc, #484]	; (800592c <pow+0x2b0>)
 8005748:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800574c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800574e:	b11b      	cbz	r3, 8005758 <pow+0xdc>
 8005750:	f000 ffbe 	bl	80066d0 <__errno>
 8005754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005756:	6003      	str	r3, [r0, #0]
 8005758:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800575c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005764:	b00f      	add	sp, #60	; 0x3c
 8005766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576a:	4620      	mov	r0, r4
 800576c:	4629      	mov	r1, r5
 800576e:	f000 fe8c 	bl	800648a <finite>
 8005772:	2800      	cmp	r0, #0
 8005774:	d0f4      	beq.n	8005760 <pow+0xe4>
 8005776:	4652      	mov	r2, sl
 8005778:	465b      	mov	r3, fp
 800577a:	4620      	mov	r0, r4
 800577c:	4629      	mov	r1, r5
 800577e:	f7fb f987 	bl	8000a90 <__aeabi_dcmplt>
 8005782:	2800      	cmp	r0, #0
 8005784:	d0ec      	beq.n	8005760 <pow+0xe4>
 8005786:	2301      	movs	r3, #1
 8005788:	9304      	str	r3, [sp, #16]
 800578a:	4b67      	ldr	r3, [pc, #412]	; (8005928 <pow+0x2ac>)
 800578c:	960c      	str	r6, [sp, #48]	; 0x30
 800578e:	9305      	str	r3, [sp, #20]
 8005790:	f997 3000 	ldrsb.w	r3, [r7]
 8005794:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005798:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800579c:	b913      	cbnz	r3, 80057a4 <pow+0x128>
 800579e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80057a2:	e7a7      	b.n	80056f4 <pow+0x78>
 80057a4:	2000      	movs	r0, #0
 80057a6:	4962      	ldr	r1, [pc, #392]	; (8005930 <pow+0x2b4>)
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057ae:	d1a1      	bne.n	80056f4 <pow+0x78>
 80057b0:	f000 ff8e 	bl	80066d0 <__errno>
 80057b4:	2321      	movs	r3, #33	; 0x21
 80057b6:	6003      	str	r3, [r0, #0]
 80057b8:	e7c8      	b.n	800574c <pow+0xd0>
 80057ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057be:	f000 fe64 	bl	800648a <finite>
 80057c2:	9002      	str	r0, [sp, #8]
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d17f      	bne.n	80058c8 <pow+0x24c>
 80057c8:	4640      	mov	r0, r8
 80057ca:	4649      	mov	r1, r9
 80057cc:	f000 fe5d 	bl	800648a <finite>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d079      	beq.n	80058c8 <pow+0x24c>
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f000 fe57 	bl	800648a <finite>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d073      	beq.n	80058c8 <pow+0x24c>
 80057e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057e4:	4619      	mov	r1, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	f7fb f97a 	bl	8000ae0 <__aeabi_dcmpun>
 80057ec:	f997 7000 	ldrsb.w	r7, [r7]
 80057f0:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <pow+0x2ac>)
 80057f2:	b1a0      	cbz	r0, 800581e <pow+0x1a2>
 80057f4:	2201      	movs	r2, #1
 80057f6:	9305      	str	r3, [sp, #20]
 80057f8:	9b02      	ldr	r3, [sp, #8]
 80057fa:	9204      	str	r2, [sp, #16]
 80057fc:	930c      	str	r3, [sp, #48]	; 0x30
 80057fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005802:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005806:	2f00      	cmp	r7, #0
 8005808:	d0c9      	beq.n	800579e <pow+0x122>
 800580a:	4652      	mov	r2, sl
 800580c:	465b      	mov	r3, fp
 800580e:	4650      	mov	r0, sl
 8005810:	4659      	mov	r1, fp
 8005812:	f7fa fff5 	bl	8000800 <__aeabi_ddiv>
 8005816:	2f02      	cmp	r7, #2
 8005818:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800581c:	e7c7      	b.n	80057ae <pow+0x132>
 800581e:	2203      	movs	r2, #3
 8005820:	9305      	str	r3, [sp, #20]
 8005822:	9204      	str	r2, [sp, #16]
 8005824:	900c      	str	r0, [sp, #48]	; 0x30
 8005826:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800582a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800582e:	bb57      	cbnz	r7, 8005886 <pow+0x20a>
 8005830:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005834:	4b3f      	ldr	r3, [pc, #252]	; (8005934 <pow+0x2b8>)
 8005836:	4640      	mov	r0, r8
 8005838:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800583c:	4649      	mov	r1, r9
 800583e:	4652      	mov	r2, sl
 8005840:	465b      	mov	r3, fp
 8005842:	f7fb f925 	bl	8000a90 <__aeabi_dcmplt>
 8005846:	2800      	cmp	r0, #0
 8005848:	d064      	beq.n	8005914 <pow+0x298>
 800584a:	2200      	movs	r2, #0
 800584c:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <pow+0x2bc>)
 800584e:	4620      	mov	r0, r4
 8005850:	4629      	mov	r1, r5
 8005852:	f7fa feab 	bl	80005ac <__aeabi_dmul>
 8005856:	4604      	mov	r4, r0
 8005858:	460d      	mov	r5, r1
 800585a:	f000 fe25 	bl	80064a8 <rint>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fb f909 	bl	8000a7c <__aeabi_dcmpeq>
 800586a:	b920      	cbnz	r0, 8005876 <pow+0x1fa>
 800586c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005870:	4b32      	ldr	r3, [pc, #200]	; (800593c <pow+0x2c0>)
 8005872:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005876:	f996 3000 	ldrsb.w	r3, [r6]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d14a      	bne.n	8005914 <pow+0x298>
 800587e:	f000 ff27 	bl	80066d0 <__errno>
 8005882:	2322      	movs	r3, #34	; 0x22
 8005884:	e797      	b.n	80057b6 <pow+0x13a>
 8005886:	2200      	movs	r2, #0
 8005888:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <pow+0x2c4>)
 800588a:	4640      	mov	r0, r8
 800588c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005890:	4649      	mov	r1, r9
 8005892:	4652      	mov	r2, sl
 8005894:	465b      	mov	r3, fp
 8005896:	f7fb f8fb 	bl	8000a90 <__aeabi_dcmplt>
 800589a:	2800      	cmp	r0, #0
 800589c:	d0eb      	beq.n	8005876 <pow+0x1fa>
 800589e:	2200      	movs	r2, #0
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <pow+0x2bc>)
 80058a2:	4620      	mov	r0, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7fa fe81 	bl	80005ac <__aeabi_dmul>
 80058aa:	4604      	mov	r4, r0
 80058ac:	460d      	mov	r5, r1
 80058ae:	f000 fdfb 	bl	80064a8 <rint>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4620      	mov	r0, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fb f8df 	bl	8000a7c <__aeabi_dcmpeq>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d1d9      	bne.n	8005876 <pow+0x1fa>
 80058c2:	2200      	movs	r2, #0
 80058c4:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <pow+0x2b4>)
 80058c6:	e7d4      	b.n	8005872 <pow+0x1f6>
 80058c8:	2200      	movs	r2, #0
 80058ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ce:	2300      	movs	r3, #0
 80058d0:	f7fb f8d4 	bl	8000a7c <__aeabi_dcmpeq>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f43f af43 	beq.w	8005760 <pow+0xe4>
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f000 fdd4 	bl	800648a <finite>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f43f af3c 	beq.w	8005760 <pow+0xe4>
 80058e8:	4620      	mov	r0, r4
 80058ea:	4629      	mov	r1, r5
 80058ec:	f000 fdcd 	bl	800648a <finite>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f43f af35 	beq.w	8005760 <pow+0xe4>
 80058f6:	2304      	movs	r3, #4
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <pow+0x2ac>)
 80058fc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005900:	9305      	str	r3, [sp, #20]
 8005902:	2300      	movs	r3, #0
 8005904:	2400      	movs	r4, #0
 8005906:	930c      	str	r3, [sp, #48]	; 0x30
 8005908:	2300      	movs	r3, #0
 800590a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800590e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005912:	e7b0      	b.n	8005876 <pow+0x1fa>
 8005914:	a804      	add	r0, sp, #16
 8005916:	f000 fdbe 	bl	8006496 <matherr>
 800591a:	2800      	cmp	r0, #0
 800591c:	f47f af16 	bne.w	800574c <pow+0xd0>
 8005920:	e7ad      	b.n	800587e <pow+0x202>
 8005922:	bf00      	nop
 8005924:	20000010 	.word	0x20000010
 8005928:	08006b30 	.word	0x08006b30
 800592c:	3ff00000 	.word	0x3ff00000
 8005930:	fff00000 	.word	0xfff00000
 8005934:	47efffff 	.word	0x47efffff
 8005938:	3fe00000 	.word	0x3fe00000
 800593c:	c7efffff 	.word	0xc7efffff
 8005940:	7ff00000 	.word	0x7ff00000
 8005944:	00000000 	.word	0x00000000

08005948 <__ieee754_pow>:
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	b093      	sub	sp, #76	; 0x4c
 800594e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005952:	9e03      	ldr	r6, [sp, #12]
 8005954:	9a02      	ldr	r2, [sp, #8]
 8005956:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800595a:	ea55 0302 	orrs.w	r3, r5, r2
 800595e:	4607      	mov	r7, r0
 8005960:	4688      	mov	r8, r1
 8005962:	4682      	mov	sl, r0
 8005964:	4689      	mov	r9, r1
 8005966:	f000 849e 	beq.w	80062a6 <__ieee754_pow+0x95e>
 800596a:	4b77      	ldr	r3, [pc, #476]	; (8005b48 <__ieee754_pow+0x200>)
 800596c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005970:	429c      	cmp	r4, r3
 8005972:	dc09      	bgt.n	8005988 <__ieee754_pow+0x40>
 8005974:	d103      	bne.n	800597e <__ieee754_pow+0x36>
 8005976:	b938      	cbnz	r0, 8005988 <__ieee754_pow+0x40>
 8005978:	42a5      	cmp	r5, r4
 800597a:	dc0d      	bgt.n	8005998 <__ieee754_pow+0x50>
 800597c:	e001      	b.n	8005982 <__ieee754_pow+0x3a>
 800597e:	429d      	cmp	r5, r3
 8005980:	dc02      	bgt.n	8005988 <__ieee754_pow+0x40>
 8005982:	429d      	cmp	r5, r3
 8005984:	d10e      	bne.n	80059a4 <__ieee754_pow+0x5c>
 8005986:	b16a      	cbz	r2, 80059a4 <__ieee754_pow+0x5c>
 8005988:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800598c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005990:	ea54 030a 	orrs.w	r3, r4, sl
 8005994:	f000 8487 	beq.w	80062a6 <__ieee754_pow+0x95e>
 8005998:	486c      	ldr	r0, [pc, #432]	; (8005b4c <__ieee754_pow+0x204>)
 800599a:	b013      	add	sp, #76	; 0x4c
 800599c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	f000 bd7c 	b.w	800649c <nan>
 80059a4:	f1b9 0f00 	cmp.w	r9, #0
 80059a8:	da4f      	bge.n	8005a4a <__ieee754_pow+0x102>
 80059aa:	4b69      	ldr	r3, [pc, #420]	; (8005b50 <__ieee754_pow+0x208>)
 80059ac:	429d      	cmp	r5, r3
 80059ae:	dc4a      	bgt.n	8005a46 <__ieee754_pow+0xfe>
 80059b0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80059b4:	429d      	cmp	r5, r3
 80059b6:	dd48      	ble.n	8005a4a <__ieee754_pow+0x102>
 80059b8:	152b      	asrs	r3, r5, #20
 80059ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059be:	2b14      	cmp	r3, #20
 80059c0:	dd24      	ble.n	8005a0c <__ieee754_pow+0xc4>
 80059c2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80059c6:	fa22 f103 	lsr.w	r1, r2, r3
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d13b      	bne.n	8005a4a <__ieee754_pow+0x102>
 80059d2:	f001 0101 	and.w	r1, r1, #1
 80059d6:	f1c1 0302 	rsb	r3, r1, #2
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2a00      	cmp	r2, #0
 80059de:	d156      	bne.n	8005a8e <__ieee754_pow+0x146>
 80059e0:	4b59      	ldr	r3, [pc, #356]	; (8005b48 <__ieee754_pow+0x200>)
 80059e2:	429d      	cmp	r5, r3
 80059e4:	d122      	bne.n	8005a2c <__ieee754_pow+0xe4>
 80059e6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80059ea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80059ee:	ea53 030a 	orrs.w	r3, r3, sl
 80059f2:	f000 8458 	beq.w	80062a6 <__ieee754_pow+0x95e>
 80059f6:	4b57      	ldr	r3, [pc, #348]	; (8005b54 <__ieee754_pow+0x20c>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	dd28      	ble.n	8005a4e <__ieee754_pow+0x106>
 80059fc:	2e00      	cmp	r6, #0
 80059fe:	f280 8456 	bge.w	80062ae <__ieee754_pow+0x966>
 8005a02:	2000      	movs	r0, #0
 8005a04:	2100      	movs	r1, #0
 8005a06:	b013      	add	sp, #76	; 0x4c
 8005a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0c:	2a00      	cmp	r2, #0
 8005a0e:	d13c      	bne.n	8005a8a <__ieee754_pow+0x142>
 8005a10:	f1c3 0314 	rsb	r3, r3, #20
 8005a14:	fa45 f103 	asr.w	r1, r5, r3
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	429d      	cmp	r5, r3
 8005a1e:	f040 844e 	bne.w	80062be <__ieee754_pow+0x976>
 8005a22:	f001 0101 	and.w	r1, r1, #1
 8005a26:	f1c1 0302 	rsb	r3, r1, #2
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	4b4a      	ldr	r3, [pc, #296]	; (8005b58 <__ieee754_pow+0x210>)
 8005a2e:	429d      	cmp	r5, r3
 8005a30:	d114      	bne.n	8005a5c <__ieee754_pow+0x114>
 8005a32:	2e00      	cmp	r6, #0
 8005a34:	f280 843f 	bge.w	80062b6 <__ieee754_pow+0x96e>
 8005a38:	463a      	mov	r2, r7
 8005a3a:	4643      	mov	r3, r8
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	4946      	ldr	r1, [pc, #280]	; (8005b58 <__ieee754_pow+0x210>)
 8005a40:	f7fa fede 	bl	8000800 <__aeabi_ddiv>
 8005a44:	e7df      	b.n	8005a06 <__ieee754_pow+0xbe>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e7c7      	b.n	80059da <__ieee754_pow+0x92>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e7c5      	b.n	80059da <__ieee754_pow+0x92>
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	dad7      	bge.n	8005a02 <__ieee754_pow+0xba>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	9802      	ldr	r0, [sp, #8]
 8005a56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a5a:	e7d4      	b.n	8005a06 <__ieee754_pow+0xbe>
 8005a5c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005a60:	d106      	bne.n	8005a70 <__ieee754_pow+0x128>
 8005a62:	463a      	mov	r2, r7
 8005a64:	4643      	mov	r3, r8
 8005a66:	4638      	mov	r0, r7
 8005a68:	4641      	mov	r1, r8
 8005a6a:	f7fa fd9f 	bl	80005ac <__aeabi_dmul>
 8005a6e:	e7ca      	b.n	8005a06 <__ieee754_pow+0xbe>
 8005a70:	4b3a      	ldr	r3, [pc, #232]	; (8005b5c <__ieee754_pow+0x214>)
 8005a72:	429e      	cmp	r6, r3
 8005a74:	d10b      	bne.n	8005a8e <__ieee754_pow+0x146>
 8005a76:	f1b9 0f00 	cmp.w	r9, #0
 8005a7a:	db08      	blt.n	8005a8e <__ieee754_pow+0x146>
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	4641      	mov	r1, r8
 8005a80:	b013      	add	sp, #76	; 0x4c
 8005a82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a86:	f000 bc51 	b.w	800632c <__ieee754_sqrt>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	4638      	mov	r0, r7
 8005a90:	4641      	mov	r1, r8
 8005a92:	f000 fcf7 	bl	8006484 <fabs>
 8005a96:	f1ba 0f00 	cmp.w	sl, #0
 8005a9a:	d125      	bne.n	8005ae8 <__ieee754_pow+0x1a0>
 8005a9c:	b124      	cbz	r4, 8005aa8 <__ieee754_pow+0x160>
 8005a9e:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <__ieee754_pow+0x210>)
 8005aa0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d11f      	bne.n	8005ae8 <__ieee754_pow+0x1a0>
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	da05      	bge.n	8005ab8 <__ieee754_pow+0x170>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	4929      	ldr	r1, [pc, #164]	; (8005b58 <__ieee754_pow+0x210>)
 8005ab4:	f7fa fea4 	bl	8000800 <__aeabi_ddiv>
 8005ab8:	f1b9 0f00 	cmp.w	r9, #0
 8005abc:	daa3      	bge.n	8005a06 <__ieee754_pow+0xbe>
 8005abe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005ac2:	9b00      	ldr	r3, [sp, #0]
 8005ac4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005ac8:	4323      	orrs	r3, r4
 8005aca:	d106      	bne.n	8005ada <__ieee754_pow+0x192>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	f7fa fbb8 	bl	8000244 <__aeabi_dsub>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	e7b2      	b.n	8005a40 <__ieee754_pow+0xf8>
 8005ada:	9b00      	ldr	r3, [sp, #0]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d192      	bne.n	8005a06 <__ieee754_pow+0xbe>
 8005ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	e78e      	b.n	8005a06 <__ieee754_pow+0xbe>
 8005ae8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005aec:	f109 33ff 	add.w	r3, r9, #4294967295
 8005af0:	930c      	str	r3, [sp, #48]	; 0x30
 8005af2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005af4:	9b00      	ldr	r3, [sp, #0]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	d104      	bne.n	8005b04 <__ieee754_pow+0x1bc>
 8005afa:	463a      	mov	r2, r7
 8005afc:	4643      	mov	r3, r8
 8005afe:	4638      	mov	r0, r7
 8005b00:	4641      	mov	r1, r8
 8005b02:	e7e5      	b.n	8005ad0 <__ieee754_pow+0x188>
 8005b04:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <__ieee754_pow+0x218>)
 8005b06:	429d      	cmp	r5, r3
 8005b08:	f340 80fc 	ble.w	8005d04 <__ieee754_pow+0x3bc>
 8005b0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005b10:	429d      	cmp	r5, r3
 8005b12:	dd0b      	ble.n	8005b2c <__ieee754_pow+0x1e4>
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <__ieee754_pow+0x20c>)
 8005b16:	429c      	cmp	r4, r3
 8005b18:	dc0e      	bgt.n	8005b38 <__ieee754_pow+0x1f0>
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	f6bf af71 	bge.w	8005a02 <__ieee754_pow+0xba>
 8005b20:	a307      	add	r3, pc, #28	; (adr r3, 8005b40 <__ieee754_pow+0x1f8>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	4610      	mov	r0, r2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	e79e      	b.n	8005a6a <__ieee754_pow+0x122>
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <__ieee754_pow+0x21c>)
 8005b2e:	429c      	cmp	r4, r3
 8005b30:	ddf3      	ble.n	8005b1a <__ieee754_pow+0x1d2>
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <__ieee754_pow+0x210>)
 8005b34:	429c      	cmp	r4, r3
 8005b36:	dd17      	ble.n	8005b68 <__ieee754_pow+0x220>
 8005b38:	2e00      	cmp	r6, #0
 8005b3a:	dcf1      	bgt.n	8005b20 <__ieee754_pow+0x1d8>
 8005b3c:	e761      	b.n	8005a02 <__ieee754_pow+0xba>
 8005b3e:	bf00      	nop
 8005b40:	8800759c 	.word	0x8800759c
 8005b44:	7e37e43c 	.word	0x7e37e43c
 8005b48:	7ff00000 	.word	0x7ff00000
 8005b4c:	08006b33 	.word	0x08006b33
 8005b50:	433fffff 	.word	0x433fffff
 8005b54:	3fefffff 	.word	0x3fefffff
 8005b58:	3ff00000 	.word	0x3ff00000
 8005b5c:	3fe00000 	.word	0x3fe00000
 8005b60:	41e00000 	.word	0x41e00000
 8005b64:	3feffffe 	.word	0x3feffffe
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4b61      	ldr	r3, [pc, #388]	; (8005cf0 <__ieee754_pow+0x3a8>)
 8005b6c:	f7fa fb6a 	bl	8000244 <__aeabi_dsub>
 8005b70:	a355      	add	r3, pc, #340	; (adr r3, 8005cc8 <__ieee754_pow+0x380>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	4604      	mov	r4, r0
 8005b78:	460d      	mov	r5, r1
 8005b7a:	f7fa fd17 	bl	80005ac <__aeabi_dmul>
 8005b7e:	a354      	add	r3, pc, #336	; (adr r3, 8005cd0 <__ieee754_pow+0x388>)
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	4606      	mov	r6, r0
 8005b86:	460f      	mov	r7, r1
 8005b88:	4620      	mov	r0, r4
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	f7fa fd0e 	bl	80005ac <__aeabi_dmul>
 8005b90:	2200      	movs	r2, #0
 8005b92:	4682      	mov	sl, r0
 8005b94:	468b      	mov	fp, r1
 8005b96:	4b57      	ldr	r3, [pc, #348]	; (8005cf4 <__ieee754_pow+0x3ac>)
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	f7fa fd06 	bl	80005ac <__aeabi_dmul>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	a14c      	add	r1, pc, #304	; (adr r1, 8005cd8 <__ieee754_pow+0x390>)
 8005ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005baa:	f7fa fb4b 	bl	8000244 <__aeabi_dsub>
 8005bae:	4622      	mov	r2, r4
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	f7fa fcfb 	bl	80005ac <__aeabi_dmul>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	2000      	movs	r0, #0
 8005bbc:	494e      	ldr	r1, [pc, #312]	; (8005cf8 <__ieee754_pow+0x3b0>)
 8005bbe:	f7fa fb41 	bl	8000244 <__aeabi_dsub>
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	462b      	mov	r3, r5
 8005bc6:	4680      	mov	r8, r0
 8005bc8:	4689      	mov	r9, r1
 8005bca:	4620      	mov	r0, r4
 8005bcc:	4629      	mov	r1, r5
 8005bce:	f7fa fced 	bl	80005ac <__aeabi_dmul>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4649      	mov	r1, r9
 8005bda:	f7fa fce7 	bl	80005ac <__aeabi_dmul>
 8005bde:	a340      	add	r3, pc, #256	; (adr r3, 8005ce0 <__ieee754_pow+0x398>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f7fa fce2 	bl	80005ac <__aeabi_dmul>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4650      	mov	r0, sl
 8005bee:	4659      	mov	r1, fp
 8005bf0:	f7fa fb28 	bl	8000244 <__aeabi_dsub>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa fb22 	bl	8000248 <__adddf3>
 8005c04:	2000      	movs	r0, #0
 8005c06:	468b      	mov	fp, r1
 8005c08:	4682      	mov	sl, r0
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	f7fa fb19 	bl	8000244 <__aeabi_dsub>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fb13 	bl	8000244 <__aeabi_dsub>
 8005c1e:	9b00      	ldr	r3, [sp, #0]
 8005c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c22:	3b01      	subs	r3, #1
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	4c33      	ldreq	r4, [pc, #204]	; (8005cfc <__ieee754_pow+0x3b4>)
 8005c2e:	4c30      	ldrne	r4, [pc, #192]	; (8005cf0 <__ieee754_pow+0x3a8>)
 8005c30:	4606      	mov	r6, r0
 8005c32:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005c36:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c3a:	2400      	movs	r4, #0
 8005c3c:	460f      	mov	r7, r1
 8005c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c42:	4622      	mov	r2, r4
 8005c44:	462b      	mov	r3, r5
 8005c46:	f7fa fafd 	bl	8000244 <__aeabi_dsub>
 8005c4a:	4652      	mov	r2, sl
 8005c4c:	465b      	mov	r3, fp
 8005c4e:	f7fa fcad 	bl	80005ac <__aeabi_dmul>
 8005c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c56:	4680      	mov	r8, r0
 8005c58:	4689      	mov	r9, r1
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	f7fa fca5 	bl	80005ac <__aeabi_dmul>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa faed 	bl	8000248 <__adddf3>
 8005c6e:	4622      	mov	r2, r4
 8005c70:	462b      	mov	r3, r5
 8005c72:	4680      	mov	r8, r0
 8005c74:	4689      	mov	r9, r1
 8005c76:	4650      	mov	r0, sl
 8005c78:	4659      	mov	r1, fp
 8005c7a:	f7fa fc97 	bl	80005ac <__aeabi_dmul>
 8005c7e:	4604      	mov	r4, r0
 8005c80:	460d      	mov	r5, r1
 8005c82:	460b      	mov	r3, r1
 8005c84:	4602      	mov	r2, r0
 8005c86:	4649      	mov	r1, r9
 8005c88:	4640      	mov	r0, r8
 8005c8a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c8e:	f7fa fadb 	bl	8000248 <__adddf3>
 8005c92:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <__ieee754_pow+0x3b8>)
 8005c94:	4682      	mov	sl, r0
 8005c96:	4299      	cmp	r1, r3
 8005c98:	460f      	mov	r7, r1
 8005c9a:	460e      	mov	r6, r1
 8005c9c:	f340 82da 	ble.w	8006254 <__ieee754_pow+0x90c>
 8005ca0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005ca4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005ca8:	4303      	orrs	r3, r0
 8005caa:	f000 81d5 	beq.w	8006058 <__ieee754_pow+0x710>
 8005cae:	a30e      	add	r3, pc, #56	; (adr r3, 8005ce8 <__ieee754_pow+0x3a0>)
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb8:	f7fa fc78 	bl	80005ac <__aeabi_dmul>
 8005cbc:	a30a      	add	r3, pc, #40	; (adr r3, 8005ce8 <__ieee754_pow+0x3a0>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	e6d2      	b.n	8005a6a <__ieee754_pow+0x122>
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	60000000 	.word	0x60000000
 8005ccc:	3ff71547 	.word	0x3ff71547
 8005cd0:	f85ddf44 	.word	0xf85ddf44
 8005cd4:	3e54ae0b 	.word	0x3e54ae0b
 8005cd8:	55555555 	.word	0x55555555
 8005cdc:	3fd55555 	.word	0x3fd55555
 8005ce0:	652b82fe 	.word	0x652b82fe
 8005ce4:	3ff71547 	.word	0x3ff71547
 8005ce8:	8800759c 	.word	0x8800759c
 8005cec:	7e37e43c 	.word	0x7e37e43c
 8005cf0:	3ff00000 	.word	0x3ff00000
 8005cf4:	3fd00000 	.word	0x3fd00000
 8005cf8:	3fe00000 	.word	0x3fe00000
 8005cfc:	bff00000 	.word	0xbff00000
 8005d00:	408fffff 	.word	0x408fffff
 8005d04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	da05      	bge.n	8005d1a <__ieee754_pow+0x3d2>
 8005d0e:	4bca      	ldr	r3, [pc, #808]	; (8006038 <__ieee754_pow+0x6f0>)
 8005d10:	f7fa fc4c 	bl	80005ac <__aeabi_dmul>
 8005d14:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005d18:	460c      	mov	r4, r1
 8005d1a:	1523      	asrs	r3, r4, #20
 8005d1c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d20:	4413      	add	r3, r2
 8005d22:	9307      	str	r3, [sp, #28]
 8005d24:	4bc5      	ldr	r3, [pc, #788]	; (800603c <__ieee754_pow+0x6f4>)
 8005d26:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005d2a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005d2e:	429c      	cmp	r4, r3
 8005d30:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005d34:	dd08      	ble.n	8005d48 <__ieee754_pow+0x400>
 8005d36:	4bc2      	ldr	r3, [pc, #776]	; (8006040 <__ieee754_pow+0x6f8>)
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	f340 8154 	ble.w	8005fe6 <__ieee754_pow+0x69e>
 8005d3e:	9b07      	ldr	r3, [sp, #28]
 8005d40:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005d44:	3301      	adds	r3, #1
 8005d46:	9307      	str	r3, [sp, #28]
 8005d48:	2600      	movs	r6, #0
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	00f3      	lsls	r3, r6, #3
 8005d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005d50:	4bbc      	ldr	r3, [pc, #752]	; (8006044 <__ieee754_pow+0x6fc>)
 8005d52:	00f2      	lsls	r2, r6, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	cb18      	ldmia	r3, {r3, r4}
 8005d58:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4623      	mov	r3, r4
 8005d60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d64:	f7fa fa6e 	bl	8000244 <__aeabi_dsub>
 8005d68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005d70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005d74:	f7fa fa68 	bl	8000248 <__adddf3>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	49b2      	ldr	r1, [pc, #712]	; (8006048 <__ieee754_pow+0x700>)
 8005d80:	f7fa fd3e 	bl	8000800 <__aeabi_ddiv>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d90:	f7fa fc0c 	bl	80005ac <__aeabi_dmul>
 8005d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d98:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005d9c:	f04f 0a00 	mov.w	sl, #0
 8005da0:	2200      	movs	r2, #0
 8005da2:	106d      	asrs	r5, r5, #1
 8005da4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005da8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005dac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005db0:	4659      	mov	r1, fp
 8005db2:	4650      	mov	r0, sl
 8005db4:	4614      	mov	r4, r2
 8005db6:	461d      	mov	r5, r3
 8005db8:	f7fa fbf8 	bl	80005ac <__aeabi_dmul>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005dc4:	f7fa fa3e 	bl	8000244 <__aeabi_dsub>
 8005dc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005dcc:	4606      	mov	r6, r0
 8005dce:	460f      	mov	r7, r1
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	f7fa fa36 	bl	8000244 <__aeabi_dsub>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005de0:	f7fa fa30 	bl	8000244 <__aeabi_dsub>
 8005de4:	465b      	mov	r3, fp
 8005de6:	4652      	mov	r2, sl
 8005de8:	f7fa fbe0 	bl	80005ac <__aeabi_dmul>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	f7fa fa26 	bl	8000244 <__aeabi_dsub>
 8005df8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dfc:	f7fa fbd6 	bl	80005ac <__aeabi_dmul>
 8005e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	f7fa fbce 	bl	80005ac <__aeabi_dmul>
 8005e10:	a377      	add	r3, pc, #476	; (adr r3, 8005ff0 <__ieee754_pow+0x6a8>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	4604      	mov	r4, r0
 8005e18:	460d      	mov	r5, r1
 8005e1a:	f7fa fbc7 	bl	80005ac <__aeabi_dmul>
 8005e1e:	a376      	add	r3, pc, #472	; (adr r3, 8005ff8 <__ieee754_pow+0x6b0>)
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f7fa fa10 	bl	8000248 <__adddf3>
 8005e28:	4622      	mov	r2, r4
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	f7fa fbbe 	bl	80005ac <__aeabi_dmul>
 8005e30:	a373      	add	r3, pc, #460	; (adr r3, 8006000 <__ieee754_pow+0x6b8>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa fa07 	bl	8000248 <__adddf3>
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	f7fa fbb5 	bl	80005ac <__aeabi_dmul>
 8005e42:	a371      	add	r3, pc, #452	; (adr r3, 8006008 <__ieee754_pow+0x6c0>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa f9fe 	bl	8000248 <__adddf3>
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	462b      	mov	r3, r5
 8005e50:	f7fa fbac 	bl	80005ac <__aeabi_dmul>
 8005e54:	a36e      	add	r3, pc, #440	; (adr r3, 8006010 <__ieee754_pow+0x6c8>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa f9f5 	bl	8000248 <__adddf3>
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	f7fa fba3 	bl	80005ac <__aeabi_dmul>
 8005e66:	a36c      	add	r3, pc, #432	; (adr r3, 8006018 <__ieee754_pow+0x6d0>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa f9ec 	bl	8000248 <__adddf3>
 8005e70:	4622      	mov	r2, r4
 8005e72:	4606      	mov	r6, r0
 8005e74:	460f      	mov	r7, r1
 8005e76:	462b      	mov	r3, r5
 8005e78:	4620      	mov	r0, r4
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	f7fa fb96 	bl	80005ac <__aeabi_dmul>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4630      	mov	r0, r6
 8005e86:	4639      	mov	r1, r7
 8005e88:	f7fa fb90 	bl	80005ac <__aeabi_dmul>
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	460d      	mov	r5, r1
 8005e90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e94:	465b      	mov	r3, fp
 8005e96:	4652      	mov	r2, sl
 8005e98:	f7fa f9d6 	bl	8000248 <__adddf3>
 8005e9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ea0:	f7fa fb84 	bl	80005ac <__aeabi_dmul>
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	f7fa f9ce 	bl	8000248 <__adddf3>
 8005eac:	465b      	mov	r3, fp
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	f7fa fb78 	bl	80005ac <__aeabi_dmul>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4b63      	ldr	r3, [pc, #396]	; (800604c <__ieee754_pow+0x704>)
 8005ec0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ec4:	f7fa f9c0 	bl	8000248 <__adddf3>
 8005ec8:	4632      	mov	r2, r6
 8005eca:	463b      	mov	r3, r7
 8005ecc:	f7fa f9bc 	bl	8000248 <__adddf3>
 8005ed0:	4650      	mov	r0, sl
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4650      	mov	r0, sl
 8005eda:	4659      	mov	r1, fp
 8005edc:	f7fa fb66 	bl	80005ac <__aeabi_dmul>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	4b59      	ldr	r3, [pc, #356]	; (800604c <__ieee754_pow+0x704>)
 8005ee8:	4629      	mov	r1, r5
 8005eea:	4650      	mov	r0, sl
 8005eec:	f7fa f9aa 	bl	8000244 <__aeabi_dsub>
 8005ef0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ef4:	f7fa f9a6 	bl	8000244 <__aeabi_dsub>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4630      	mov	r0, r6
 8005efe:	4639      	mov	r1, r7
 8005f00:	f7fa f9a0 	bl	8000244 <__aeabi_dsub>
 8005f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f08:	f7fa fb50 	bl	80005ac <__aeabi_dmul>
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	4606      	mov	r6, r0
 8005f10:	460f      	mov	r7, r1
 8005f12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f16:	4652      	mov	r2, sl
 8005f18:	f7fa fb48 	bl	80005ac <__aeabi_dmul>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4630      	mov	r0, r6
 8005f22:	4639      	mov	r1, r7
 8005f24:	f7fa f990 	bl	8000248 <__adddf3>
 8005f28:	4606      	mov	r6, r0
 8005f2a:	460f      	mov	r7, r1
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4640      	mov	r0, r8
 8005f32:	4649      	mov	r1, r9
 8005f34:	f7fa f988 	bl	8000248 <__adddf3>
 8005f38:	a339      	add	r3, pc, #228	; (adr r3, 8006020 <__ieee754_pow+0x6d8>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	4650      	mov	r0, sl
 8005f40:	460d      	mov	r5, r1
 8005f42:	f7fa fb33 	bl	80005ac <__aeabi_dmul>
 8005f46:	4642      	mov	r2, r8
 8005f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4650      	mov	r0, sl
 8005f52:	f7fa f977 	bl	8000244 <__aeabi_dsub>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	f7fa f971 	bl	8000244 <__aeabi_dsub>
 8005f62:	a331      	add	r3, pc, #196	; (adr r3, 8006028 <__ieee754_pow+0x6e0>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa fb20 	bl	80005ac <__aeabi_dmul>
 8005f6c:	a330      	add	r3, pc, #192	; (adr r3, 8006030 <__ieee754_pow+0x6e8>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	4606      	mov	r6, r0
 8005f74:	460f      	mov	r7, r1
 8005f76:	4650      	mov	r0, sl
 8005f78:	4629      	mov	r1, r5
 8005f7a:	f7fa fb17 	bl	80005ac <__aeabi_dmul>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa f95f 	bl	8000248 <__adddf3>
 8005f8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f8c:	4b30      	ldr	r3, [pc, #192]	; (8006050 <__ieee754_pow+0x708>)
 8005f8e:	4413      	add	r3, r2
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa f958 	bl	8000248 <__adddf3>
 8005f98:	4604      	mov	r4, r0
 8005f9a:	9807      	ldr	r0, [sp, #28]
 8005f9c:	460d      	mov	r5, r1
 8005f9e:	f7fa fa9f 	bl	80004e0 <__aeabi_i2d>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fa8:	4b2a      	ldr	r3, [pc, #168]	; (8006054 <__ieee754_pow+0x70c>)
 8005faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fae:	4413      	add	r3, r2
 8005fb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	f7fa f946 	bl	8000248 <__adddf3>
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	f7fa f942 	bl	8000248 <__adddf3>
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	f7fa f93e 	bl	8000248 <__adddf3>
 8005fcc:	4632      	mov	r2, r6
 8005fce:	463b      	mov	r3, r7
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	468b      	mov	fp, r1
 8005fd4:	f7fa f936 	bl	8000244 <__aeabi_dsub>
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	f7fa f932 	bl	8000244 <__aeabi_dsub>
 8005fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe4:	e613      	b.n	8005c0e <__ieee754_pow+0x2c6>
 8005fe6:	2601      	movs	r6, #1
 8005fe8:	e6af      	b.n	8005d4a <__ieee754_pow+0x402>
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w
 8005ff0:	4a454eef 	.word	0x4a454eef
 8005ff4:	3fca7e28 	.word	0x3fca7e28
 8005ff8:	93c9db65 	.word	0x93c9db65
 8005ffc:	3fcd864a 	.word	0x3fcd864a
 8006000:	a91d4101 	.word	0xa91d4101
 8006004:	3fd17460 	.word	0x3fd17460
 8006008:	518f264d 	.word	0x518f264d
 800600c:	3fd55555 	.word	0x3fd55555
 8006010:	db6fabff 	.word	0xdb6fabff
 8006014:	3fdb6db6 	.word	0x3fdb6db6
 8006018:	33333303 	.word	0x33333303
 800601c:	3fe33333 	.word	0x3fe33333
 8006020:	e0000000 	.word	0xe0000000
 8006024:	3feec709 	.word	0x3feec709
 8006028:	dc3a03fd 	.word	0xdc3a03fd
 800602c:	3feec709 	.word	0x3feec709
 8006030:	145b01f5 	.word	0x145b01f5
 8006034:	be3e2fe0 	.word	0xbe3e2fe0
 8006038:	43400000 	.word	0x43400000
 800603c:	0003988e 	.word	0x0003988e
 8006040:	000bb679 	.word	0x000bb679
 8006044:	08006b38 	.word	0x08006b38
 8006048:	3ff00000 	.word	0x3ff00000
 800604c:	40080000 	.word	0x40080000
 8006050:	08006b58 	.word	0x08006b58
 8006054:	08006b48 	.word	0x08006b48
 8006058:	a39b      	add	r3, pc, #620	; (adr r3, 80062c8 <__ieee754_pow+0x980>)
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	4640      	mov	r0, r8
 8006060:	4649      	mov	r1, r9
 8006062:	f7fa f8f1 	bl	8000248 <__adddf3>
 8006066:	4622      	mov	r2, r4
 8006068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800606c:	462b      	mov	r3, r5
 800606e:	4650      	mov	r0, sl
 8006070:	4639      	mov	r1, r7
 8006072:	f7fa f8e7 	bl	8000244 <__aeabi_dsub>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800607e:	f7fa fd25 	bl	8000acc <__aeabi_dcmpgt>
 8006082:	2800      	cmp	r0, #0
 8006084:	f47f ae13 	bne.w	8005cae <__ieee754_pow+0x366>
 8006088:	4aa3      	ldr	r2, [pc, #652]	; (8006318 <__ieee754_pow+0x9d0>)
 800608a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800608e:	4293      	cmp	r3, r2
 8006090:	f340 8104 	ble.w	800629c <__ieee754_pow+0x954>
 8006094:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006098:	2000      	movs	r0, #0
 800609a:	151b      	asrs	r3, r3, #20
 800609c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80060a0:	fa4a f303 	asr.w	r3, sl, r3
 80060a4:	4433      	add	r3, r6
 80060a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80060aa:	4f9c      	ldr	r7, [pc, #624]	; (800631c <__ieee754_pow+0x9d4>)
 80060ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80060b0:	4117      	asrs	r7, r2
 80060b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80060b6:	ea23 0107 	bic.w	r1, r3, r7
 80060ba:	f1c2 0214 	rsb	r2, r2, #20
 80060be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80060c2:	fa4a fa02 	asr.w	sl, sl, r2
 80060c6:	2e00      	cmp	r6, #0
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4620      	mov	r0, r4
 80060ce:	4629      	mov	r1, r5
 80060d0:	bfb8      	it	lt
 80060d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80060d6:	f7fa f8b5 	bl	8000244 <__aeabi_dsub>
 80060da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e2:	4642      	mov	r2, r8
 80060e4:	464b      	mov	r3, r9
 80060e6:	f7fa f8af 	bl	8000248 <__adddf3>
 80060ea:	a379      	add	r3, pc, #484	; (adr r3, 80062d0 <__ieee754_pow+0x988>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	2000      	movs	r0, #0
 80060f2:	460d      	mov	r5, r1
 80060f4:	4604      	mov	r4, r0
 80060f6:	f7fa fa59 	bl	80005ac <__aeabi_dmul>
 80060fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060fe:	4606      	mov	r6, r0
 8006100:	460f      	mov	r7, r1
 8006102:	4620      	mov	r0, r4
 8006104:	4629      	mov	r1, r5
 8006106:	f7fa f89d 	bl	8000244 <__aeabi_dsub>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4640      	mov	r0, r8
 8006110:	4649      	mov	r1, r9
 8006112:	f7fa f897 	bl	8000244 <__aeabi_dsub>
 8006116:	a370      	add	r3, pc, #448	; (adr r3, 80062d8 <__ieee754_pow+0x990>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	f7fa fa46 	bl	80005ac <__aeabi_dmul>
 8006120:	a36f      	add	r3, pc, #444	; (adr r3, 80062e0 <__ieee754_pow+0x998>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	4680      	mov	r8, r0
 8006128:	4689      	mov	r9, r1
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	f7fa fa3d 	bl	80005ac <__aeabi_dmul>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	f7fa f885 	bl	8000248 <__adddf3>
 800613e:	4604      	mov	r4, r0
 8006140:	460d      	mov	r5, r1
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4630      	mov	r0, r6
 8006148:	4639      	mov	r1, r7
 800614a:	f7fa f87d 	bl	8000248 <__adddf3>
 800614e:	4632      	mov	r2, r6
 8006150:	463b      	mov	r3, r7
 8006152:	4680      	mov	r8, r0
 8006154:	4689      	mov	r9, r1
 8006156:	f7fa f875 	bl	8000244 <__aeabi_dsub>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4620      	mov	r0, r4
 8006160:	4629      	mov	r1, r5
 8006162:	f7fa f86f 	bl	8000244 <__aeabi_dsub>
 8006166:	4642      	mov	r2, r8
 8006168:	4606      	mov	r6, r0
 800616a:	460f      	mov	r7, r1
 800616c:	464b      	mov	r3, r9
 800616e:	4640      	mov	r0, r8
 8006170:	4649      	mov	r1, r9
 8006172:	f7fa fa1b 	bl	80005ac <__aeabi_dmul>
 8006176:	a35c      	add	r3, pc, #368	; (adr r3, 80062e8 <__ieee754_pow+0x9a0>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	4604      	mov	r4, r0
 800617e:	460d      	mov	r5, r1
 8006180:	f7fa fa14 	bl	80005ac <__aeabi_dmul>
 8006184:	a35a      	add	r3, pc, #360	; (adr r3, 80062f0 <__ieee754_pow+0x9a8>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	f7fa f85b 	bl	8000244 <__aeabi_dsub>
 800618e:	4622      	mov	r2, r4
 8006190:	462b      	mov	r3, r5
 8006192:	f7fa fa0b 	bl	80005ac <__aeabi_dmul>
 8006196:	a358      	add	r3, pc, #352	; (adr r3, 80062f8 <__ieee754_pow+0x9b0>)
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f7fa f854 	bl	8000248 <__adddf3>
 80061a0:	4622      	mov	r2, r4
 80061a2:	462b      	mov	r3, r5
 80061a4:	f7fa fa02 	bl	80005ac <__aeabi_dmul>
 80061a8:	a355      	add	r3, pc, #340	; (adr r3, 8006300 <__ieee754_pow+0x9b8>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f7fa f849 	bl	8000244 <__aeabi_dsub>
 80061b2:	4622      	mov	r2, r4
 80061b4:	462b      	mov	r3, r5
 80061b6:	f7fa f9f9 	bl	80005ac <__aeabi_dmul>
 80061ba:	a353      	add	r3, pc, #332	; (adr r3, 8006308 <__ieee754_pow+0x9c0>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa f842 	bl	8000248 <__adddf3>
 80061c4:	4622      	mov	r2, r4
 80061c6:	462b      	mov	r3, r5
 80061c8:	f7fa f9f0 	bl	80005ac <__aeabi_dmul>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4640      	mov	r0, r8
 80061d2:	4649      	mov	r1, r9
 80061d4:	f7fa f836 	bl	8000244 <__aeabi_dsub>
 80061d8:	4604      	mov	r4, r0
 80061da:	460d      	mov	r5, r1
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4640      	mov	r0, r8
 80061e2:	4649      	mov	r1, r9
 80061e4:	f7fa f9e2 	bl	80005ac <__aeabi_dmul>
 80061e8:	2200      	movs	r2, #0
 80061ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061f2:	4620      	mov	r0, r4
 80061f4:	4629      	mov	r1, r5
 80061f6:	f7fa f825 	bl	8000244 <__aeabi_dsub>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006202:	f7fa fafd 	bl	8000800 <__aeabi_ddiv>
 8006206:	4632      	mov	r2, r6
 8006208:	4604      	mov	r4, r0
 800620a:	460d      	mov	r5, r1
 800620c:	463b      	mov	r3, r7
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f7fa f9cb 	bl	80005ac <__aeabi_dmul>
 8006216:	4632      	mov	r2, r6
 8006218:	463b      	mov	r3, r7
 800621a:	f7fa f815 	bl	8000248 <__adddf3>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4620      	mov	r0, r4
 8006224:	4629      	mov	r1, r5
 8006226:	f7fa f80d 	bl	8000244 <__aeabi_dsub>
 800622a:	4642      	mov	r2, r8
 800622c:	464b      	mov	r3, r9
 800622e:	f7fa f809 	bl	8000244 <__aeabi_dsub>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	2000      	movs	r0, #0
 8006238:	4939      	ldr	r1, [pc, #228]	; (8006320 <__ieee754_pow+0x9d8>)
 800623a:	f7fa f803 	bl	8000244 <__aeabi_dsub>
 800623e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006242:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006246:	da2c      	bge.n	80062a2 <__ieee754_pow+0x95a>
 8006248:	4652      	mov	r2, sl
 800624a:	f000 f9b5 	bl	80065b8 <scalbn>
 800624e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006252:	e40a      	b.n	8005a6a <__ieee754_pow+0x122>
 8006254:	4b33      	ldr	r3, [pc, #204]	; (8006324 <__ieee754_pow+0x9dc>)
 8006256:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800625a:	429f      	cmp	r7, r3
 800625c:	f77f af14 	ble.w	8006088 <__ieee754_pow+0x740>
 8006260:	4b31      	ldr	r3, [pc, #196]	; (8006328 <__ieee754_pow+0x9e0>)
 8006262:	440b      	add	r3, r1
 8006264:	4303      	orrs	r3, r0
 8006266:	d00b      	beq.n	8006280 <__ieee754_pow+0x938>
 8006268:	a329      	add	r3, pc, #164	; (adr r3, 8006310 <__ieee754_pow+0x9c8>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006272:	f7fa f99b 	bl	80005ac <__aeabi_dmul>
 8006276:	a326      	add	r3, pc, #152	; (adr r3, 8006310 <__ieee754_pow+0x9c8>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7ff bbf5 	b.w	8005a6a <__ieee754_pow+0x122>
 8006280:	4622      	mov	r2, r4
 8006282:	462b      	mov	r3, r5
 8006284:	f7f9 ffde 	bl	8000244 <__aeabi_dsub>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4640      	mov	r0, r8
 800628e:	4649      	mov	r1, r9
 8006290:	f7fa fc08 	bl	8000aa4 <__aeabi_dcmple>
 8006294:	2800      	cmp	r0, #0
 8006296:	f43f aef7 	beq.w	8006088 <__ieee754_pow+0x740>
 800629a:	e7e5      	b.n	8006268 <__ieee754_pow+0x920>
 800629c:	f04f 0a00 	mov.w	sl, #0
 80062a0:	e71d      	b.n	80060de <__ieee754_pow+0x796>
 80062a2:	4621      	mov	r1, r4
 80062a4:	e7d3      	b.n	800624e <__ieee754_pow+0x906>
 80062a6:	2000      	movs	r0, #0
 80062a8:	491d      	ldr	r1, [pc, #116]	; (8006320 <__ieee754_pow+0x9d8>)
 80062aa:	f7ff bbac 	b.w	8005a06 <__ieee754_pow+0xbe>
 80062ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b2:	f7ff bba8 	b.w	8005a06 <__ieee754_pow+0xbe>
 80062b6:	4638      	mov	r0, r7
 80062b8:	4641      	mov	r1, r8
 80062ba:	f7ff bba4 	b.w	8005a06 <__ieee754_pow+0xbe>
 80062be:	9200      	str	r2, [sp, #0]
 80062c0:	f7ff bbb4 	b.w	8005a2c <__ieee754_pow+0xe4>
 80062c4:	f3af 8000 	nop.w
 80062c8:	652b82fe 	.word	0x652b82fe
 80062cc:	3c971547 	.word	0x3c971547
 80062d0:	00000000 	.word	0x00000000
 80062d4:	3fe62e43 	.word	0x3fe62e43
 80062d8:	fefa39ef 	.word	0xfefa39ef
 80062dc:	3fe62e42 	.word	0x3fe62e42
 80062e0:	0ca86c39 	.word	0x0ca86c39
 80062e4:	be205c61 	.word	0xbe205c61
 80062e8:	72bea4d0 	.word	0x72bea4d0
 80062ec:	3e663769 	.word	0x3e663769
 80062f0:	c5d26bf1 	.word	0xc5d26bf1
 80062f4:	3ebbbd41 	.word	0x3ebbbd41
 80062f8:	af25de2c 	.word	0xaf25de2c
 80062fc:	3f11566a 	.word	0x3f11566a
 8006300:	16bebd93 	.word	0x16bebd93
 8006304:	3f66c16c 	.word	0x3f66c16c
 8006308:	5555553e 	.word	0x5555553e
 800630c:	3fc55555 	.word	0x3fc55555
 8006310:	c2f8f359 	.word	0xc2f8f359
 8006314:	01a56e1f 	.word	0x01a56e1f
 8006318:	3fe00000 	.word	0x3fe00000
 800631c:	000fffff 	.word	0x000fffff
 8006320:	3ff00000 	.word	0x3ff00000
 8006324:	4090cbff 	.word	0x4090cbff
 8006328:	3f6f3400 	.word	0x3f6f3400

0800632c <__ieee754_sqrt>:
 800632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006330:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8006480 <__ieee754_sqrt+0x154>
 8006334:	4606      	mov	r6, r0
 8006336:	ea3e 0e01 	bics.w	lr, lr, r1
 800633a:	460d      	mov	r5, r1
 800633c:	4607      	mov	r7, r0
 800633e:	460a      	mov	r2, r1
 8006340:	460c      	mov	r4, r1
 8006342:	4603      	mov	r3, r0
 8006344:	d10f      	bne.n	8006366 <__ieee754_sqrt+0x3a>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	f7fa f92f 	bl	80005ac <__aeabi_dmul>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4630      	mov	r0, r6
 8006354:	4629      	mov	r1, r5
 8006356:	f7f9 ff77 	bl	8000248 <__adddf3>
 800635a:	4606      	mov	r6, r0
 800635c:	460d      	mov	r5, r1
 800635e:	4630      	mov	r0, r6
 8006360:	4629      	mov	r1, r5
 8006362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006366:	2900      	cmp	r1, #0
 8006368:	dc0e      	bgt.n	8006388 <__ieee754_sqrt+0x5c>
 800636a:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800636e:	ea5e 0707 	orrs.w	r7, lr, r7
 8006372:	d0f4      	beq.n	800635e <__ieee754_sqrt+0x32>
 8006374:	b141      	cbz	r1, 8006388 <__ieee754_sqrt+0x5c>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	f7f9 ff63 	bl	8000244 <__aeabi_dsub>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	f7fa fa3d 	bl	8000800 <__aeabi_ddiv>
 8006386:	e7e8      	b.n	800635a <__ieee754_sqrt+0x2e>
 8006388:	1512      	asrs	r2, r2, #20
 800638a:	d10c      	bne.n	80063a6 <__ieee754_sqrt+0x7a>
 800638c:	2c00      	cmp	r4, #0
 800638e:	d06e      	beq.n	800646e <__ieee754_sqrt+0x142>
 8006390:	2100      	movs	r1, #0
 8006392:	02e6      	lsls	r6, r4, #11
 8006394:	d56f      	bpl.n	8006476 <__ieee754_sqrt+0x14a>
 8006396:	1e48      	subs	r0, r1, #1
 8006398:	1a12      	subs	r2, r2, r0
 800639a:	f1c1 0020 	rsb	r0, r1, #32
 800639e:	fa23 f000 	lsr.w	r0, r3, r0
 80063a2:	4304      	orrs	r4, r0
 80063a4:	408b      	lsls	r3, r1
 80063a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80063aa:	07d5      	lsls	r5, r2, #31
 80063ac:	f04f 0500 	mov.w	r5, #0
 80063b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063b4:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80063b8:	bf42      	ittt	mi
 80063ba:	0064      	lslmi	r4, r4, #1
 80063bc:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80063c0:	005b      	lslmi	r3, r3, #1
 80063c2:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80063c6:	1050      	asrs	r0, r2, #1
 80063c8:	4421      	add	r1, r4
 80063ca:	2216      	movs	r2, #22
 80063cc:	462c      	mov	r4, r5
 80063ce:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	19a7      	adds	r7, r4, r6
 80063d6:	428f      	cmp	r7, r1
 80063d8:	bfde      	ittt	le
 80063da:	1bc9      	suble	r1, r1, r7
 80063dc:	19bc      	addle	r4, r7, r6
 80063de:	19ad      	addle	r5, r5, r6
 80063e0:	0049      	lsls	r1, r1, #1
 80063e2:	3a01      	subs	r2, #1
 80063e4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80063e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80063ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80063f0:	d1f0      	bne.n	80063d4 <__ieee754_sqrt+0xa8>
 80063f2:	f04f 0e20 	mov.w	lr, #32
 80063f6:	4694      	mov	ip, r2
 80063f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80063fc:	42a1      	cmp	r1, r4
 80063fe:	eb06 070c 	add.w	r7, r6, ip
 8006402:	dc02      	bgt.n	800640a <__ieee754_sqrt+0xde>
 8006404:	d112      	bne.n	800642c <__ieee754_sqrt+0x100>
 8006406:	429f      	cmp	r7, r3
 8006408:	d810      	bhi.n	800642c <__ieee754_sqrt+0x100>
 800640a:	2f00      	cmp	r7, #0
 800640c:	eb07 0c06 	add.w	ip, r7, r6
 8006410:	da34      	bge.n	800647c <__ieee754_sqrt+0x150>
 8006412:	f1bc 0f00 	cmp.w	ip, #0
 8006416:	db31      	blt.n	800647c <__ieee754_sqrt+0x150>
 8006418:	f104 0801 	add.w	r8, r4, #1
 800641c:	1b09      	subs	r1, r1, r4
 800641e:	4644      	mov	r4, r8
 8006420:	429f      	cmp	r7, r3
 8006422:	bf88      	it	hi
 8006424:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006428:	1bdb      	subs	r3, r3, r7
 800642a:	4432      	add	r2, r6
 800642c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8006430:	f1be 0e01 	subs.w	lr, lr, #1
 8006434:	4439      	add	r1, r7
 8006436:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800643a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800643e:	d1dd      	bne.n	80063fc <__ieee754_sqrt+0xd0>
 8006440:	430b      	orrs	r3, r1
 8006442:	d006      	beq.n	8006452 <__ieee754_sqrt+0x126>
 8006444:	1c54      	adds	r4, r2, #1
 8006446:	bf0b      	itete	eq
 8006448:	4672      	moveq	r2, lr
 800644a:	3201      	addne	r2, #1
 800644c:	3501      	addeq	r5, #1
 800644e:	f022 0201 	bicne.w	r2, r2, #1
 8006452:	106b      	asrs	r3, r5, #1
 8006454:	0852      	lsrs	r2, r2, #1
 8006456:	07e9      	lsls	r1, r5, #31
 8006458:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800645c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006460:	bf48      	it	mi
 8006462:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006466:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800646a:	4616      	mov	r6, r2
 800646c:	e777      	b.n	800635e <__ieee754_sqrt+0x32>
 800646e:	0adc      	lsrs	r4, r3, #11
 8006470:	3a15      	subs	r2, #21
 8006472:	055b      	lsls	r3, r3, #21
 8006474:	e78a      	b.n	800638c <__ieee754_sqrt+0x60>
 8006476:	0064      	lsls	r4, r4, #1
 8006478:	3101      	adds	r1, #1
 800647a:	e78a      	b.n	8006392 <__ieee754_sqrt+0x66>
 800647c:	46a0      	mov	r8, r4
 800647e:	e7cd      	b.n	800641c <__ieee754_sqrt+0xf0>
 8006480:	7ff00000 	.word	0x7ff00000

08006484 <fabs>:
 8006484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006488:	4770      	bx	lr

0800648a <finite>:
 800648a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800648e:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8006492:	0fc0      	lsrs	r0, r0, #31
 8006494:	4770      	bx	lr

08006496 <matherr>:
 8006496:	2000      	movs	r0, #0
 8006498:	4770      	bx	lr
	...

0800649c <nan>:
 800649c:	2000      	movs	r0, #0
 800649e:	4901      	ldr	r1, [pc, #4]	; (80064a4 <nan+0x8>)
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	7ff80000 	.word	0x7ff80000

080064a8 <rint>:
 80064a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064aa:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80064ae:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 80064b2:	2f13      	cmp	r7, #19
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4684      	mov	ip, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	4605      	mov	r5, r0
 80064be:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80064c2:	dc56      	bgt.n	8006572 <rint+0xca>
 80064c4:	2f00      	cmp	r7, #0
 80064c6:	da29      	bge.n	800651c <rint+0x74>
 80064c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80064cc:	4301      	orrs	r1, r0
 80064ce:	d021      	beq.n	8006514 <rint+0x6c>
 80064d0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80064d4:	4305      	orrs	r5, r0
 80064d6:	426b      	negs	r3, r5
 80064d8:	432b      	orrs	r3, r5
 80064da:	0b1b      	lsrs	r3, r3, #12
 80064dc:	0c64      	lsrs	r4, r4, #17
 80064de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064e2:	0464      	lsls	r4, r4, #17
 80064e4:	ea43 0104 	orr.w	r1, r3, r4
 80064e8:	4b31      	ldr	r3, [pc, #196]	; (80065b0 <rint+0x108>)
 80064ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80064f2:	4622      	mov	r2, r4
 80064f4:	462b      	mov	r3, r5
 80064f6:	f7f9 fea7 	bl	8000248 <__adddf3>
 80064fa:	e9cd 0100 	strd	r0, r1, [sp]
 80064fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006502:	4622      	mov	r2, r4
 8006504:	462b      	mov	r3, r5
 8006506:	f7f9 fe9d 	bl	8000244 <__aeabi_dsub>
 800650a:	4602      	mov	r2, r0
 800650c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006510:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	b003      	add	sp, #12
 800651a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800651c:	4925      	ldr	r1, [pc, #148]	; (80065b4 <rint+0x10c>)
 800651e:	4139      	asrs	r1, r7
 8006520:	ea03 0001 	and.w	r0, r3, r1
 8006524:	4310      	orrs	r0, r2
 8006526:	d0f5      	beq.n	8006514 <rint+0x6c>
 8006528:	084b      	lsrs	r3, r1, #1
 800652a:	ea04 0203 	and.w	r2, r4, r3
 800652e:	ea52 050c 	orrs.w	r5, r2, ip
 8006532:	d00a      	beq.n	800654a <rint+0xa2>
 8006534:	ea24 0303 	bic.w	r3, r4, r3
 8006538:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800653c:	2f13      	cmp	r7, #19
 800653e:	bf0c      	ite	eq
 8006540:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8006544:	2500      	movne	r5, #0
 8006546:	413c      	asrs	r4, r7
 8006548:	431c      	orrs	r4, r3
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <rint+0x108>)
 800654c:	4621      	mov	r1, r4
 800654e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006552:	4628      	mov	r0, r5
 8006554:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006558:	4622      	mov	r2, r4
 800655a:	462b      	mov	r3, r5
 800655c:	f7f9 fe74 	bl	8000248 <__adddf3>
 8006560:	e9cd 0100 	strd	r0, r1, [sp]
 8006564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006568:	4622      	mov	r2, r4
 800656a:	462b      	mov	r3, r5
 800656c:	f7f9 fe6a 	bl	8000244 <__aeabi_dsub>
 8006570:	e006      	b.n	8006580 <rint+0xd8>
 8006572:	2f33      	cmp	r7, #51	; 0x33
 8006574:	dd07      	ble.n	8006586 <rint+0xde>
 8006576:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800657a:	d1cb      	bne.n	8006514 <rint+0x6c>
 800657c:	f7f9 fe64 	bl	8000248 <__adddf3>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	e7c6      	b.n	8006514 <rint+0x6c>
 8006586:	f04f 31ff 	mov.w	r1, #4294967295
 800658a:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800658e:	fa21 f10e 	lsr.w	r1, r1, lr
 8006592:	4208      	tst	r0, r1
 8006594:	d0be      	beq.n	8006514 <rint+0x6c>
 8006596:	084b      	lsrs	r3, r1, #1
 8006598:	4218      	tst	r0, r3
 800659a:	bf1f      	itttt	ne
 800659c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80065a0:	ea20 0303 	bicne.w	r3, r0, r3
 80065a4:	fa45 fe0e 	asrne.w	lr, r5, lr
 80065a8:	ea4e 0503 	orrne.w	r5, lr, r3
 80065ac:	e7cd      	b.n	800654a <rint+0xa2>
 80065ae:	bf00      	nop
 80065b0:	08006b68 	.word	0x08006b68
 80065b4:	000fffff 	.word	0x000fffff

080065b8 <scalbn>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	4616      	mov	r6, r2
 80065bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80065c0:	4604      	mov	r4, r0
 80065c2:	460d      	mov	r5, r1
 80065c4:	460b      	mov	r3, r1
 80065c6:	b98a      	cbnz	r2, 80065ec <scalbn+0x34>
 80065c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065cc:	4303      	orrs	r3, r0
 80065ce:	d035      	beq.n	800663c <scalbn+0x84>
 80065d0:	2200      	movs	r2, #0
 80065d2:	4b2d      	ldr	r3, [pc, #180]	; (8006688 <scalbn+0xd0>)
 80065d4:	f7f9 ffea 	bl	80005ac <__aeabi_dmul>
 80065d8:	4a2c      	ldr	r2, [pc, #176]	; (800668c <scalbn+0xd4>)
 80065da:	4604      	mov	r4, r0
 80065dc:	4296      	cmp	r6, r2
 80065de:	460d      	mov	r5, r1
 80065e0:	460b      	mov	r3, r1
 80065e2:	da0e      	bge.n	8006602 <scalbn+0x4a>
 80065e4:	a324      	add	r3, pc, #144	; (adr r3, 8006678 <scalbn+0xc0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	e01c      	b.n	8006626 <scalbn+0x6e>
 80065ec:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80065f0:	42ba      	cmp	r2, r7
 80065f2:	d109      	bne.n	8006608 <scalbn+0x50>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	f7f9 fe26 	bl	8000248 <__adddf3>
 80065fc:	4604      	mov	r4, r0
 80065fe:	460d      	mov	r5, r1
 8006600:	e01c      	b.n	800663c <scalbn+0x84>
 8006602:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006606:	3a36      	subs	r2, #54	; 0x36
 8006608:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800660c:	4432      	add	r2, r6
 800660e:	428a      	cmp	r2, r1
 8006610:	dd0c      	ble.n	800662c <scalbn+0x74>
 8006612:	4622      	mov	r2, r4
 8006614:	462b      	mov	r3, r5
 8006616:	a11a      	add	r1, pc, #104	; (adr r1, 8006680 <scalbn+0xc8>)
 8006618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800661c:	f000 f83a 	bl	8006694 <copysign>
 8006620:	a317      	add	r3, pc, #92	; (adr r3, 8006680 <scalbn+0xc8>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 ffc1 	bl	80005ac <__aeabi_dmul>
 800662a:	e7e7      	b.n	80065fc <scalbn+0x44>
 800662c:	2a00      	cmp	r2, #0
 800662e:	dd08      	ble.n	8006642 <scalbn+0x8a>
 8006630:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006634:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006638:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800663c:	4620      	mov	r0, r4
 800663e:	4629      	mov	r1, r5
 8006640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006642:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006646:	da0b      	bge.n	8006660 <scalbn+0xa8>
 8006648:	f24c 3350 	movw	r3, #50000	; 0xc350
 800664c:	429e      	cmp	r6, r3
 800664e:	4622      	mov	r2, r4
 8006650:	462b      	mov	r3, r5
 8006652:	dce0      	bgt.n	8006616 <scalbn+0x5e>
 8006654:	a108      	add	r1, pc, #32	; (adr r1, 8006678 <scalbn+0xc0>)
 8006656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800665a:	f000 f81b 	bl	8006694 <copysign>
 800665e:	e7c1      	b.n	80065e4 <scalbn+0x2c>
 8006660:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006664:	3236      	adds	r2, #54	; 0x36
 8006666:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800666a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	2200      	movs	r2, #0
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <scalbn+0xd8>)
 8006676:	e7d6      	b.n	8006626 <scalbn+0x6e>
 8006678:	c2f8f359 	.word	0xc2f8f359
 800667c:	01a56e1f 	.word	0x01a56e1f
 8006680:	8800759c 	.word	0x8800759c
 8006684:	7e37e43c 	.word	0x7e37e43c
 8006688:	43500000 	.word	0x43500000
 800668c:	ffff3cb0 	.word	0xffff3cb0
 8006690:	3c900000 	.word	0x3c900000

08006694 <copysign>:
 8006694:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669c:	ea42 0103 	orr.w	r1, r2, r3
 80066a0:	4770      	bx	lr
	...

080066a4 <calloc>:
 80066a4:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <calloc+0xc>)
 80066a6:	460a      	mov	r2, r1
 80066a8:	4601      	mov	r1, r0
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	f000 b84a 	b.w	8006744 <_calloc_r>
 80066b0:	20000014 	.word	0x20000014

080066b4 <__cxa_atexit>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4c05      	ldr	r4, [pc, #20]	; (80066cc <__cxa_atexit+0x18>)
 80066b8:	4613      	mov	r3, r2
 80066ba:	b12c      	cbz	r4, 80066c8 <__cxa_atexit+0x14>
 80066bc:	460a      	mov	r2, r1
 80066be:	4601      	mov	r1, r0
 80066c0:	2002      	movs	r0, #2
 80066c2:	f3af 8000 	nop.w
 80066c6:	bd10      	pop	{r4, pc}
 80066c8:	4620      	mov	r0, r4
 80066ca:	bd10      	pop	{r4, pc}
 80066cc:	00000000 	.word	0x00000000

080066d0 <__errno>:
 80066d0:	4b01      	ldr	r3, [pc, #4]	; (80066d8 <__errno+0x8>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000014 	.word	0x20000014

080066dc <__libc_init_array>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	2500      	movs	r5, #0
 80066e0:	4e0c      	ldr	r6, [pc, #48]	; (8006714 <__libc_init_array+0x38>)
 80066e2:	4c0d      	ldr	r4, [pc, #52]	; (8006718 <__libc_init_array+0x3c>)
 80066e4:	1ba4      	subs	r4, r4, r6
 80066e6:	10a4      	asrs	r4, r4, #2
 80066e8:	42a5      	cmp	r5, r4
 80066ea:	d109      	bne.n	8006700 <__libc_init_array+0x24>
 80066ec:	f000 f94a 	bl	8006984 <_init>
 80066f0:	2500      	movs	r5, #0
 80066f2:	4e0a      	ldr	r6, [pc, #40]	; (800671c <__libc_init_array+0x40>)
 80066f4:	4c0a      	ldr	r4, [pc, #40]	; (8006720 <__libc_init_array+0x44>)
 80066f6:	1ba4      	subs	r4, r4, r6
 80066f8:	10a4      	asrs	r4, r4, #2
 80066fa:	42a5      	cmp	r5, r4
 80066fc:	d105      	bne.n	800670a <__libc_init_array+0x2e>
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006704:	4798      	blx	r3
 8006706:	3501      	adds	r5, #1
 8006708:	e7ee      	b.n	80066e8 <__libc_init_array+0xc>
 800670a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800670e:	4798      	blx	r3
 8006710:	3501      	adds	r5, #1
 8006712:	e7f2      	b.n	80066fa <__libc_init_array+0x1e>
 8006714:	08006e5c 	.word	0x08006e5c
 8006718:	08006e5c 	.word	0x08006e5c
 800671c:	08006e5c 	.word	0x08006e5c
 8006720:	08006e6c 	.word	0x08006e6c

08006724 <free>:
 8006724:	4b02      	ldr	r3, [pc, #8]	; (8006730 <free+0xc>)
 8006726:	4601      	mov	r1, r0
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	f000 b819 	b.w	8006760 <_free_r>
 800672e:	bf00      	nop
 8006730:	20000014 	.word	0x20000014

08006734 <memset>:
 8006734:	4603      	mov	r3, r0
 8006736:	4402      	add	r2, r0
 8006738:	4293      	cmp	r3, r2
 800673a:	d100      	bne.n	800673e <memset+0xa>
 800673c:	4770      	bx	lr
 800673e:	f803 1b01 	strb.w	r1, [r3], #1
 8006742:	e7f9      	b.n	8006738 <memset+0x4>

08006744 <_calloc_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	fb02 f401 	mul.w	r4, r2, r1
 800674a:	4621      	mov	r1, r4
 800674c:	f000 f854 	bl	80067f8 <_malloc_r>
 8006750:	4605      	mov	r5, r0
 8006752:	b118      	cbz	r0, 800675c <_calloc_r+0x18>
 8006754:	4622      	mov	r2, r4
 8006756:	2100      	movs	r1, #0
 8006758:	f7ff ffec 	bl	8006734 <memset>
 800675c:	4628      	mov	r0, r5
 800675e:	bd38      	pop	{r3, r4, r5, pc}

08006760 <_free_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4605      	mov	r5, r0
 8006764:	2900      	cmp	r1, #0
 8006766:	d043      	beq.n	80067f0 <_free_r+0x90>
 8006768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676c:	1f0c      	subs	r4, r1, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	bfb8      	it	lt
 8006772:	18e4      	addlt	r4, r4, r3
 8006774:	f000 f8ae 	bl	80068d4 <__malloc_lock>
 8006778:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <_free_r+0x94>)
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	4610      	mov	r0, r2
 800677e:	b933      	cbnz	r3, 800678e <_free_r+0x2e>
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	6014      	str	r4, [r2, #0]
 8006784:	4628      	mov	r0, r5
 8006786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678a:	f000 b8a4 	b.w	80068d6 <__malloc_unlock>
 800678e:	42a3      	cmp	r3, r4
 8006790:	d90b      	bls.n	80067aa <_free_r+0x4a>
 8006792:	6821      	ldr	r1, [r4, #0]
 8006794:	1862      	adds	r2, r4, r1
 8006796:	4293      	cmp	r3, r2
 8006798:	bf01      	itttt	eq
 800679a:	681a      	ldreq	r2, [r3, #0]
 800679c:	685b      	ldreq	r3, [r3, #4]
 800679e:	1852      	addeq	r2, r2, r1
 80067a0:	6022      	streq	r2, [r4, #0]
 80067a2:	6063      	str	r3, [r4, #4]
 80067a4:	6004      	str	r4, [r0, #0]
 80067a6:	e7ed      	b.n	8006784 <_free_r+0x24>
 80067a8:	4613      	mov	r3, r2
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	b10a      	cbz	r2, 80067b2 <_free_r+0x52>
 80067ae:	42a2      	cmp	r2, r4
 80067b0:	d9fa      	bls.n	80067a8 <_free_r+0x48>
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	1858      	adds	r0, r3, r1
 80067b6:	42a0      	cmp	r0, r4
 80067b8:	d10b      	bne.n	80067d2 <_free_r+0x72>
 80067ba:	6820      	ldr	r0, [r4, #0]
 80067bc:	4401      	add	r1, r0
 80067be:	1858      	adds	r0, r3, r1
 80067c0:	4282      	cmp	r2, r0
 80067c2:	6019      	str	r1, [r3, #0]
 80067c4:	d1de      	bne.n	8006784 <_free_r+0x24>
 80067c6:	6810      	ldr	r0, [r2, #0]
 80067c8:	6852      	ldr	r2, [r2, #4]
 80067ca:	4401      	add	r1, r0
 80067cc:	6019      	str	r1, [r3, #0]
 80067ce:	605a      	str	r2, [r3, #4]
 80067d0:	e7d8      	b.n	8006784 <_free_r+0x24>
 80067d2:	d902      	bls.n	80067da <_free_r+0x7a>
 80067d4:	230c      	movs	r3, #12
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	e7d4      	b.n	8006784 <_free_r+0x24>
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	1821      	adds	r1, r4, r0
 80067de:	428a      	cmp	r2, r1
 80067e0:	bf01      	itttt	eq
 80067e2:	6811      	ldreq	r1, [r2, #0]
 80067e4:	6852      	ldreq	r2, [r2, #4]
 80067e6:	1809      	addeq	r1, r1, r0
 80067e8:	6021      	streq	r1, [r4, #0]
 80067ea:	6062      	str	r2, [r4, #4]
 80067ec:	605c      	str	r4, [r3, #4]
 80067ee:	e7c9      	b.n	8006784 <_free_r+0x24>
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	bf00      	nop
 80067f4:	200001a4 	.word	0x200001a4

080067f8 <_malloc_r>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	1ccd      	adds	r5, r1, #3
 80067fc:	f025 0503 	bic.w	r5, r5, #3
 8006800:	3508      	adds	r5, #8
 8006802:	2d0c      	cmp	r5, #12
 8006804:	bf38      	it	cc
 8006806:	250c      	movcc	r5, #12
 8006808:	2d00      	cmp	r5, #0
 800680a:	4606      	mov	r6, r0
 800680c:	db01      	blt.n	8006812 <_malloc_r+0x1a>
 800680e:	42a9      	cmp	r1, r5
 8006810:	d903      	bls.n	800681a <_malloc_r+0x22>
 8006812:	230c      	movs	r3, #12
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	2000      	movs	r0, #0
 8006818:	bd70      	pop	{r4, r5, r6, pc}
 800681a:	f000 f85b 	bl	80068d4 <__malloc_lock>
 800681e:	4a23      	ldr	r2, [pc, #140]	; (80068ac <_malloc_r+0xb4>)
 8006820:	6814      	ldr	r4, [r2, #0]
 8006822:	4621      	mov	r1, r4
 8006824:	b991      	cbnz	r1, 800684c <_malloc_r+0x54>
 8006826:	4c22      	ldr	r4, [pc, #136]	; (80068b0 <_malloc_r+0xb8>)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	b91b      	cbnz	r3, 8006834 <_malloc_r+0x3c>
 800682c:	4630      	mov	r0, r6
 800682e:	f000 f841 	bl	80068b4 <_sbrk_r>
 8006832:	6020      	str	r0, [r4, #0]
 8006834:	4629      	mov	r1, r5
 8006836:	4630      	mov	r0, r6
 8006838:	f000 f83c 	bl	80068b4 <_sbrk_r>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d126      	bne.n	800688e <_malloc_r+0x96>
 8006840:	230c      	movs	r3, #12
 8006842:	4630      	mov	r0, r6
 8006844:	6033      	str	r3, [r6, #0]
 8006846:	f000 f846 	bl	80068d6 <__malloc_unlock>
 800684a:	e7e4      	b.n	8006816 <_malloc_r+0x1e>
 800684c:	680b      	ldr	r3, [r1, #0]
 800684e:	1b5b      	subs	r3, r3, r5
 8006850:	d41a      	bmi.n	8006888 <_malloc_r+0x90>
 8006852:	2b0b      	cmp	r3, #11
 8006854:	d90f      	bls.n	8006876 <_malloc_r+0x7e>
 8006856:	600b      	str	r3, [r1, #0]
 8006858:	18cc      	adds	r4, r1, r3
 800685a:	50cd      	str	r5, [r1, r3]
 800685c:	4630      	mov	r0, r6
 800685e:	f000 f83a 	bl	80068d6 <__malloc_unlock>
 8006862:	f104 000b 	add.w	r0, r4, #11
 8006866:	1d23      	adds	r3, r4, #4
 8006868:	f020 0007 	bic.w	r0, r0, #7
 800686c:	1ac3      	subs	r3, r0, r3
 800686e:	d01b      	beq.n	80068a8 <_malloc_r+0xb0>
 8006870:	425a      	negs	r2, r3
 8006872:	50e2      	str	r2, [r4, r3]
 8006874:	bd70      	pop	{r4, r5, r6, pc}
 8006876:	428c      	cmp	r4, r1
 8006878:	bf0b      	itete	eq
 800687a:	6863      	ldreq	r3, [r4, #4]
 800687c:	684b      	ldrne	r3, [r1, #4]
 800687e:	6013      	streq	r3, [r2, #0]
 8006880:	6063      	strne	r3, [r4, #4]
 8006882:	bf18      	it	ne
 8006884:	460c      	movne	r4, r1
 8006886:	e7e9      	b.n	800685c <_malloc_r+0x64>
 8006888:	460c      	mov	r4, r1
 800688a:	6849      	ldr	r1, [r1, #4]
 800688c:	e7ca      	b.n	8006824 <_malloc_r+0x2c>
 800688e:	1cc4      	adds	r4, r0, #3
 8006890:	f024 0403 	bic.w	r4, r4, #3
 8006894:	42a0      	cmp	r0, r4
 8006896:	d005      	beq.n	80068a4 <_malloc_r+0xac>
 8006898:	1a21      	subs	r1, r4, r0
 800689a:	4630      	mov	r0, r6
 800689c:	f000 f80a 	bl	80068b4 <_sbrk_r>
 80068a0:	3001      	adds	r0, #1
 80068a2:	d0cd      	beq.n	8006840 <_malloc_r+0x48>
 80068a4:	6025      	str	r5, [r4, #0]
 80068a6:	e7d9      	b.n	800685c <_malloc_r+0x64>
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
 80068aa:	bf00      	nop
 80068ac:	200001a4 	.word	0x200001a4
 80068b0:	200001a8 	.word	0x200001a8

080068b4 <_sbrk_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	2300      	movs	r3, #0
 80068b8:	4c05      	ldr	r4, [pc, #20]	; (80068d0 <_sbrk_r+0x1c>)
 80068ba:	4605      	mov	r5, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	f7fc fe36 	bl	8003530 <_sbrk>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_sbrk_r+0x1a>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_sbrk_r+0x1a>
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	20000394 	.word	0x20000394

080068d4 <__malloc_lock>:
 80068d4:	4770      	bx	lr

080068d6 <__malloc_unlock>:
 80068d6:	4770      	bx	lr

080068d8 <abort>:
 80068d8:	b508      	push	{r3, lr}
 80068da:	2006      	movs	r0, #6
 80068dc:	f000 f836 	bl	800694c <raise>
 80068e0:	2001      	movs	r0, #1
 80068e2:	f7fc fe1f 	bl	8003524 <_exit>

080068e6 <memcpy>:
 80068e6:	b510      	push	{r4, lr}
 80068e8:	1e43      	subs	r3, r0, #1
 80068ea:	440a      	add	r2, r1
 80068ec:	4291      	cmp	r1, r2
 80068ee:	d100      	bne.n	80068f2 <memcpy+0xc>
 80068f0:	bd10      	pop	{r4, pc}
 80068f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068fa:	e7f7      	b.n	80068ec <memcpy+0x6>

080068fc <_raise_r>:
 80068fc:	291f      	cmp	r1, #31
 80068fe:	b538      	push	{r3, r4, r5, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	d904      	bls.n	8006910 <_raise_r+0x14>
 8006906:	2316      	movs	r3, #22
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006912:	b112      	cbz	r2, 800691a <_raise_r+0x1e>
 8006914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006918:	b94b      	cbnz	r3, 800692e <_raise_r+0x32>
 800691a:	4620      	mov	r0, r4
 800691c:	f000 f830 	bl	8006980 <_getpid_r>
 8006920:	462a      	mov	r2, r5
 8006922:	4601      	mov	r1, r0
 8006924:	4620      	mov	r0, r4
 8006926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692a:	f000 b817 	b.w	800695c <_kill_r>
 800692e:	2b01      	cmp	r3, #1
 8006930:	d00a      	beq.n	8006948 <_raise_r+0x4c>
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	d103      	bne.n	800693e <_raise_r+0x42>
 8006936:	2316      	movs	r3, #22
 8006938:	6003      	str	r3, [r0, #0]
 800693a:	2001      	movs	r0, #1
 800693c:	bd38      	pop	{r3, r4, r5, pc}
 800693e:	2400      	movs	r4, #0
 8006940:	4628      	mov	r0, r5
 8006942:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006946:	4798      	blx	r3
 8006948:	2000      	movs	r0, #0
 800694a:	bd38      	pop	{r3, r4, r5, pc}

0800694c <raise>:
 800694c:	4b02      	ldr	r3, [pc, #8]	; (8006958 <raise+0xc>)
 800694e:	4601      	mov	r1, r0
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f7ff bfd3 	b.w	80068fc <_raise_r>
 8006956:	bf00      	nop
 8006958:	20000014 	.word	0x20000014

0800695c <_kill_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	2300      	movs	r3, #0
 8006960:	4c06      	ldr	r4, [pc, #24]	; (800697c <_kill_r+0x20>)
 8006962:	4605      	mov	r5, r0
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	f7fc fdd3 	bl	8003514 <_kill>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d102      	bne.n	8006978 <_kill_r+0x1c>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	b103      	cbz	r3, 8006978 <_kill_r+0x1c>
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop
 800697c:	20000394 	.word	0x20000394

08006980 <_getpid_r>:
 8006980:	f7fc bdc6 	b.w	8003510 <_getpid>

08006984 <_init>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr

08006990 <_fini>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	bf00      	nop
 8006994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006996:	bc08      	pop	{r3}
 8006998:	469e      	mov	lr, r3
 800699a:	4770      	bx	lr
